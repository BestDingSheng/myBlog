[{"title":"docker学习笔记","date":"2018-06-13T03:25:32.000Z","path":"2018/06/13/docker-learn/","text":"https://www.jb51.net/article/91772.htm docker 部署node项目 https://github.com/chenxiaochun/blog/issues/3 部署node项目","content":"<p><a href=\"https://www.jb51.net/article/91772.htm\" target=\"_blank\" rel=\"noopener\">https://www.jb51.net/article/91772.htm</a></p>\n<p>docker 部署node项目</p>\n<p><a href=\"https://github.com/chenxiaochun/blog/issues/3\" target=\"_blank\" rel=\"noopener\">https://github.com/chenxiaochun/blog/issues/3</a></p>\n<p>部署node项目</p>\n<a id=\"more\"></a>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/4743589-afcfec5efb868a29?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/4743589-1b8d4e96e4decd0b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/4743589-d396bb1940e3ef35?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/4743589-b306300a8f0f4f57?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/4743589-bbe8b42786d34cde?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n","excerpt":"https://www.jb51.net/article/91772.htm docker 部署node项目 https://github.com/chenxiaochun/blog/issues/3 部署node项目","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://www.ding1996.cn/tags/docker/"}]},{"title":"jenkins学习笔记","date":"2018-06-11T02:51:37.000Z","path":"2018/06/11/jenkins-learn/","text":"今天安装了Jenkins 在浏览器中localhost 8080 一直打不开不知道什么原因 然后想起来依赖java jdk 安装了java就能打开了 安装方法 https://juejin.im/post/5ad6beff6fb9a028c06b5889 使用 https://segmentfault.com/a/1190000010200161 https://kingname.info/2017/12/17/auto-deploy-blog/ Jenkins打包NodeJS项目—入门篇 原https://my.oschina.net/mobinchao/blog/871703 centos 安装jenkinshttps://my.oschina.net/ilikesss/blog/794567 jenkins webhook /github-webhook/","content":"<blockquote>\n<p>今天安装了Jenkins 在浏览器中localhost 8080 一直打不开不知道什么原因 然后想起来依赖java jdk 安装了java就能打开了</p>\n</blockquote>\n<p>安装方法</p>\n<p><a href=\"https://juejin.im/post/5ad6beff6fb9a028c06b5889\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ad6beff6fb9a028c06b5889</a></p>\n<p>使用 </p>\n<p><a href=\"https://segmentfault.com/a/1190000010200161\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000010200161</a></p>\n<p><a href=\"https://kingname.info/2017/12/17/auto-deploy-blog/\" target=\"_blank\" rel=\"noopener\">https://kingname.info/2017/12/17/auto-deploy-blog/</a></p>\n<p>Jenkins打包NodeJS项目—入门篇 原<br><a href=\"https://my.oschina.net/mobinchao/blog/871703\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/mobinchao/blog/871703</a></p>\n<p>centos 安装jenkins<br><a href=\"https://my.oschina.net/ilikesss/blog/794567\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/ilikesss/blog/794567</a></p>\n<p>jenkins  webhook</p>\n<p>/github-webhook/</p>\n","excerpt":"","categories":[],"tags":[{"name":"ci","slug":"ci","permalink":"http://www.ding1996.cn/tags/ci/"}]},{"title":"npm-registry","date":"2018-06-07T02:27:31.000Z","path":"2018/06/07/npm-registry/","text":"https://www.cnblogs.com/sghy/p/6840925.html","content":"<p><a href=\"https://www.cnblogs.com/sghy/p/6840925.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/sghy/p/6840925.html</a></p>\n","excerpt":"","categories":[],"tags":[{"name":"npm","slug":"npm","permalink":"http://www.ding1996.cn/tags/npm/"}]},{"title":"正则学习笔记","date":"2018-06-04T02:12:50.000Z","path":"2018/06/04/regexp-leran/","text":"正则在工作中对我们帮助很大但是不经常使用又很容易忘记 正则在线工具 www.regexper.com 量词1234567891011? 出现0次或者一次+ 至少出现一次&#123;3&#125;出现3次&#123;3,&#125; 至少出现3次&#123;3,5&#125;出现3到5次* 可以出现任意次 单词边界\\bis\\b 匹配is 这个单词 \\d 匹配数字 正则或者用[/-] 表示或者/ - ^ 开头 $ 结尾 js 中正则表达式对象 RegExp 创建正则表达式两种方式 1 字面量 var reg = /\\bis\\b/ var reg =new RegExp(‘’,/) 修饰符g 全局搜索 i 忽略大小写 m 多行搜索 字符类[abc] 匹配a 或者 b 或者 c 字符类去反[^abc] 匹配不是 a b c 范围类[a-z]匹配a到z的字母 [a-zA-Z] 匹配小写到大写的字母 2018-09-12 /[0-9-]/ 后面在加一个-可以匹配- 预定义类. [^\\r\\n] 除了回车符合换行符之外的所有字符 \\d [0-9] 数字字符 \\D [^0-9] 非数字符 \\s 匹配空白符 \\S 非空白符 \\w 配皮字母数字 下划线 \\W 非单词字符 贪婪模式‘12345678’.replace(/\\d{3,6}/,’x’) 默认正则会按最多匹配 “x78” 结果 非贪婪模式尽可能少的匹配 一旦匹配成功就不在继续匹配 非贪婪模式只要在量词后面加上？即可 /\\d{3,5}?/ 匹配3次 分组() 或者(|) 反向引用 忽略分组 前瞻 ‘a2*3’.replace(/\\w(?=\\d)/) 判断后面的断言 匹配 位置/(?=l)/ 匹配l前面 /(?!l)/ 相反","content":"<blockquote>\n<p>正则在工作中对我们帮助很大但是不经常使用又很容易忘记</p>\n</blockquote>\n<p>正则在线工具</p>\n<p><a href=\"http://www.regexper.com/\" target=\"_blank\" rel=\"noopener\">www.regexper.com</a></p>\n<h3 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h3><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? 出现<span class=\"number\">0</span>次或者一次</span><br><span class=\"line\"></span><br><span class=\"line\">+ 至少出现一次</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"number\">3</span>&#125;出现<span class=\"number\">3</span>次</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"number\">3</span>,&#125; 至少出现<span class=\"number\">3</span>次</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"number\">3</span>,<span class=\"number\">5</span>&#125;出现<span class=\"number\">3</span>到<span class=\"number\">5</span>次</span><br><span class=\"line\"></span><br><span class=\"line\">* 可以出现任意次</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"单词边界\"><a href=\"#单词边界\" class=\"headerlink\" title=\"单词边界\"></a>单词边界</h3><p>\\bis\\b 匹配is 这个单词</p>\n<p>\\d 匹配数字</p>\n<p>正则或者用[/-] 表示或者/ -</p>\n<p>^ 开头 $ 结尾</p>\n<p>js 中正则表达式对象 RegExp</p>\n<p>创建正则表达式两种方式 1 字面量 var reg = /\\bis\\b/ var reg =new RegExp(‘’,/)</p>\n<h3 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h3><p>g 全局搜索</p>\n<p>i 忽略大小写</p>\n<p>m 多行搜索</p>\n<h3 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h3><p>[abc] 匹配a 或者 b 或者 c</p>\n<h3 id=\"字符类去反\"><a href=\"#字符类去反\" class=\"headerlink\" title=\"字符类去反\"></a>字符类去反</h3><p>[^abc] 匹配不是 a b c</p>\n<h3 id=\"范围类\"><a href=\"#范围类\" class=\"headerlink\" title=\"范围类\"></a>范围类</h3><p>[a-z]匹配a到z的字母</p>\n<p>[a-zA-Z] 匹配小写到大写的字母</p>\n<p>2018-09-12 /[0-9-]/ 后面在加一个-可以匹配-</p>\n<h3 id=\"预定义类\"><a href=\"#预定义类\" class=\"headerlink\" title=\"预定义类\"></a>预定义类</h3><p>. [^\\r\\n] 除了回车符合换行符之外的所有字符</p>\n<p>\\d [0-9] 数字字符</p>\n<p>\\D [^0-9] 非数字符</p>\n<p>\\s 匹配空白符</p>\n<p>\\S 非空白符</p>\n<p>\\w 配皮字母数字 下划线</p>\n<p>\\W 非单词字符</p>\n<h3 id=\"贪婪模式\"><a href=\"#贪婪模式\" class=\"headerlink\" title=\"贪婪模式\"></a>贪婪模式</h3><p>‘12345678’.replace(/\\d{3,6}/,’x’) 默认正则会按最多匹配</p>\n<p>“x78” 结果</p>\n<h3 id=\"非贪婪模式\"><a href=\"#非贪婪模式\" class=\"headerlink\" title=\"非贪婪模式\"></a>非贪婪模式</h3><p>尽可能少的匹配 一旦匹配成功就不在继续匹配</p>\n<p>非贪婪模式只要在量词后面加上？即可</p>\n<p>/\\d{3,5}?/ 匹配3次</p>\n<h3 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h3><p>()</p>\n<h3 id=\"或者\"><a href=\"#或者\" class=\"headerlink\" title=\"或者\"></a>或者</h3><p>(|)</p>\n<p>反向引用</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/4743589-0118597bed7ce757?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h3 id=\"忽略分组\"><a href=\"#忽略分组\" class=\"headerlink\" title=\"忽略分组\"></a>忽略分组</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/4743589-de7412ef6d4b9033?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h3 id=\"前瞻\"><a href=\"#前瞻\" class=\"headerlink\" title=\"前瞻\"></a>前瞻</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/4743589-915aaa3b132ad36f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>‘a2*3’.replace(/\\w(?=\\d)/) 判断后面的断言</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/4743589-a470dc92963693b8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h3 id=\"匹配-位置\"><a href=\"#匹配-位置\" class=\"headerlink\" title=\"匹配 位置\"></a>匹配 位置</h3><p>/(?=l)/ 匹配l前面</p>\n<p>/(?!l)/ 相反</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/4743589-47d0c8410f8432cf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n","excerpt":"正则在工作中对我们帮助很大但是不经常使用又很容易忘记 正则在线工具 www.regexper.com 量词1234567891011? 出现0次或者一次+ 至少出现一次&#123;3&#125;出现3次&#123;3,&#125; 至少出现3次&#123;3,5&#125;出现3到5次* 可以出现任意次","categories":[],"tags":[{"name":"正则","slug":"正则","permalink":"http://www.ding1996.cn/tags/正则/"}]},{"title":"instanceof&&hasOwnProperty用法","date":"2018-06-01T08:41:50.000Z","path":"2018/06/01/js-object-attribute/","text":"instanceof hasOwnProperty 这个两个属性经常看到但自己没怎么用，刚好今天闲了下来仔细看了这两个属性 instanceof12var oStringObject = new String(\"hello world\"); console.log(oStringObject instanceof String); // 输出 \"true\" 1234// 判断 foo 是否是 Foo 类的实例function Foo()&#123;&#125; var foo = new Foo(); console.log(foo instanceof Foo)//true instanceof 可以判断 一个对象是不是另一个对象的实例 复杂的用法看这里 https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/ hasOwnProperty123456function Person()&#123; this.name = 'hah'&#125;Person.prototype.say = 'ddd';console.log(dingsheng.hasOwnProperty('name')) // trueconsole.log(dingsheng.hasOwnProperty('say')) // false hasOwnProperty 可以判断某个属性是实例属性还是原型上的属性如果是实例属性那么久返回true 原型的上的属性就返回false hasOwnProperty的使用场景当使用for in 遍历一个对象的时候不想去遍历到原型的属性就可以使用 hasOwnProperty 12345678var obj = &#123; a:'hh', b:'dd'&#125;Object.prototype.say='hh'for(let item in obj)&#123; console.log(itme) // a b say&#125; 分别会打印出 a b say 如果我不想遍历原型上的属性就使用hasOwnProperty判断下就行了 1234567891011var obj = &#123; a:'hh', b:'dd'&#125;Object.prototype.say='hh'for(let item in obj)&#123; if(obj.hasOwnProperty(item))&#123; console.log(itme) // a b &#125; &#125;","content":"<blockquote>\n<p> instanceof hasOwnProperty   这个两个属性经常看到但自己没怎么用，刚好今天闲了下来仔细看了这两个属性</p>\n</blockquote>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oStringObject = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">\"hello world\"</span>); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(oStringObject <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span>);   <span class=\"comment\">// 输出 \"true\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断 foo 是否是 Foo 类的实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;&#125; </span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo(); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo <span class=\"keyword\">instanceof</span> Foo)<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>instanceof  可以判断 一个对象是不是另一个对象的实例 </p>\n<a id=\"more\"></a>\n<p>复杂的用法看这里 <a href=\"https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/</a></p>\n<h3 id=\"hasOwnProperty-NaN\"><a href=\"#hasOwnProperty-NaN\" class=\"headerlink\" title=\"hasOwnProperty\"></a>hasOwnProperty</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'hah'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.say = <span class=\"string\">'ddd'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dingsheng.hasOwnProperty(<span class=\"string\">'name'</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dingsheng.hasOwnProperty(<span class=\"string\">'say'</span>)) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>hasOwnProperty  可以判断某个属性是实例属性还是原型上的属性如果是实例属性那么久返回true 原型的上的属性就返回false</p>\n<h3 id=\"hasOwnProperty的使用场景\"><a href=\"#hasOwnProperty的使用场景\" class=\"headerlink\" title=\"hasOwnProperty的使用场景\"></a>hasOwnProperty的使用场景</h3><p>当使用for in 遍历一个对象的时候不想去遍历到原型的属性就可以使用 hasOwnProperty</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">\ta:<span class=\"string\">'hh'</span>,</span><br><span class=\"line\">\tb:<span class=\"string\">'dd'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.say=<span class=\"string\">'hh'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(itme) <span class=\"comment\">// a b say</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分别会打印出 a b say 如果我不想遍历原型上的属性就使用hasOwnProperty判断下就行了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">\ta:<span class=\"string\">'hh'</span>,</span><br><span class=\"line\">\tb:<span class=\"string\">'dd'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.say=<span class=\"string\">'hh'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(obj.hasOwnProperty(item))&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(itme) <span class=\"comment\">// a b </span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"instanceof hasOwnProperty 这个两个属性经常看到但自己没怎么用，刚好今天闲了下来仔细看了这两个属性 instanceof12var oStringObject = new String(\"hello world\"); console.log(oStringObject instanceof String); // 输出 \"true\" 1234// 判断 foo 是否是 Foo 类的实例function Foo()&#123;&#125; var foo = new Foo(); console.log(foo instanceof Foo)//true instanceof 可以判断 一个对象是不是另一个对象的实例","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"for in 和 for of 的区别","date":"2018-05-30T04:58:16.000Z","path":"2018/05/30/cycle-learn/","text":"遍历数组通常使用for循环，ES5的话也可以使用forEach，ES5具有遍历数组功能的还有map、filter、some、every、reduce、reduceRight等，只不过他们的返回结果不一样。但是使用foreach遍历数组的话，使用break不能中断循环，使用return也不能返回到外层函数。 12345678Array.prototype.method=function()&#123; console.log(this.length);&#125;var myArray=[1,2,4,5,6,7]myArray.name=\"数组\"for (var index in myArray) &#123; console.log(myArray[index]);&#125; 使用for in 也可以遍历数组，但是会存在以下问题： 1.index索引为字符串型数字，不能直接进行几何运算 2.遍历顺序有可能不是按照实际数组的内部顺序 3.使用for in会遍历数组所有的可枚举属性，包括原型。例如上栗的原型方法method和name属性 所以for in更适合遍历对象，不要使用for in遍历数组。 那么除了使用for循环，如何更简单的正确的遍历数组达到我们的期望呢（即不遍历method和name），ES6中的for of更胜一筹. 12345678Array.prototype.method=function()&#123; console.log(this.length);&#125;var myArray=[1,2,4,5,6,7]myArray.name=\"数组\";for (var value of myArray) &#123; console.log(value);&#125; 记住，for in遍历的是数组的索引（即键名），而for of遍历的是数组元素值。 for of遍历的只是数组内的元素，而不包括数组的原型属性method和索引name 遍历对象 通常用for in来遍历对象的键名 1234567891011Object.prototype.method=function()&#123; console.log(this);&#125;var myObject=&#123; a:1, b:2, c:3&#125;for (var key in myObject) &#123; console.log(key);&#125; for in 可以遍历到myObject的原型方法method,如果不想遍历原型方法和属性的话，可以在循环内部判断一下,hasOwnPropery方法可以判断某属性是否是该对象的实例属性 12345for (var key in myObject) &#123; if（myObject.hasOwnProperty(key))&#123; console.log(key); &#125;&#125; 同样可以通过ES5的Object.keys(myObject)获取对象的实例属性组成的数组，不包括原型方法和属性。 123456789Object.prototype.method=function()&#123; console.log(this);&#125;var myObject=&#123; a:1, b:2, c:3&#125;Object.keys(myObject).forEach(function(key,index)&#123;&lt;br&gt; console.log(key,myObject[key])&lt;br&gt;&#125;) 参考资料https://www.cnblogs.com/dupd/archive/2016/09/22/5895474.html","content":"<p>遍历数组通常使用for循环，ES5的话也可以使用forEach，ES5具有遍历数组功能的还有map、filter、some、every、reduce、reduceRight等，只不过他们的返回结果不一样。但是使用foreach遍历数组的话，使用break不能中断循环，使用return也不能返回到外层函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.method=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myArray=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">myArray.name=<span class=\"string\">\"数组\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index <span class=\"keyword\">in</span> myArray) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(myArray[index]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>使用for in 也可以遍历数组，但是会存在以下问题：</p>\n<p>1.index索引为字符串型数字，不能直接进行几何运算</p>\n<p>2.遍历顺序有可能不是按照实际数组的内部顺序</p>\n<p>3.使用for in会遍历数组所有的可枚举属性，包括原型。例如上栗的原型方法method和name属性</p>\n<p>所以for in更适合遍历对象，不要使用for in遍历数组。</p>\n<p>那么除了使用for循环，如何更简单的正确的遍历数组达到我们的期望呢（即不遍历method和name），ES6中的for of更胜一筹.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.method=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myArray=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">myArray.name=<span class=\"string\">\"数组\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> value <span class=\"keyword\">of</span> myArray) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>记住，for in遍历的是数组的索引（即键名），而for of遍历的是数组元素值。</p>\n<p>for of遍历的只是数组内的元素，而不包括数组的原型属性method和索引name</p>\n<p>遍历对象 通常用for in来遍历对象的键名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.method=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myObject=&#123;</span><br><span class=\"line\">　　a:<span class=\"number\">1</span>,</span><br><span class=\"line\">　　b:<span class=\"number\">2</span>,</span><br><span class=\"line\">　　c:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> myObject) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>for in 可以遍历到myObject的原型方法method,如果不想遍历原型方法和属性的话，可以在循环内部判断一下,hasOwnPropery方法可以判断某属性是否是该对象的实例属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> myObject) &#123;</span><br><span class=\"line\">　　<span class=\"keyword\">if</span>（myObject.hasOwnProperty(key))&#123;</span><br><span class=\"line\">　　　　<span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样可以通过ES5的Object.keys(myObject)获取对象的实例属性组成的数组，不包括原型方法和属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.method=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myObject=&#123;</span><br><span class=\"line\">　　a:<span class=\"number\">1</span>,</span><br><span class=\"line\">　　b:<span class=\"number\">2</span>,</span><br><span class=\"line\">　　c:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(myObject).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,index</span>)</span>&#123;&lt;br&gt;　　<span class=\"built_in\">console</span>.log(key,myObject[key])&lt;br&gt;&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://www.cnblogs.com/dupd/archive/2016/09/22/5895474.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/dupd/archive/2016/09/22/5895474.html</a></p>\n","excerpt":"遍历数组通常使用for循环，ES5的话也可以使用forEach，ES5具有遍历数组功能的还有map、filter、some、every、reduce、reduceRight等，只不过他们的返回结果不一样。但是使用foreach遍历数组的话，使用break不能中断循环，使用return也不能返回到外层函数。 12345678Array.prototype.method=function()&#123; console.log(this.length);&#125;var myArray=[1,2,4,5,6,7]myArray.name=\"数组\"for (var index in myArray) &#123; console.log(myArray[index]);&#125;","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"webpack4安装react环境","date":"2018-05-11T03:08:01.000Z","path":"2018/05/11/webpack4-react/","text":"参考资料 https://blog.csdn.net/jason0094/article/details/79974855 https://blog.csdn.net/weixin_39168678/article/details/79695371","content":"<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://blog.csdn.net/jason0094/article/details/79974855\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jason0094/article/details/79974855</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_39168678/article/details/79695371\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_39168678/article/details/79695371</a></li>\n</ul>\n","excerpt":"","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://www.ding1996.cn/tags/react/"}]},{"title":"npx学习笔记","date":"2018-05-11T03:05:09.000Z","path":"2018/05/11/npx-usage/","text":"今天无意间看到了npx不知道是什么，于是就百度了下 发现是npm最新的自带的一个执行文件 参考资料 https://www.zcfy.cc/article/introducing-npx-an-npm-package-runner-kat-march-n-medium-3670.html https://juejin.im/entry/59658035f265da6c360a19dd https://zhuanlan.zhihu.com/p/27840803","content":"<blockquote>\n<p>今天无意间看到了npx不知道是什么，于是就百度了下 发现是npm最新的自带的一个执行文件</p>\n</blockquote>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://www.zcfy.cc/article/introducing-npx-an-npm-package-runner-kat-march-n-medium-3670.html\" target=\"_blank\" rel=\"noopener\">https://www.zcfy.cc/article/introducing-npx-an-npm-package-runner-kat-march-n-medium-3670.html</a></li>\n<li><a href=\"https://juejin.im/entry/59658035f265da6c360a19dd\" target=\"_blank\" rel=\"noopener\">https://juejin.im/entry/59658035f265da6c360a19dd</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/27840803\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/27840803</a></li>\n</ul>\n","excerpt":"","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"}]},{"title":"css-modules css模块化","date":"2018-05-10T06:24:14.000Z","path":"2018/05/10/css-modules/","text":"","content":"","excerpt":"","categories":[],"tags":[]},{"title":"css预处理器常用特性","date":"2018-05-10T06:22:49.000Z","path":"2018/05/10/preprocessor-learn/","text":"","content":"","excerpt":"","categories":[],"tags":[]},{"title":"postcss学习笔记","date":"2018-05-07T01:57:34.000Z","path":"2018/05/07/postcss-learn/","text":"http://postcss.org/ https://github.com/postcss/postcss 参考资料https://www.jianshu.com/p/ea993fa70098 https://blog.csdn.net/beverley__/article/details/72963369 http://www.zhaiqianfeng.com/2017/07/postcss-autoprefixer-cssnext.html","content":"<p><a href=\"http://postcss.org/\" target=\"_blank\" rel=\"noopener\">http://postcss.org/</a></p>\n<p><a href=\"https://github.com/postcss/postcss\" target=\"_blank\" rel=\"noopener\">https://github.com/postcss/postcss</a></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://www.jianshu.com/p/ea993fa70098\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ea993fa70098</a></p>\n<p><a href=\"https://blog.csdn.net/beverley__/article/details/72963369\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/beverley__/article/details/72963369</a></p>\n<p><a href=\"http://www.zhaiqianfeng.com/2017/07/postcss-autoprefixer-cssnext.html\" target=\"_blank\" rel=\"noopener\">http://www.zhaiqianfeng.com/2017/07/postcss-autoprefixer-cssnext.html</a></p>\n","excerpt":"","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://www.ding1996.cn/tags/css/"}]},{"title":"工作笔记","date":"2018-04-27T15:22:37.000Z","path":"2018/04/27/it-work-note/","text":"这两天写项目的时候发现 react 父组件 传个对象属性过去子组件修改会直接改变父组件的值","content":"<blockquote>\n<p>这两天写项目的时候发现 react 父组件 传个对象属性过去<br>子组件修改会直接改变父组件的值</p>\n</blockquote>\n","excerpt":"","categories":[],"tags":[]},{"title":"formdata和blob 新api学习","date":"2018-04-26T02:54:56.000Z","path":"2018/04/26/it-html5-learn-newapi/","text":"formdata 可以使用ajax提交表单异步请求使用直接百度参考 最近还接触了一个新的api 把二进制文件转换成 对应的文件类型 1234// data 二进制流文件var file = new Blob([data],&#123;type:application/pdf&#125;);var fileUrl = URL.createOjectURL(file);window.open(fileUrl)","content":"<p>formdata  可以使用ajax提交表单异步请求<br>使用直接百度参考</p>\n<p>最近还接触了一个新的api 把二进制文件转换成 对应的文件类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// data 二进制流文件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> file = <span class=\"keyword\">new</span> Blob([data],&#123;<span class=\"attr\">type</span>:application/pdf&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fileUrl = URL.createOjectURL(file);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.open(fileUrl)</span><br></pre></td></tr></table></figure>","excerpt":"","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"html写邮件模板","date":"2018-04-25T07:18:39.000Z","path":"2018/04/25/it-emd-template/","text":"最近工作接触了一个 用html 制作邮件模板的需求 之前没接触过一脸懵逼 ，后面网上查找了资料才发现这种需求 edm 其实很简单就是用html写个模板然后就后台套数据 可以百度 edm","content":"<blockquote>\n<p>最近工作接触了一个 用html 制作邮件模板的需求 之前没接触过一脸懵逼 ，后面网上查找了资料才发现这种需求 edm</p>\n</blockquote>\n<p> 其实很简单就是用html写个模板然后就后台套数据 </p>\n<p>可以百度 edm</p>\n","excerpt":"","categories":[],"tags":[]},{"title":"antd-table 使用笔记","date":"2018-04-18T12:59:53.000Z","path":"2018/04/18/antd-table/","text":"最近项目在使用antd碰到了些坑这里记录下来 方便以后翻阅 目前使用了table组件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;Table rowSelection=&#123;&#123; selectedRowKeys, onChange: (selectedRowKeys, selectedRows) =&gt; &#123; console.log(selectedRowKeys); this.setState(&#123; selectedRowKeys, selectedRows &#125;); &#125;, selections: &#123; onSelection: this.onSelection &#125;, onSelectInvert: selectedRows =&gt; &#123; console.log(selectedRows); &#125;, getCheckboxProps: record =&gt; (&#123; defaultChecked: record.id &#125;) &#125;&#125; columns=&#123;[ &#123; title: '报案号', dataIndex: 'reportNo', width: 80 &#125;, &#123; title: '立案号', dataIndex: 'registerNo', width: 80 &#125;, &#123; title: '结案时间', dataIndex: 'closeTime', width: 80 &#125;, &#123; title: '结案提交人', dataIndex: 'closeOperator', width: 80 &#125;, &#123; title: '下载状态', dataIndex: 'stateDesc', width: 80 &#125; ]&#125; dataSource=&#123;dataList&#125; pagination=&#123;false&#125; rowKey=&#123;record =&gt; record.id&#125; /&gt; 默认全选 defaultChecked: record.id table 属性需要加 rowKey={record =&gt; record.id} 这样禁用的时候不糊","content":"<blockquote>\n<p>最近项目在使用antd碰到了些坑这里记录下来 方便以后翻阅</p>\n</blockquote>\n<p>目前使用了table组件 </p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Table</span><br><span class=\"line\">              rowSelection=&#123;&#123;</span><br><span class=\"line\">                selectedRowKeys,</span><br><span class=\"line\">                onChange: (selectedRowKeys, selectedRows) =&gt; &#123;</span><br><span class=\"line\">                  console.log(selectedRowKeys);</span><br><span class=\"line\">                  this.setState(&#123;</span><br><span class=\"line\">                    selectedRowKeys,</span><br><span class=\"line\">                    selectedRows</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                selections: &#123;</span><br><span class=\"line\">                  onSelection: this.onSelection</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                onSelectInvert: selectedRows =&gt; &#123;</span><br><span class=\"line\">                  console.log(selectedRows);</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                getCheckboxProps: record =&gt; (&#123;</span><br><span class=\"line\">                  defaultChecked: record.id</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">              &#125;&#125;</span><br><span class=\"line\">              columns=&#123;[</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  title: <span class=\"string\">'报案号'</span>,</span><br><span class=\"line\">                  dataIndex: <span class=\"string\">'reportNo'</span>,</span><br><span class=\"line\">                  width: <span class=\"number\">80</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  title: <span class=\"string\">'立案号'</span>,</span><br><span class=\"line\">                  dataIndex: <span class=\"string\">'registerNo'</span>,</span><br><span class=\"line\">                  width: <span class=\"number\">80</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  title: <span class=\"string\">'结案时间'</span>,</span><br><span class=\"line\">                  dataIndex: <span class=\"string\">'closeTime'</span>,</span><br><span class=\"line\">                  width: <span class=\"number\">80</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  title: <span class=\"string\">'结案提交人'</span>,</span><br><span class=\"line\">                  dataIndex: <span class=\"string\">'closeOperator'</span>,</span><br><span class=\"line\">                  width: <span class=\"number\">80</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  title: <span class=\"string\">'下载状态'</span>,</span><br><span class=\"line\">                  dataIndex: <span class=\"string\">'stateDesc'</span>,</span><br><span class=\"line\">                  width: <span class=\"number\">80</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              ]&#125;</span><br><span class=\"line\">              dataSource=&#123;dataList&#125;</span><br><span class=\"line\">              pagination=&#123;false&#125;</span><br><span class=\"line\">              rowKey=&#123;record =&gt; record.id&#125;</span><br><span class=\"line\">            /&gt;</span><br></pre></td></tr></table></figure>\n<p>默认全选  defaultChecked: record.id</p>\n<p>table 属性需要加  rowKey={record =&gt; record.id}  这样禁用的时候不糊</p>\n","excerpt":"","categories":[],"tags":[]},{"title":"ngrok使用笔记","date":"2018-04-16T08:50:12.000Z","path":"2018/04/16/it-ngrok-usage/","text":"有时候我们需要把我们本地的服务让外面访问,那么这个时候我们就可以使用 ngrok 使用简单 暴力 还能生成https 服务 ”I want to expose a local server behind a NAT or firewall to the internet.” 什么是ngrokngrok是一个反向代理，用于创建从公共端点到本地运行的Web服务的安全隧道。ngrok捕获并分析隧道上的所有流量，以供日后检查和重播。 githubhttps://github.com/inconshreveable/ngrok star 1.3k 使用官网下载 把下载的ngrok放在项目目录 ./ngrok http 8080 就能代理本地8080端口 运行成功后会显示下面的界面 123456789101112ngrok by @inconshreveable (Ctrl+C to quit)Session Status onlineSession Expires 7 hours, 59 minutesVersion 2.2.8Region United States (us)Web Interface http://127.0.0.1:4040Forwarding http://ab6f37b7.ngrok.io -&gt; localhost:8080Forwarding https://ab6f37b7.ngrok.io -&gt; localhost:8080Connections ttl opn rt1 rt5 p50 p90 0 0 0.00 0.00 0.00 0.00","content":"<blockquote>\n<p>有时候我们需要把我们本地的服务让外面访问,那么这个时候我们就可以使用 ngrok 使用简单 暴力 还能生成https 服务</p>\n</blockquote>\n<p>”I want to expose a local server behind a NAT or firewall to the internet.”</p>\n<p><img src=\"https://camo.githubusercontent.com/f2d698991e6a0411680413ebcc15a6460b8beda3/68747470733a2f2f6e67726f6b2e636f6d2f7374617469632f696d672f6f766572766965772e706e67\" alt=\"\"></p>\n<h3 id=\"什么是ngrok\"><a href=\"#什么是ngrok\" class=\"headerlink\" title=\"什么是ngrok\"></a>什么是ngrok</h3><p>ngrok是一个反向代理，用于创建从公共端点到本地运行的Web服务的安全隧道。<br>ngrok捕获并分析隧道上的所有流量，以供日后检查和重播。</p>\n<h3 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h3><p><a href=\"https://github.com/inconshreveable/ngrok\" target=\"_blank\" rel=\"noopener\">https://github.com/inconshreveable/ngrok</a></p>\n<p>star 1.3k </p>\n<a id=\"more\"></a>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>官网下载  把下载的ngrok放在项目目录</p>\n<p>./ngrok http 8080 就能代理本地8080端口</p>\n<p>运行成功后会显示下面的界面</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngrok by <span class=\"meta\">@inconshreveable</span>                                       (Ctrl+C to quit)</span><br><span class=\"line\"></span><br><span class=\"line\">Session Status                online</span><br><span class=\"line\">Session Expires               <span class=\"number\">7</span> hours, <span class=\"number\">59</span> minutes</span><br><span class=\"line\">Version                       <span class=\"number\">2.2</span><span class=\"number\">.8</span></span><br><span class=\"line\">Region                        United States (us)</span><br><span class=\"line\">Web Interface                 <span class=\"string\">http:</span><span class=\"comment\">//127.0.0.1:4040</span></span><br><span class=\"line\">Forwarding                    <span class=\"string\">http:</span><span class=\"comment\">//ab6f37b7.ngrok.io -&gt; localhost:8080</span></span><br><span class=\"line\">Forwarding                    <span class=\"string\">https:</span><span class=\"comment\">//ab6f37b7.ngrok.io -&gt; localhost:8080</span></span><br><span class=\"line\"></span><br><span class=\"line\">Connections                   ttl     opn     rt1     rt5     p50     p90</span><br><span class=\"line\">                              <span class=\"number\">0</span>       <span class=\"number\">0</span>       <span class=\"number\">0.00</span>    <span class=\"number\">0.00</span>    <span class=\"number\">0.00</span>    <span class=\"number\">0.00</span></span><br></pre></td></tr></table></figure>\n","excerpt":"有时候我们需要把我们本地的服务让外面访问,那么这个时候我们就可以使用 ngrok 使用简单 暴力 还能生成https 服务 ”I want to expose a local server behind a NAT or firewall to the internet.” 什么是ngrokngrok是一个反向代理，用于创建从公共端点到本地运行的Web服务的安全隧道。ngrok捕获并分析隧道上的所有流量，以供日后检查和重播。 githubhttps://github.com/inconshreveable/ngrok star 1.3k","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"}]},{"title":"nodeppt使用笔记","date":"2018-04-16T08:09:15.000Z","path":"2018/04/16/it-nodeppt-usage/","text":"在github上面看到一个nodejs开发的幻灯片制作的js库，简单的使用了下,发现还是挺强大的； 官网https://github.com/ksky521/nodeppt github star目前4.8k 文档写的还算详细 如何使用安装 1npm install -g nodeppt 安装成功后就可以在命令行中使用 nodeppt命令 ，让我们查看nodeppt 有哪些功能 123456789101112131415➜ myBlog git:(master) ✗ nodeppt --help Usage: nodeppt [options] [command] Options: -V, --version output the version number -h, --help output usage information Commands: create|new [options] create a slide generate|release [options] export html file start [options] start local sever show slide pdf export pdf file. Deprecated create | new 创建一个幻灯片 generate | release 把幻灯片生成为html文件 start 本地启动一个服务 最后一个命令已经被废弃 主要就是使用上面这个三个命令 是不是很简单呢 更详细的api可以看官网readme","content":"<blockquote>\n<p>在github上面看到一个nodejs开发的幻灯片制作的js库，简单的使用了下,发现还是挺强大的；</p>\n</blockquote>\n<h3 id=\"官网\"><a href=\"#官网\" class=\"headerlink\" title=\"官网\"></a>官网</h3><p><a href=\"https://github.com/ksky521/nodeppt\" target=\"_blank\" rel=\"noopener\">https://github.com/ksky521/nodeppt</a>  github star目前4.8k</p>\n<p>文档写的还算详细 </p>\n<a id=\"more\"></a>\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><p>安装</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> -g nodeppt</span><br></pre></td></tr></table></figure>\n<p>安装成功后就可以在命令行中使用 nodeppt命令 ，让我们查看nodeppt 有哪些功能</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  myBlog gi<span class=\"variable\">t:</span>(master) ✗ nodeppt --<span class=\"keyword\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Usage: nodeppt [<span class=\"keyword\">options</span>] [<span class=\"keyword\">command</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  Option<span class=\"variable\">s:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    -V, --<span class=\"keyword\">version</span>               output the <span class=\"keyword\">version</span> <span class=\"keyword\">number</span></span><br><span class=\"line\">    -h, --<span class=\"keyword\">help</span>                  output usage information</span><br><span class=\"line\"></span><br><span class=\"line\">  Command<span class=\"variable\">s:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    create|<span class=\"keyword\">new</span> [<span class=\"keyword\">options</span>]        create <span class=\"keyword\">a</span> slide</span><br><span class=\"line\">    generate|release [<span class=\"keyword\">options</span>]  export html <span class=\"keyword\">file</span></span><br><span class=\"line\">    start [<span class=\"keyword\">options</span>]             start local sever show slide</span><br><span class=\"line\">    pdf                         export pdf <span class=\"keyword\">file</span>. Deprecated</span><br></pre></td></tr></table></figure>\n<ul>\n<li>create | new 创建一个幻灯片</li>\n<li>generate | release 把幻灯片生成为html文件</li>\n<li>start 本地启动一个服务</li>\n</ul>\n<p>最后一个命令已经被废弃 主要就是使用上面这个三个命令 是不是很简单呢</p>\n<hr>\n<p>更详细的api可以看官网readme</p>\n","excerpt":"在github上面看到一个nodejs开发的幻灯片制作的js库，简单的使用了下,发现还是挺强大的； 官网https://github.com/ksky521/nodeppt github star目前4.8k 文档写的还算详细","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"}]},{"title":"四月任务清单","date":"2018-04-16T02:05:49.000Z","path":"2018/04/16/April-task/","text":"人生不能没有方向,有了目标 哪怕在遥远，只要坚持下去总有一天能到达终点！ 学习技术 hapi egg webpack4 数据结构预算法 vuessr 搭建一个前后端的项目脚手架 熟悉使用正则表达式 pwa 学习ppt制作","content":"<blockquote>\n<p>人生不能没有方向,有了目标 哪怕在遥远，只要坚持下去总有一天能到达终点！</p>\n</blockquote>\n<h3 id=\"学习技术\"><a href=\"#学习技术\" class=\"headerlink\" title=\"学习技术\"></a>学习技术</h3><ul>\n<li>hapi</li>\n<li>egg</li>\n<li>webpack4</li>\n<li>数据结构预算法</li>\n<li>vuessr</li>\n<li>搭建一个前后端的项目脚手架</li>\n<li>熟悉使用正则表达式</li>\n<li>pwa</li>\n<li>学习ppt制作</li>\n</ul>\n","excerpt":"","categories":[],"tags":[]},{"title":"centos7安装epel源","date":"2018-04-15T09:33:40.000Z","path":"2018/04/15/it-centos-epel/","text":"EPEL 是yum的一个软件源,里面包含了许多基本源里没有的软件了，但在我们在使用epel时是需要安装它才可以了，EPEL，即Extra Packages for Enterprise Linux的简称，是为企业级Linux提供的一组高质量的额外软件包，包括但不限于Red Hat Enterprise Linux (RHEL), CentOS and Scientific Linux (SL), Oracle Enterprise Linux (OEL)，使用docker之前安装EPEL源。 安装1yum install epel-release 查看并更新源查看1ll /etc/yum.repos.d/ 两个epel的repo文件: 12epel.repoepel-testing.repo 接下来就更新源： 1yum clean all &amp;&amp; yum makecache 更新成功之后就可以使用EPEL安装应用了。 参考资料https://blog.csdn.net/w670328683/article/details/51673757","content":"<blockquote>\n<p>EPEL 是yum的一个软件源,里面包含了许多基本源里没有的软件了，但在我们在使用epel时是需要安装它才可以了，EPEL，即Extra Packages for Enterprise Linux的简称，是为企业级Linux提供的一组高质量的额外软件包，包括但不限于Red Hat Enterprise Linux (RHEL), CentOS and Scientific Linux (SL), Oracle Enterprise Linux (OEL)，使用docker之前安装EPEL源。</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum <span class=\"keyword\">install</span> epel-<span class=\"keyword\">release</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查看并更新源\"><a href=\"#查看并更新源\" class=\"headerlink\" title=\"查看并更新源\"></a>查看并更新源</h3><p><strong>查看</strong><br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll /etc/yum<span class=\"selector-class\">.repos</span><span class=\"selector-class\">.d</span>/</span><br></pre></td></tr></table></figure></p>\n<p>两个epel的repo文件:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">epel</span><span class=\"selector-class\">.repo</span></span><br><span class=\"line\"><span class=\"selector-tag\">epel-testing</span><span class=\"selector-class\">.repo</span></span><br></pre></td></tr></table></figure>\n<p>接下来就更新源：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum clean all <span class=\"meta\">&amp;&amp; yum makecache</span></span><br></pre></td></tr></table></figure>\n<p>更新成功之后就可以使用EPEL安装应用了。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://blog.csdn.net/w670328683/article/details/51673757\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/w670328683/article/details/51673757</a></p>\n","excerpt":"","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"}]},{"title":"使用http-server零配置在本地开启http服务器","date":"2018-04-15T09:21:52.000Z","path":"2018/04/15/it-http-server/","text":"在很多情况下，需要在本地开启http服务器来测试。所以就需要一个简单的省事好用的http服务器。以前的时候，都是使用php的本地环境，但是，自从学了nodejs，发现了http-server好东西。不用配置直接在当前文件夹内打开cmd，就能够使用，简单易用，轻松方便。 简介： http-server是一个简单的零配置命令行http服务器。它对于生产使用来说是足够强大的，但它的测试，本地开发和学习足够简单易用。 安装1npm install http-server -g 这将http-server全局安装，以便它可以从命令行运行。 使用：打开cmd，移动进入当前文件夹，在当前文件夹内输入命令即可 1http-server [path] [options] [path]默认为./public文件夹存在，./否则。现在，您可以访问http：// localhost：8080来查看您的服务器 可选配置：-p 要使用的端口（默认为8080） -a 要使用的地址（默认为0.0.0.0） -d 显示目录列表（默认为“True”） -i 显示autoIndex（默认为“True”） -g或–gzip启用时（默认为“False”），它将用于./public/some-file.js.gz代替./public/some-file.jsgzip压缩版本的文件，并且该请求接受gzip编码。 -e或–ext默认文件扩展名（如果没有提供）（默认为’html’） -s或–silent从输出中抑制日志消息 –cors通过Access-Control-Allow-Origin标题启用CORS -o 启动服务器后打开浏览器窗口 -c设置缓存控制max-age头的缓存时间（以秒为单位），例如-c10 10秒（默认为’3600’）。要禁用缓存，请使用-c-1。 -U或–utc在日志消息中使用UTC时间格式。 -P或–proxy代理无法在本地解决给定网址的所有请求。例如：-P http://someurl.com -S或–ssl启用https。 -C或–certssl证书文件的路径（默认值：cert.pem）。 -K或–keyssl密钥文件的路径（默认值：key.pem）。 -r或者–robots提供一个/robots.txt（其内容默认为’User-agent：* \\ nDisallow：/‘） -h或–help打印此列表并退出。 参考资料https://github.com/indexzero/http-server https://blog.csdn.net/qq_30100043/article/details/73105362?locationNum=14&amp;fps=1","content":"<blockquote>\n<p>在很多情况下，需要在本地开启http服务器来测试。所以就需要一个简单的省事好用的http服务器。以前的时候，都是使用php的本地环境，但是，自从学了nodejs，发现了http-server好东西。不用配置直接在当前文件夹内打开cmd，就能够使用，简单易用，轻松方便。</p>\n</blockquote>\n<p><img src=\"https://img-blog.csdn.net/20170612141600583?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzAxMDAwNDM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p><strong>简介：</strong></p>\n<p>http-server是一个简单的零配置命令行http服务器。它对于生产使用来说是足够强大的，但它的测试，本地开发和学习足够简单易用。</p>\n<a id=\"more\"></a>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"keyword\">http</span>-<span class=\"keyword\">server</span> -g</span><br></pre></td></tr></table></figure>\n<p>这将http-server全局安装，以便它可以从命令行运行。</p>\n<h3 id=\"使用：\"><a href=\"#使用：\" class=\"headerlink\" title=\"使用：\"></a>使用：</h3><p>打开cmd，移动进入当前文件夹，在当前文件夹内输入命令即可</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-server <span class=\"string\">[path]</span> <span class=\"string\">[options]</span></span><br></pre></td></tr></table></figure>\n<p>[path]默认为./public文件夹存在，./否则。<br>现在，您可以访问http：// localhost：8080来查看您的服务器</p>\n<h3 id=\"可选配置：\"><a href=\"#可选配置：\" class=\"headerlink\" title=\"可选配置：\"></a>可选配置：</h3><p>-p 要使用的端口（默认为8080）</p>\n<p>-a 要使用的地址（默认为0.0.0.0）</p>\n<p>-d 显示目录列表（默认为“True”）</p>\n<p>-i 显示autoIndex（默认为“True”）</p>\n<p>-g或–gzip启用时（默认为“False”），它将用于./public/some-file.js.gz代替./public/some-file.jsgzip压缩版本的文件，并且该请求接受gzip编码。</p>\n<p>-e或–ext默认文件扩展名（如果没有提供）（默认为’html’）</p>\n<p>-s或–silent从输出中抑制日志消息</p>\n<p>–cors通过Access-Control-Allow-Origin标题启用CORS</p>\n<p>-o 启动服务器后打开浏览器窗口</p>\n<p>-c设置缓存控制max-age头的缓存时间（以秒为单位），例如-c10 10秒（默认为’3600’）。要禁用缓存，请使用-c-1。</p>\n<p>-U或–utc在日志消息中使用UTC时间格式。</p>\n<p>-P或–proxy代理无法在本地解决给定网址的所有请求。例如：-P <a href=\"http://someurl.com\" target=\"_blank\" rel=\"noopener\">http://someurl.com</a></p>\n<p>-S或–ssl启用https。</p>\n<p>-C或–certssl证书文件的路径（默认值：cert.pem）。</p>\n<p>-K或–keyssl密钥文件的路径（默认值：key.pem）。</p>\n<p>-r或者–robots提供一个/robots.txt（其内容默认为’User-agent：* \\ nDisallow：/‘）</p>\n<p>-h或–help打印此列表并退出。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://github.com/indexzero/http-server\" target=\"_blank\" rel=\"noopener\">https://github.com/indexzero/http-server</a></p>\n<p><a href=\"https://blog.csdn.net/qq_30100043/article/details/73105362?locationNum=14&amp;fps=1\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_30100043/article/details/73105362?locationNum=14&amp;fps=1</a></p>\n","excerpt":"在很多情况下，需要在本地开启http服务器来测试。所以就需要一个简单的省事好用的http服务器。以前的时候，都是使用php的本地环境，但是，自从学了nodejs，发现了http-server好东西。不用配置直接在当前文件夹内打开cmd，就能够使用，简单易用，轻松方便。 简介： http-server是一个简单的零配置命令行http服务器。它对于生产使用来说是足够强大的，但它的测试，本地开发和学习足够简单易用。","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"}]},{"title":"vscode插件开发笔记","date":"2018-04-12T04:56:22.000Z","path":"2018/04/12/it-2018-04-12-notes/","text":"无意间听到小伙伴说自己开发了个vscode的插件，于是就去了解了下vscode插件如何开发； vscode官网 中文文档 参考资料 https://www.cnblogs.com/lianmin/p/5499266.html https://segmentfault.com/a/1190000008968904","content":"<blockquote>\n<p>无意间听到小伙伴说自己开发了个vscode的插件，于是就去了解了下vscode插件如何开发；</p>\n</blockquote>\n<ul>\n<li><a href=\"https://code.visualstudio.com/docs/extensions/example-hello-world\" target=\"_blank\" rel=\"noopener\">vscode官网</a></li>\n<li><a href=\"https://legacy.gitbook.com/book/jeasonstudio/vscode-cn-doc/details\" target=\"_blank\" rel=\"noopener\">中文文档</a></li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://www.cnblogs.com/lianmin/p/5499266.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lianmin/p/5499266.html</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008968904\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000008968904</a></li>\n</ul>\n","excerpt":"","categories":[],"tags":[{"name":"vscode","slug":"vscode","permalink":"http://www.ding1996.cn/tags/vscode/"}]},{"title":"vscode react Emmet 补全","date":"2018-04-04T02:13:30.000Z","path":"2018/04/04/vscode-emmet-jsx/","text":"在开发react项目中，我们使用的都是js’x的语法 vscode默认emmet不支持jsx补全 在设置中添加一下代码片段就行了 1234\"emmet.includeLanguages\": &#123; \"javascript\": \"javascriptreact\"&#125;,\"emmet.triggerExpansionOnTab\": true 参考资料https://segmentfault.com/q/1010000005780723","content":"<blockquote>\n<p> 在开发react项目中，我们使用的都是js’x的语法 vscode默认emmet不支持jsx补全 </p>\n</blockquote>\n<p>在设置中添加一下代码片段就行了 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"emmet.includeLanguages\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"javascript\"</span>: <span class=\"string\">\"javascriptreact\"</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">\"emmet.triggerExpansionOnTab\"</span>: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://segmentfault.com/q/1010000005780723\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000005780723</a></p>\n","excerpt":"","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://www.ding1996.cn/tags/react/"}]},{"title":"eslint中常见的错误","date":"2018-03-29T02:49:49.000Z","path":"2018/03/29/eslint-common-wenti/","text":"总结eslint常见的错误 message: ‘Missing semicolon. (semi)’ 缺少分号 queryUserTasks” is defined but never used (no-unused-vars) 这个变量从来没使用过 Unexpected use of comma operator. (no-sequences) 不必要的分号 Strings must use single quote. (quotes) 字符串必须使用单引号 Unexpected var, use let or const instead. (no-var) var 换成 let [eslint] Newline required at end of file but not found. (eol-last) 文件最后有个空行 参考资料https://github.com/standard/standard/blob/master/docs/RULES-zhcn.md","content":"<h3 id=\"总结eslint常见的错误\"><a href=\"#总结eslint常见的错误\" class=\"headerlink\" title=\"总结eslint常见的错误\"></a>总结eslint常见的错误</h3><ul>\n<li>message: ‘Missing semicolon. (semi)’  缺少分号</li>\n<li>queryUserTasks” is defined but never used (no-unused-vars)  这个变量从来没使用过</li>\n<li>Unexpected use of comma operator. (no-sequences) 不必要的分号</li>\n<li>Strings must use single quote. (quotes)  字符串必须使用单引号</li>\n<li>Unexpected var, use let or const instead. (no-var) var 换成 let</li>\n<li>[eslint] Newline required at end of file but not found. (eol-last) 文件最后有个空行</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://github.com/standard/standard/blob/master/docs/RULES-zhcn.md\" target=\"_blank\" rel=\"noopener\">https://github.com/standard/standard/blob/master/docs/RULES-zhcn.md</a></p>\n","excerpt":"","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"trello项目管理软件","date":"2018-03-26T10:47:50.000Z","path":"2018/03/26/trello-use/","text":"trello团队项目管理软件 https://trello.com/","content":"<p>trello团队项目管理软件</p>\n<p><a href=\"https://trello.com/\" target=\"_blank\" rel=\"noopener\">https://trello.com/</a></p>\n","excerpt":"","categories":[],"tags":[]},{"title":"windows下安装nvm","date":"2018-03-26T10:43:34.000Z","path":"2018/03/26/windows-creat-nvm/","text":"nvm github地址 https://github.com/coreybutler/nvm-windows/releases 下载第二个(nvm-setup.zip)直接傻瓜式安装","content":"<p>nvm github地址 <a href=\"https://github.com/coreybutler/nvm-windows/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/coreybutler/nvm-windows/releases</a> </p>\n<p>下载第二个(nvm-setup.zip)直接傻瓜式安装</p>\n","excerpt":"","categories":[],"tags":[]},{"title":"问题收藏","date":"2018-03-16T02:59:20.000Z","path":"2018/03/16/it-shoucang-wenti/","text":"收藏一些冷门知识 1 性能优化https://github.com/wy-ei/notebook/issues/34 2 输入url到展示 https://mp.weixin.qq.com/s/qMsf4DcMhn2cf0fXC-PLVA http://fex.baidu.com/blog/2014/05/what-happen/ 3 为什么 静态资源cdn 域名和 服务器的域名 不一致http://blog.csdn.net/u010552788/article/details/51056554https://www.zhihu.com/question/20627139","content":"<blockquote>\n<p>收藏一些冷门知识</p>\n</blockquote>\n<p> 1 性能优化<br><a href=\"https://github.com/wy-ei/notebook/issues/34\" target=\"_blank\" rel=\"noopener\">https://github.com/wy-ei/notebook/issues/34</a></p>\n<p> 2 输入url到展示</p>\n<p>  <a href=\"https://mp.weixin.qq.com/s/qMsf4DcMhn2cf0fXC-PLVA\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/qMsf4DcMhn2cf0fXC-PLVA</a><br> <a href=\"http://fex.baidu.com/blog/2014/05/what-happen/\" target=\"_blank\" rel=\"noopener\">http://fex.baidu.com/blog/2014/05/what-happen/</a><br> 3 为什么 静态资源cdn 域名和 服务器的域名 不一致<br><a href=\"http://blog.csdn.net/u010552788/article/details/51056554\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/u010552788/article/details/51056554</a><br><a href=\"https://www.zhihu.com/question/20627139\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20627139</a></p>\n","excerpt":"","categories":[],"tags":[]},{"title":"postcss && cssnext","date":"2018-03-14T01:02:55.000Z","path":"2018/03/14/it-cssnext/","text":"postcss和cssnext是什么关系呢 就相当是babel和es6的关系 nextcss是下一代的css语法很增了很多新的特性 但是大多浏览器目前还不支持，postcss能把cssnext编译成目前浏览器能兼容的css postcss官网 http://postcss.org/ cssnext官网 http://cssnext.io/playground/ postcss对现在主流的工程化工具都有对应的插件 webpack postcss 常用插件postcss.config.js 12345678910module.exports=&#123; plugins:[ require('postcss-custom-selectors'), // 解析自定义选择器 require('autoprefixer')(&#123;browsers: [\"ios &gt;= 7\", \"android &gt;= 4.0\"]&#125;), // \u0010添加浏览器内核 require('postcss-apply')(), // 解析apply require('postcss-custom-media'), // 解析media变量 require('postcss-image-set-polyfill'), // 转行分辨率适配方案 require('postcss-preset-env'), // next语法解析 ]&#125; webpack.config.js 1234567&#123; test: /\\.css$/, use: ExtractTextPlugin.extract(&#123; fallback: \"style-loader\", use: [\"css-loader\",\"postcss-loader\"] &#125;)&#125; 学习资料https://div.io/topic/1575","content":"<blockquote>\n<p>postcss和cssnext是什么关系呢 就相当是babel和es6的关系 nextcss是下一代的css语法很增了很多新的特性 但是大多浏览器目前还不支持，postcss能把cssnext编译成目前浏览器能兼容的css</p>\n</blockquote>\n<p>postcss官网 <a href=\"http://postcss.org/\" target=\"_blank\" rel=\"noopener\">http://postcss.org/</a></p>\n<p>cssnext官网 <a href=\"http://cssnext.io/playground/\" target=\"_blank\" rel=\"noopener\">http://cssnext.io/playground/</a></p>\n<p>postcss对现在主流的工程化工具都有对应的插件</p>\n<a id=\"more\"></a>\n<h3 id=\"webpack-postcss-常用插件\"><a href=\"#webpack-postcss-常用插件\" class=\"headerlink\" title=\"webpack postcss 常用插件\"></a>webpack postcss 常用插件</h3><p>postcss.config.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports=&#123;</span><br><span class=\"line\">\tplugins:[\t</span><br><span class=\"line\">\t<span class=\"built_in\">require</span>(<span class=\"string\">'postcss-custom-selectors'</span>),  <span class=\"comment\">// 解析自定义选择器</span></span><br><span class=\"line\">\t<span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)(&#123;<span class=\"attr\">browsers</span>: [<span class=\"string\">\"ios &gt;= 7\"</span>, <span class=\"string\">\"android &gt;= 4.0\"</span>]&#125;), <span class=\"comment\">// \u0010添加浏览器内核</span></span><br><span class=\"line\">\t<span class=\"built_in\">require</span>(<span class=\"string\">'postcss-apply'</span>)(), <span class=\"comment\">// 解析apply</span></span><br><span class=\"line\">\t<span class=\"built_in\">require</span>(<span class=\"string\">'postcss-custom-media'</span>), <span class=\"comment\">// 解析media变量</span></span><br><span class=\"line\">\t<span class=\"built_in\">require</span>(<span class=\"string\">'postcss-image-set-polyfill'</span>), <span class=\"comment\">// 转行分辨率适配方案</span></span><br><span class=\"line\">\t<span class=\"built_in\">require</span>(<span class=\"string\">'postcss-preset-env'</span>), <span class=\"comment\">// next语法解析</span></span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>webpack.config.js</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attribute\">test</span>: /\\.css$/,</span><br><span class=\"line\">    use: ExtractTextPlugin.<span class=\"built_in\">extract</span>(&#123;</span><br><span class=\"line\">        fallback: <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">\"css-loader\"</span>,<span class=\"string\">\"postcss-loader\"</span>]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h3><p><a href=\"https://div.io/topic/1575\" target=\"_blank\" rel=\"noopener\">https://div.io/topic/1575</a></p>\n","excerpt":"postcss和cssnext是什么关系呢 就相当是babel和es6的关系 nextcss是下一代的css语法很增了很多新的特性 但是大多浏览器目前还不支持，postcss能把cssnext编译成目前浏览器能兼容的css postcss官网 http://postcss.org/ cssnext官网 http://cssnext.io/playground/ postcss对现在主流的工程化工具都有对应的插件","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://www.ding1996.cn/tags/css/"}]},{"title":"github ssh配置","date":"2018-03-14T01:02:55.000Z","path":"2018/03/14/it-github-ssh/","text":"1 先看本地是否有ssh文件 123&gt; cd ~/.ssh&gt; lsid_rsa id_rsa.pub known_hosts 没有的话生成公钥和私钥 2 有则把公钥加到github 12&gt;cat id_rsa.pubssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVRgHi3gPdBcQ... xxxx@163.com 3 github 添加公钥示意图 4 如果以上操作问题还不能解决,并且执行 ssh -T git@github.com 出现如下提示，说明本地公钥没有问题，则看第5步 12&gt; ssh -T git@github.comHi youcanping! You've successfully authenticated, but GitHub does not provide shell access. 5 看本地的.git/config设置的仓库url地址和github使用的链接地址是否一致如下图,如use https,则url需要用https的仓库地址，我的就是这个问题。 1234567891011121314&gt; cat .git/config[core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true ignorecase = true precomposeunicode = true[remote \"origin\"] url = https://github.com/youcanping/MyBlog.git fetch = +refs/heads/*:refs/remotes/origin/*[branch \"master\"] remote = origin merge = refs/heads/master 6 把公钥放到系统里[最佳答案] 12&gt; ssh-add ~/.ssh/id_rsa&gt; Identity added: /Users/youcanping/.ssh/id_rsa (/Users/youcanping/.ssh/id_rsa)","content":"<p>1 先看本地是否有ssh文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/.ssh</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> ls</span></span><br><span class=\"line\">id_rsa          id_rsa.pub      known_hosts</span><br></pre></td></tr></table></figure>\n<p>没有的话生成公钥和私钥</p>\n<p>2 有则把公钥加到github</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"selector-tag\">cat</span> <span class=\"selector-tag\">id_rsa</span><span class=\"selector-class\">.pub</span></span><br><span class=\"line\"><span class=\"selector-tag\">ssh-rsa</span> <span class=\"selector-tag\">AAAAB3NzaC1yc2EAAAADAQABAAABAQDVRgHi3gPdBcQ</span>... <span class=\"selector-tag\">xxxx</span>@<span class=\"keyword\">163</span>.<span class=\"keyword\">com</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>3 github 添加公钥示意图</p>\n<p><img src=\"http://our9i4zgx.bkt.clouddn.com/Snip20171220_3.png\" alt=\"\"><br><img src=\"http://our9i4zgx.bkt.clouddn.com/Snip20171220_4.png\" alt=\"\"><br><img src=\"http://our9i4zgx.bkt.clouddn.com/Snip20171220_5.png\" alt=\"\"></p>\n<p>4 如果以上操作问题还不能解决,并且执行 ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a> 出现如下提示，说明本地公钥没有问题，则看第5步</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ssh -T git@github.com</span><br><span class=\"line\">Hi youcanping! You<span class=\"symbol\">'ve</span> successfully authenticated, but GitHub does <span class=\"keyword\">not</span> provide shell <span class=\"keyword\">access</span>.</span><br></pre></td></tr></table></figure>\n<p>5 看本地的.git/config设置的仓库url地址和github使用的链接地址是否一致如下图,如use https,则url需要用https的仓库地址，我的就是这个问题。</p>\n<p><img src=\"http://our9i4zgx.bkt.clouddn.com/blog/Snip20171226_12.png\" alt=\"\"></p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cat .git/config</span><br><span class=\"line\">[core]</span><br><span class=\"line\">        <span class=\"attr\">repositoryformatversion</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"attr\">filemode</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">bare</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"attr\">logallrefupdates</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">ignorecase</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">precomposeunicode</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">[remote <span class=\"string\">\"origin\"</span>]</span><br><span class=\"line\">        <span class=\"attr\">url</span> = https://github.com/youcanping/MyBlog.git</span><br><span class=\"line\">        <span class=\"attr\">fetch</span> = +refs/heads<span class=\"comment\">/*:refs/remotes/origin/*</span></span><br><span class=\"line\"><span class=\"comment\">[branch \"master\"]</span></span><br><span class=\"line\"><span class=\"comment\">        remote = origin</span></span><br><span class=\"line\"><span class=\"comment\">        merge = refs/heads/master</span></span><br></pre></td></tr></table></figure>\n<p>6 把公钥放到系统里[最佳答案]</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ssh-<span class=\"builtin-name\">add</span> ~/.ssh/id_rsa</span><br><span class=\"line\">&gt;<span class=\"built_in\"> Identity </span>added: /Users/youcanping/.ssh/id_rsa (/Users/youcanping/.ssh/id_rsa)</span><br></pre></td></tr></table></figure>\n","excerpt":"1 先看本地是否有ssh文件 123&gt; cd ~/.ssh&gt; lsid_rsa id_rsa.pub known_hosts 没有的话生成公钥和私钥 2 有则把公钥加到github 12&gt;cat id_rsa.pubssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVRgHi3gPdBcQ... xxxx@163.com","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://www.ding1996.cn/tags/css/"}]},{"title":"react-native 爬坑之路","date":"2018-03-13T03:27:49.000Z","path":"2018/03/13/rn-fix-bug/","text":"记录自己在使用RN开发中碰到有一些坑 RN官网 http://facebook.github.io/react-native/versions.htmlRN中文网官网https://reactnative.cn/ 安装12345npm install -g create-react-native-appcreate-react-native-app AwesomeProjectcd AwesomeProjectnpm ejectnpm start 模拟器打不开的话先用xcode构建下","content":"<blockquote>\n<p>记录自己在使用RN开发中碰到有一些坑</p>\n</blockquote>\n<p>RN官网 <a href=\"http://facebook.github.io/react-native/versions.html\" target=\"_blank\" rel=\"noopener\">http://facebook.github.io/react-native/versions.html</a><br>RN中文网官网<a href=\"https://reactnative.cn/\" target=\"_blank\" rel=\"noopener\">https://reactnative.cn/</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">npm </span><span class=\"string\">install </span>-g <span class=\"built_in\">create-react-native-app</span></span><br><span class=\"line\"><span class=\"built_in\">create-react-native-app</span> <span class=\"string\">AwesomeProject</span></span><br><span class=\"line\"><span class=\"string\">cd </span><span class=\"string\">AwesomeProject</span></span><br><span class=\"line\"><span class=\"string\">npm </span><span class=\"string\">eject</span></span><br><span class=\"line\"><span class=\"string\">npm </span><span class=\"string\">start</span></span><br></pre></td></tr></table></figure>\n<p>模拟器打不开的话先用xcode构建下</p>\n","excerpt":"","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://www.ding1996.cn/tags/react/"}]},{"title":"webpack 4.0 新特性","date":"2018-03-06T13:29:56.000Z","path":"2018/03/06/webpack-next/","text":"参考资料http://blog.csdn.net/qq_39207948/article/details/79432734 https://segmentfault.com/a/1190000013420383","content":"<p>参考资料<br><a href=\"http://blog.csdn.net/qq_39207948/article/details/79432734\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qq_39207948/article/details/79432734</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000013420383\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000013420383</a></p>\n","excerpt":"","categories":[],"tags":[{"name":"webpack","slug":"webpack","permalink":"http://www.ding1996.cn/tags/webpack/"}]},{"title":"网页性能管理详解","date":"2018-03-06T02:59:56.000Z","path":"2018/03/06/render-performance/","text":"Timeline 掌握针渲染模式1 网页动画能够做到每秒60帧，就会跟显示器同步刷新，一秒之内进行60次重新渲染，每次重新渲染的额时间不能超过16.66毫秒 蓝色 网络通信和HTML解析黄色 javascript 执行紫色 样式计算和布局，即重排绿色 重绘window.requestAnimationFrame() 下一次window.requesrldelCallback()下几次重新渲染时 触发分层1 获取DOM 并将其分割为多个层2 将每个层独立的绘制进位图中3 将层作为纹理上传至GPU4 复合多个层来生成最终的屏幕图像 1 DOM子树渲染层（renderLayer）根元素 position transform 半透明 css滤镜 Canvas2d video 溢出2 Compositor 渲染层子树的图形层（GraphicsLayer）css3的透视 video webgl transform 加速css滤镜 叠加在已经触发合成层 触发浏览器重排和重绘1 样式表越简单，重排和重绘就越快。2重排和重回的DOM元素层级越高，成本就越高3 table元素的重排和重绘成本，要高于div元素4 尽量不要把读操作和写操作，放在一个语句里面5 统一改变样式6 缓存重排结果7离线MDO Fragment/clone8 虚拟Dom React。9 必要的时候display：node 不见原色不影响重排重绘。 网页生成的时候，至少会渲染一次，用户访问过程中还会不断的重新渲染，一下三种情况会导致网页的重新渲染。1 修改DOM2 修改样式表3 用户事件重新渲染 就需要重新生成布局和重新绘制。前者叫做重排，后者重绘。需要主要的是，重回不一定重排。 比如改变某个元素的颜色，就只会出发重绘，不会触发重排 因为布局没有改变。但是重排一定会出发重绘，比如改变一个元素的位置就会同时触发 重排和重绘 因为布局改变了。 参考资料http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html","content":"<h3 id=\"Timeline-掌握针渲染模式\"><a href=\"#Timeline-掌握针渲染模式\" class=\"headerlink\" title=\"Timeline 掌握针渲染模式\"></a>Timeline 掌握针渲染模式</h3><p>1 网页动画能够做到每秒60帧，就会跟显示器同步刷新，一秒之内进行60次重新渲染，每次重新渲染的额时间不能超过16.66毫秒</p>\n<p>蓝色 网络通信和HTML解析<br>黄色 javascript 执行<br>紫色 样式计算和布局，即重排<br>绿色 重绘<br>window.requestAnimationFrame() 下一次<br>window.requesrldelCallback()下几次重新渲染时</p>\n<a id=\"more\"></a>\n<h3 id=\"触发分层\"><a href=\"#触发分层\" class=\"headerlink\" title=\"触发分层\"></a>触发分层</h3><p>1 获取DOM 并将其分割为多个层<br>2 将每个层独立的绘制进位图中<br>3 将层作为纹理上传至GPU<br>4 复合多个层来生成最终的屏幕图像</p>\n<p>1 DOM子树渲染层（renderLayer）<br>根元素 position transform 半透明 css滤镜 Canvas2d video 溢出<br>2 Compositor 渲染层子树的图形层（GraphicsLayer）<br>css3的透视 video webgl transform 加速css滤镜 叠加在已经触发合成层</p>\n<h3 id=\"触发浏览器重排和重绘\"><a href=\"#触发浏览器重排和重绘\" class=\"headerlink\" title=\"触发浏览器重排和重绘\"></a>触发浏览器重排和重绘</h3><p>1 样式表越简单，重排和重绘就越快。<br>2重排和重回的DOM元素层级越高，成本就越高<br>3 table元素的重排和重绘成本，要高于div元素<br>4 尽量不要把读操作和写操作，放在一个语句里面<br>5 统一改变样式<br>6 缓存重排结果<br>7离线MDO Fragment/clone<br>8 虚拟Dom React。<br>9 必要的时候display：node 不见原色不影响重排重绘。</p>\n<p>网页生成的时候，至少会渲染一次，用户访问过程中还会不断的重新渲染，一下三种情况会导致网页的重新渲染。<br>1 修改DOM<br>2 修改样式表<br>3 用户事件<br>重新渲染 就需要重新生成布局和重新绘制。前者叫做重排，后者重绘。<br>需要主要的是，重回不一定重排。 比如改变某个元素的颜色，就只会出发重绘，不会触发重排 因为布局没有改变。但是重排一定会出发重绘，比如改变一个元素的位置就会同时触发 重排和重绘 因为布局改变了。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html</a></p>\n","excerpt":"Timeline 掌握针渲染模式1 网页动画能够做到每秒60帧，就会跟显示器同步刷新，一秒之内进行60次重新渲染，每次重新渲染的额时间不能超过16.66毫秒 蓝色 网络通信和HTML解析黄色 javascript 执行紫色 样式计算和布局，即重排绿色 重绘window.requestAnimationFrame() 下一次window.requesrldelCallback()下几次重新渲染时","categories":[],"tags":[]},{"title":"css硬件加速","date":"2018-03-04T01:15:07.000Z","path":"2018/03/04/css-speed/","text":"参考资料https://www.w3cplus.com/css3/introduction-to-hardware-acceleration-css-animations.html","content":"<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://www.w3cplus.com/css3/introduction-to-hardware-acceleration-css-animations.html\" target=\"_blank\" rel=\"noopener\">https://www.w3cplus.com/css3/introduction-to-hardware-acceleration-css-animations.html</a></p>\n","excerpt":"","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://www.ding1996.cn/tags/css/"}]},{"title":"http304缓存原理","date":"2018-03-02T09:15:39.000Z","path":"2018/03/02/http-304/","text":"这两天出去面试了下有个印象深刻的问题就是 304 缓存的原理 参考资料https://my.oschina.net/ososchina/blog/494074 https://segmentfault.com/a/1190000004084801","content":"<blockquote>\n<p>这两天出去面试了下有个印象深刻的问题就是 304 缓存的原理</p>\n</blockquote>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://my.oschina.net/ososchina/blog/494074\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/ososchina/blog/494074</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000004084801\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000004084801</a></p>\n","excerpt":"","categories":[],"tags":[{"name":"http","slug":"http","permalink":"http://www.ding1996.cn/tags/http/"}]},{"title":"webpack 常用插件","date":"2018-02-26T01:30:29.000Z","path":"2018/02/26/webpack-config/","text":"123456789101112// 提取js里面的cssconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\");// 注入htmlconst HtmlWebpackPlugin = require('html-webpack-plugin')// 删除文件夹const CleanWebpackPlugin = require('clean-webpack-plugin')// 压缩jsnew webpack.optimize.UglifyJsPlugin// 提取公用模块new webpack.optimize.CommonsChunkPlugin// 去掉打包后里面 没用的闭包new webpack.optimize.ModuleConcatenationPlugin(), webpack 基础配置 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283const path = require('path');const webpack = require(\"webpack\");const extractPlugin = require('extract-text-webpack-plugin');const HtmlWebpackPlugin = require('html-webpack-plugin')const CleanWebpackPlugin = require('clean-webpack-plugin')const OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');module.exports = &#123; entry: &#123; \"index\": \"./assets/scripts/index.es\" &#125;, output: &#123; path: path.join(__dirname, './assets/'), publicPath: './', filename: 'build/[name][hash:5].bundle.js' &#125;, module: &#123; rules: [&#123; test: /\\.es$/, use: 'babel-loader', // 把babel 提取到.babelrc 文件中 // use: [&#123; // loader: \"babel-loader\", // options: &#123; // \"presets\": [ // [\"es2015\", &#123; // \"modules\": false // &#125;], \"stage-0\" // ] // &#125; // &#125;] &#125;, &#123; test: /\\.less$/i, use: extractPlugin.extract(&#123; fallback: \"style-loader\", use: [&#123; loader: \"css-loader\", // 压缩css options:&#123; minimize:true &#125; &#125;, &#123; loader: \"less-loader\" &#125;] &#125;) &#125; ] &#125;, plugins: [ // css提取插件 new CleanWebpackPlugin('./assets/build'), new extractPlugin(\"build/[name][hash:5].css\"), new webpack.optimize.CommonsChunkPlugin(&#123; name: \"common\", filename: 'build/[name][hash:5].js', minChunks: 2 &#125;), // html 自动生成插件 new HtmlWebpackPlugin(&#123; filename: 'index.html', template: './index.html', inject: true &#125;), // 代码压缩插件 new webpack.optimize.UglifyJsPlugin(&#123; compress: &#123; warnings: true &#125;, output: &#123; comments: false &#125;, sourceMap: false &#125;), // 去掉打包后里面 没用的闭包 new webpack.optimize.ModuleConcatenationPlugin(), ]&#125;","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 提取js里面的css</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"extract-text-webpack-plugin\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 注入html</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 删除文件夹</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 压缩js</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin</span><br><span class=\"line\"><span class=\"comment\">// 提取公用模块</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin</span><br><span class=\"line\"><span class=\"comment\">//  去掉打包后里面 没用的闭包</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.ModuleConcatenationPlugin(),</span><br></pre></td></tr></table></figure>\n<p>webpack 基础配置</p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> extractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> OptimizeCssAssetsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"index\"</span>: <span class=\"string\">\"./assets/scripts/index.es\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.join(__dirname, <span class=\"string\">'./assets/'</span>),</span><br><span class=\"line\">        publicPath: <span class=\"string\">'./'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'build/[name][hash:5].bundle.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [&#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.es$/</span>,</span><br><span class=\"line\">                use: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">                <span class=\"comment\">//  把babel 提取到.babelrc 文件中</span></span><br><span class=\"line\">                <span class=\"comment\">// use: [&#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//     loader: \"babel-loader\",</span></span><br><span class=\"line\">                <span class=\"comment\">//     options: &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//         \"presets\": [</span></span><br><span class=\"line\">                <span class=\"comment\">//             [\"es2015\", &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//                 \"modules\": false</span></span><br><span class=\"line\">                <span class=\"comment\">//             &#125;], \"stage-0\"</span></span><br><span class=\"line\">                <span class=\"comment\">//         ]</span></span><br><span class=\"line\">                <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">                <span class=\"comment\">// &#125;]</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.less$/i</span>,</span><br><span class=\"line\">                use: extractPlugin.extract(&#123;</span><br><span class=\"line\">                    fallback: <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">                    use: [&#123;</span><br><span class=\"line\">                        loader: <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">                        <span class=\"comment\">//  压缩css</span></span><br><span class=\"line\">                        options:&#123;</span><br><span class=\"line\">                            minimize:<span class=\"literal\">true</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: <span class=\"string\">\"less-loader\"</span></span><br><span class=\"line\">                    &#125;]</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"comment\">//  css提取插件</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin(<span class=\"string\">'./assets/build'</span>),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> extractPlugin(<span class=\"string\">\"build/[name][hash:5].css\"</span>),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">            name: <span class=\"string\">\"common\"</span>,</span><br><span class=\"line\">            filename: <span class=\"string\">'build/[name][hash:5].js'</span>,</span><br><span class=\"line\">            minChunks: <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"comment\">//    html 自动生成插件</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">            template: <span class=\"string\">'./index.html'</span>,</span><br><span class=\"line\">            inject: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"comment\">//  代码压缩插件</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">            compress: &#123;</span><br><span class=\"line\">                warnings: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            output: &#123;</span><br><span class=\"line\">                comments: <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            sourceMap: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"comment\">//  去掉打包后里面 没用的闭包</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.optimize.ModuleConcatenationPlugin(),</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"123456789101112// 提取js里面的cssconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\");// 注入htmlconst HtmlWebpackPlugin = require('html-webpack-plugin')// 删除文件夹const CleanWebpackPlugin = require('clean-webpack-plugin')// 压缩jsnew webpack.optimize.UglifyJsPlugin// 提取公用模块new webpack.optimize.CommonsChunkPlugin// 去掉打包后里面 没用的闭包new webpack.optimize.ModuleConcatenationPlugin(), webpack 基础配置","categories":[],"tags":[{"name":"webpack","slug":"webpack","permalink":"http://www.ding1996.cn/tags/webpack/"}]},{"title":"Travis CI 学习笔记","date":"2018-02-16T05:47:59.000Z","path":"2018/02/16/Travis-config/","text":"Travis是什么？它是一个持续集成的工具 文档 https://docs.travis-ci.com/user/getting-started/ 参考资料https://segmentfault.com/a/1190000011218410 https://mp.weixin.qq.com/s/hCpg_bqFP-oAvRaE7ropqw","content":"<p>Travis是什么？它是一个持续集成的工具</p>\n<p>文档 <a href=\"https://docs.travis-ci.com/user/getting-started/\" target=\"_blank\" rel=\"noopener\">https://docs.travis-ci.com/user/getting-started/</a></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://segmentfault.com/a/1190000011218410\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000011218410</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/hCpg_bqFP-oAvRaE7ropqw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/hCpg_bqFP-oAvRaE7ropqw</a></p>\n","excerpt":"","categories":[],"tags":[]},{"title":"Mobx 学习笔记","date":"2018-02-12T01:25:07.000Z","path":"2018/02/12/it-react-mobx/","text":"官方文档 http://cn.mobx.js.org/ mobx是react的一种状态管理器 下面是自己写的demostate.js 1234567891011121314151617181920212223242526import &#123; observable, computed, action &#125; from 'mobx'class AppStore &#123; @observable text = '测试双向绑定' @observable num = 0 @computed get msg() &#123; return this.text &#125; @action changeMsg(val) &#123; this.text = val &#125; @action addNum() &#123; this.num += 1 &#125;&#125;const appStore = new AppStore()setInterval(() =&gt; &#123; appStore.addNum()&#125;, 1000)export default appStore app.js 12345678910111213141516171819202122232425262728293031323334353637383940import React from 'react'import &#123; observer, inject &#125; from 'mobx-react'@inject('appStore') @observerclass App extends React.Component &#123; componentDidMount() &#123; const val = this.text.value console.log(this.text.value) // this.text.value = '' // this.text.focus() this.text.value = val console.log(this.props); &#125; handleChange = (e) =&gt; &#123; this.props.appStore.changeMsg(e.target.value) &#125; render() &#123; return ( &lt;div&gt; &lt;p&gt; &lt;input type=\"text\" value=&#123;this.props.appStore.msg&#125; onChange=&#123;this.handleChange&#125; ref=&#123;(text) =&gt; &#123; this.text = text &#125;&#125; /&gt; &lt;/p&gt; &lt;p&gt;&#123;this.props.appStore.msg&#125;&lt;/p&gt; &lt;p&gt;距离打开页面已经过：&#123;this.props.appStore.num&#125; 秒&lt;/p&gt; &lt;div&gt;hhahh&lt;/div&gt; &lt;/div&gt; ) &#125;&#125;export default App index.js 12345678910111213141516171819202122import React from 'react'import ReactDOM from 'react-dom'import &#123; Provider &#125; from 'mobx-react'import App from './App'import appStore from './store/state'import &#123; AppContainer &#125; from 'react-hot-loader' // eslint-disable-lineconst root = document.getElementById('root')const render = (component) =&gt; &#123; const node = ( // &lt;AppContainer&gt; &lt;Provider appStore=&#123;appStore&#125;&gt; &#123; component &#125; &lt;/Provider&gt; // &lt;/AppContainer&gt; ) ReactDOM.render(node, root)&#125;render(&lt;App /&gt;) babel 修饰器配置http://cn.mobx.js.org/best/decorators.html 参考","content":"<p>官方文档</p>\n<p><a href=\"http://cn.mobx.js.org/\" target=\"_blank\" rel=\"noopener\">http://cn.mobx.js.org/</a></p>\n<p>mobx是react的一种状态管理器</p>\n<p>下面是自己写的demo<br>state.js</p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; observable, computed, action &#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppStore</span> </span>&#123;</span><br><span class=\"line\">  @observable text = <span class=\"string\">'测试双向绑定'</span></span><br><span class=\"line\">  @observable num = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  @computed get msg() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.text</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @action changeMsg(val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.text = val</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @action addNum() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.num += <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> appStore = <span class=\"keyword\">new</span> AppStore()</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  appStore.addNum()</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> appStore</span><br></pre></td></tr></table></figure>\n<p>app.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; observer, inject &#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx-react'</span></span><br><span class=\"line\"></span><br><span class=\"line\">@inject(<span class=\"string\">'appStore'</span>) @observer</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> val = <span class=\"keyword\">this</span>.text.value</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.text.value)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// this.text.value = ''</span></span><br><span class=\"line\">    <span class=\"comment\">// this.text.focus()</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.text.value = val</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.props);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.appStore.changeMsg(e.target.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;p&gt;</span><br><span class=\"line\">          &lt;input</span><br><span class=\"line\">            type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">            value=&#123;<span class=\"keyword\">this</span>.props.appStore.msg&#125;</span><br><span class=\"line\">            onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125;</span><br><span class=\"line\">            ref=&#123;(text) =&gt; &#123; <span class=\"keyword\">this</span>.text = text &#125;&#125;</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;p&gt;&#123;this.props.appStore.msg&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">        &lt;p&gt;距离打开页面已经过：&#123;<span class=\"keyword\">this</span>.props.appStore.num&#125; 秒&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;div&gt;hhahh&lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default App</span></span><br></pre></td></tr></table></figure>\n<p>index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Provider &#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx-react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> appStore <span class=\"keyword\">from</span> <span class=\"string\">'./store/state'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-hot-loader'</span>  <span class=\"comment\">// eslint-disable-line</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> render = <span class=\"function\">(<span class=\"params\">component</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> node = (</span><br><span class=\"line\">    <span class=\"comment\">// &lt;AppContainer&gt;</span></span><br><span class=\"line\">      &lt;Provider appStore=&#123;appStore&#125;&gt;</span><br><span class=\"line\">        &#123; component &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Provider&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ &lt;/</span>AppContainer&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">  ReactDOM.render(node, root)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span>)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"babel-修饰器配置\"><a href=\"#babel-修饰器配置\" class=\"headerlink\" title=\"babel 修饰器配置\"></a>babel 修饰器配置</h3><p><a href=\"http://cn.mobx.js.org/best/decorators.html\" target=\"_blank\" rel=\"noopener\">http://cn.mobx.js.org/best/decorators.html</a></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3>","excerpt":"官方文档 http://cn.mobx.js.org/ mobx是react的一种状态管理器 下面是自己写的demostate.js","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://www.ding1996.cn/tags/react/"}]},{"title":"linux免密登陆","date":"2018-02-07T03:04:50.000Z","path":"2018/02/07/it-linux-shh/","text":"思路：在本地生成公钥和私钥，然后将公钥放到linux的root（也就是~）目录下的.ssh文件夹下（隐藏文件夹），如何没有则生成一个。 1 在Mac客户端命令行生成公钥和私钥 cd ~/.sshssh-keygen -t rsa 之后回车两次，注：（Enter passphrase (empty for no passphrase): 可以设置密码），免密做好后首次登录要求输入一次密码，就输入这里的密码。 生成两个文件id_rsa（私钥）和id_rsa.pub（公钥） 2 发送公钥到CentOS服务器端 scp id_rsa.pub user@ip:~/.ssh如果服务器上没有.ssh文件夹，则登录服务器输入如下命令创建mkdir ~/.sshchmod 700 ~/.ssh 3 登陆CentOS服务器端,设置公钥文 ssh user@ip casino online 注：此时还是需要输入密码cd ~/.sshcat id_rsa.pub &gt;&gt; authorized_keyschmod 600 authorized_keys 注：必须设置成600 设置别名首先在自己的电脑上解析别名比如dingmac环境下 host在 /etc/hosts 12345678910111213➜ /etc cat hosts### Host Database## localhost is used to configure the loopback interface# when the system is booting. Do not change this entry.##127.0.0.1 localhost255.255.255.255 broadcasthost::1 localhost192.30.253.113 github.com127.0.0.1 test.com47.95.235.183 ding 然后连接到远程服务器在 ~/.ssh/ 目录下创建 config 文件 1234567891011[root@iz2ze17rrh39kqzngcg4jaz .ssh]# cat configHost ding User root HostName 47.95.235.183 IdentityFile ~/.ssh/id_rsa.pub Protocol 2 Compression yes ServerAliveInterval 60 ServerAliveCountMax 20 LogLevel INFO 配置好直接执行 ssh root@ding 就能直接连接了 注释：HostName 指定登录的主机名或IP地址Port 指定登录的端口号User 登录用户名IdentityFile 登录的公钥文件IdentitiesOnly 只接受SSH key 登录 参考资料http://blog.csdn.net/superbfly/article/details/66970114","content":"<blockquote>\n<p>思路：在本地生成公钥和私钥，然后将公钥放到linux的root（也就是~）目录下的.ssh文件夹下（隐藏文件夹），如何没有则生成一个。 </p>\n</blockquote>\n<p><strong>1 在Mac客户端命令行生成公钥和私钥</strong></p>\n<p>cd ~/.ssh<br>ssh-keygen -t rsa</p>\n<p>之后回车两次，注：（Enter passphrase (empty for no passphrase): 可以设置密码），免密做好后首次登录要求输入一次密码，就输入这里的密码。</p>\n<p>生成两个文件id_rsa（私钥）和id_rsa.pub（公钥）</p>\n<a id=\"more\"></a>\n<p><strong>2 发送公钥到CentOS服务器端</strong></p>\n<p>scp id_rsa.pub user@ip:~/.ssh<br>如果服务器上没有.ssh文件夹，则登录服务器输入如下命令创建<br>mkdir ~/.ssh<br>chmod 700 ~/.ssh</p>\n<p><strong>3 登陆CentOS服务器端,设置公钥文</strong></p>\n<p>ssh user@ip casino online 注：此时还是需要输入密码<br>cd ~/.ssh<br>cat id_rsa.pub &gt;&gt; authorized_keys<br>chmod 600 authorized_keys 注：必须设置成600</p>\n<h3 id=\"设置别名\"><a href=\"#设置别名\" class=\"headerlink\" title=\"设置别名\"></a>设置别名</h3><p>首先在自己的电脑上解析别名比如ding<br>mac环境下 host在 /etc/hosts</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  /etc cat hosts</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Host Database</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> localhost is used to configure the loopback interface</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> when the system is booting.  Do not change this entry.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#</span></span></span><br><span class=\"line\">127.0.0.1\tlocalhost</span><br><span class=\"line\">255.255.255.255\tbroadcasthost</span><br><span class=\"line\">::1             localhost</span><br><span class=\"line\">192.30.253.113 github.com</span><br><span class=\"line\">127.0.0.1  test.com</span><br><span class=\"line\">47.95.235.183 ding</span><br></pre></td></tr></table></figure>\n<p>然后连接到远程服务器在 ~/.ssh/ 目录下创建 config 文件</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iz2ze17rrh39kqzngcg4jaz .ssh]# cat config</span><br><span class=\"line\"></span><br><span class=\"line\">Host ding</span><br><span class=\"line\">  <span class=\"built_in\"> User </span>root</span><br><span class=\"line\">   HostName 47.95.235.183</span><br><span class=\"line\">   IdentityFile ~/.ssh/id_rsa.pub</span><br><span class=\"line\">   Protocol 2</span><br><span class=\"line\">   Compression <span class=\"literal\">yes</span></span><br><span class=\"line\">   ServerAliveInterval 60</span><br><span class=\"line\">   ServerAliveCountMax 20</span><br><span class=\"line\">   LogLevel INFO</span><br></pre></td></tr></table></figure>\n<p>配置好直接执行  ssh root@ding 就能直接连接了</p>\n<p>注释：<br>HostName 指定登录的主机名或IP地址<br>Port 指定登录的端口号<br>User 登录用户名<br>IdentityFile 登录的公钥文件<br>IdentitiesOnly 只接受SSH key 登录</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://blog.csdn.net/superbfly/article/details/66970114\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/superbfly/article/details/66970114</a></p>\n","excerpt":"思路：在本地生成公钥和私钥，然后将公钥放到linux的root（也就是~）目录下的.ssh文件夹下（隐藏文件夹），如何没有则生成一个。 1 在Mac客户端命令行生成公钥和私钥 cd ~/.sshssh-keygen -t rsa 之后回车两次，注：（Enter passphrase (empty for no passphrase): 可以设置密码），免密做好后首次登录要求输入一次密码，就输入这里的密码。 生成两个文件id_rsa（私钥）和id_rsa.pub（公钥）","categories":[],"tags":[{"name":"linxu","slug":"linxu","permalink":"http://www.ding1996.cn/tags/linxu/"}]},{"title":"linux学习笔记","date":"2018-02-07T02:12:06.000Z","path":"2018/02/07/linux-basic/","text":"项目上线部署少不了服务器,现在的一般服务器都是linux的与我们平时接触到的window大不相同,所以linux还是需要多多了解 linux是什么linux只是一个内核 https://www.kernel.org/ linux的发行版有很多常用的有 乌班图 和 centos 一般服务器大多都是使用的centoscentos 官网 乌班图官网 常用操作远程连接服务器 ssh命令 上传或者下载文件 scp命令 查看进程ps aux |grep node 查看端口是否被占用 ss -an -p | grep 80 lsof -i tcp:8081 杀死进程 kill -9 pid 防火墙相关操作 systemctl status firewalld systemctl start firewalld systemctl stop firewalld","content":"<p>项目上线部署少不了服务器,现在的一般服务器都是linux的与我们平时接触到的window大不相同,所以linux还是需要多多了解</p>\n<h3 id=\"linux是什么\"><a href=\"#linux是什么\" class=\"headerlink\" title=\"linux是什么\"></a>linux是什么</h3><p>linux只是一个内核 <a href=\"https://www.kernel.org/\" target=\"_blank\" rel=\"noopener\">https://www.kernel.org/</a></p>\n<p>linux的发行版有很多常用的有 乌班图 和 centos</p>\n<p>一般服务器大多都是使用的centos<br><a id=\"more\"></a><br><a href=\"https://www.centos.org/\" target=\"_blank\" rel=\"noopener\">centos 官网</a></p>\n<p><a href=\"https://www.ubuntu.com/index_kylin\" target=\"_blank\" rel=\"noopener\">乌班图官网</a></p>\n<h3 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h3><p><strong>远程连接服务器</strong></p>\n<p>ssh命令</p>\n<p><strong>上传或者下载文件</strong></p>\n<p>scp命令</p>\n<p><strong>查看进程</strong><br>ps aux |grep node</p>\n<p><strong>查看端口是否被占用</strong></p>\n<p>ss -an -p | grep 80</p>\n<p>lsof -i tcp:8081</p>\n<p><strong>杀死进程</strong></p>\n<p>kill -9 pid</p>\n<p><strong>防火墙相关操作</strong></p>\n<p>systemctl status firewalld</p>\n<p>systemctl start firewalld</p>\n<p>systemctl stop firewalld</p>\n","excerpt":"项目上线部署少不了服务器,现在的一般服务器都是linux的与我们平时接触到的window大不相同,所以linux还是需要多多了解 linux是什么linux只是一个内核 https://www.kernel.org/ linux的发行版有很多常用的有 乌班图 和 centos 一般服务器大多都是使用的centos","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://www.ding1996.cn/tags/linux/"}]},{"title":"RN debug学习笔记","date":"2018-02-05T02:26:20.000Z","path":"2018/02/05/native-react-debug/","text":"最近在学习RN这几记录下学习中DEBUG的一些笔记 1.开发者菜单的Reload选项Reload代表重新加载程序的js代码,意味着程序会重新运行,并且你修改过后的js代码会更新,并运行.也就是开发者菜单中的第一项.每次修改代码,需要重新运行,只需调出开发者菜单,选中Reload即可. 2.开发者菜单中的Enable Live Reload选项这个功能相当于Reload自动执行的选项,在开发者菜单的第二个选项.这个选项选中后,开发会变得更方便.当你修改代码后,便会自动执行.那么如何触发呢?毕竟不是你修改一行就加载一行,那样也不太正常啊.在subline中,只需按下crlt+s 这个保存的快捷键,即可调出live reload功能. 3.开发者菜单中的Enable Hot Reloading选项这个功能相当于上面的live reload的加强版.也就是实时热修复,并直接达到当前所在的界面,保留当前的运行状态.类似android studio中的instant run,修改下界面后,直接显示修改后的ui效果.注意: 这里的reload,live reload,hot reload都指的是js代码层面的调试,如果是android中或者ios中加入了图片资源,或者native代码有修改那就不行了,必须要重新编译才能看到效果. 参考http://blog.csdn.net/aa671125/article/details/60874945","content":"<p>最近在学习RN这几记录下学习中DEBUG的一些笔记</p>\n<p>1.开发者菜单的Reload选项<br>Reload代表重新加载程序的js代码,意味着程序会重新运行,并且你修改过后的js代码会更新,并运行.也就是开发者菜单中的第一项.每次修改代码,需要重新运行,只需调出开发者菜单,选中Reload即可.</p>\n<p>2.开发者菜单中的Enable Live Reload选项<br>这个功能相当于Reload自动执行的选项,在开发者菜单的第二个选项.这个选项选中后,开发会变得更方便.当你修改代码后,便会自动执行.那么如何触发呢?毕竟不是你修改一行就加载一行,那样也不太正常啊.在subline中,只需按下crlt+s 这个保存的快捷键,即可调出live reload功能.</p>\n<p>3.开发者菜单中的Enable Hot Reloading选项<br>这个功能相当于上面的live reload的加强版.也就是实时热修复,并直接达到当前所在的界面,保留当前的运行状态.类似android studio中的instant run,修改下界面后,直接显示修改后的ui效果.<br>注意: 这里的reload,live reload,hot reload都指的是js代码层面的调试,如果是android中或者ios中加入了图片资源,或者native代码有修改那就不行了,必须要重新编译才能看到效果.</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://blog.csdn.net/aa671125/article/details/60874945\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/aa671125/article/details/60874945</a></p>\n","excerpt":"","categories":[],"tags":[{"name":"RN","slug":"RN","permalink":"http://www.ding1996.cn/tags/RN/"}]},{"title":"使用babel编译es6语法","date":"2018-02-03T10:05:42.000Z","path":"2018/02/03/it-es-babel/","text":"先安装babel-cli工具 1npm install babel-cli -g 使用1234567891011121314151617# 转码结果输出到标准输出$ babel example.js# 转码结果写入一个文件# --out-file 或 -o 参数指定输出文件$ babel example.js --out-file compiled.js# 或者$ babel example.js -o compiled.js# 整个目录转码# --out-dir 或 -d 参数指定输出目录$ babel src --out-dir lib# 或者$ babel src -d lib# -s 参数生成source map文件$ babel src -d lib -s 安装es5的编码规则 1$ npm install --save-dev babel-preset-es2015 创建.babelrc 配置文件 1234&#123; \"presets\": [\"es2015\"], \"plugins\": []&#125; 参考http://es6.ruanyifeng.com/#docs/intro","content":"<p>先安装babel-cli工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-cli -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 转码结果输出到标准输出</span></span><br><span class=\"line\">$ babel example.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转码结果写入一个文件</span></span><br><span class=\"line\"><span class=\"comment\"># --out-file 或 -o 参数指定输出文件</span></span><br><span class=\"line\">$ babel example.js --out-file compiled.js</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ babel example.js -o compiled.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 整个目录转码</span></span><br><span class=\"line\"><span class=\"comment\"># --out-dir 或 -d 参数指定输出目录</span></span><br><span class=\"line\">$ babel src --out-dir lib</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ babel src -d lib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -s 参数生成source map文件</span></span><br><span class=\"line\">$ babel src -d lib -s</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>安装es5的编码规则</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> babel-preset-es2015</span><br></pre></td></tr></table></figure>\n<p>创建.babelrc 配置文件 </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"es2015\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://es6.ruanyifeng.com/#docs/intro\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/intro</a></p>\n","excerpt":"先安装babel-cli工具 1npm install babel-cli -g 使用1234567891011121314151617# 转码结果输出到标准输出$ babel example.js# 转码结果写入一个文件# --out-file 或 -o 参数指定输出文件$ babel example.js --out-file compiled.js# 或者$ babel example.js -o compiled.js# 整个目录转码# --out-dir 或 -d 参数指定输出目录$ babel src --out-dir lib# 或者$ babel src -d lib# -s 参数生成source map文件$ babel src -d lib -s","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"}]},{"title":"2018年2月2号周末任务","date":"2018-02-02T09:47:54.000Z","path":"2018/02/02/note-20180202/","text":"周末任务 mobxreactnative hello worldweex复习react","content":"<p>周末任务</p>\n<p>mobx<br>reactnative hello world<br>weex<br>复习react</p>\n","excerpt":"","categories":[],"tags":[]},{"title":"node处理高并发异步io理解","date":"2018-02-02T07:35:39.000Z","path":"2018/02/02/it-node-asyncio/","text":"I/O是什么 input/out读写，异步io是什么就是异步去操作读取文件发送ajax请求都算异步io 为什么说nodejs擅长高并发io ，因为node EventLoop事件循环机制 为什么nodejs不擅长cpu密集型操作。因为异步任务要等同步任务执行结束如果cpu密集型计算太久会阻塞异步操作 1234// 这就是一个cpu密集型的操作for (let i = 0; i &lt; 1000000; i++) &#123; console.log(i);&#125; 参考资料http://www.cnblogs.com/dudeyouth/p/6698274.html","content":"<p>I/O是什么 input/out读写，异步io是什么就是异步去操作读取文件发送ajax请求都算异步io</p>\n<p>为什么说nodejs擅长高并发io ，因为node EventLoop事件循环机制</p>\n<p>为什么nodejs不擅长cpu密集型操作。因为异步任务要等同步任务执行结束如果cpu密集型计算太久会阻塞异步操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这就是一个cpu密集型的操作</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000000</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://www.cnblogs.com/dudeyouth/p/6698274.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/dudeyouth/p/6698274.html</a></p>\n","excerpt":"","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"}]},{"title":"使用Async和Await优雅的解决异步编程","date":"2018-02-02T01:59:40.000Z","path":"2018/02/02/it-node-async/","text":"Async Await 是es7的东西不过node7.6以上的版本都已经支持了，基本上使用js大多时候都是异步的，有了Async Await 就可以优雅的解决异步代码了； showcode1234async function test ()&#123; return \"hello\"&#125;console.log(test()) // Promise &#123; 'hello' &#125; async 函数返回一个return promise的值 1234567 function test()&#123; return new Promise(function(resolve, reject) &#123; setTimeout(()=&gt;&#123; resolve(1) &#125;,1000) &#125;);&#125; 这段代码如果不用async怎么调用 123test().then((res)=&gt;&#123; console.log(res) //1 &#125;) 下面是使用async和await ， 这里注意一点await要放在async函数里面使用 12345async function fn ()&#123; let data = await test() console.log(data) // 1&#125;fn() 使用await就能直接返回promise resolve的值不用then了可以少些很多代码 参考资料https://blog.fundebug.com/2017/04/04/nodejs-async-await/","content":"<p>Async Await 是es7的东西不过node7.6以上的版本都已经支持了，<br>基本上使用js大多时候都是异步的，有了Async Await 就可以优雅的解决异步代码了；</p>\n<h3 id=\"showcode\"><a href=\"#showcode\" class=\"headerlink\" title=\"showcode\"></a>showcode</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test()) <span class=\"comment\">// Promise &#123; 'hello' &#125;</span></span><br></pre></td></tr></table></figure>\n<p>async 函数返回一个return promise的值 </p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">      resolve(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码如果不用async怎么调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test().then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res) <span class=\"comment\">//1 </span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>下面是使用async和await ， 这里注意一点await要放在async函数里面使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> test()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data) <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn()</span><br></pre></td></tr></table></figure>\n<p>使用await就能直接返回promise resolve的值不用then了可以少些很多代码</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://blog.fundebug.com/2017/04/04/nodejs-async-await/\" target=\"_blank\" rel=\"noopener\">https://blog.fundebug.com/2017/04/04/nodejs-async-await/</a></p>\n","excerpt":"Async Await 是es7的东西不过node7.6以上的版本都已经支持了，基本上使用js大多时候都是异步的，有了Async Await 就可以优雅的解决异步代码了； showcode1234async function test ()&#123; return \"hello\"&#125;console.log(test()) // Promise &#123; 'hello' &#125; async 函数返回一个return promise的值","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"}]},{"title":"node模板之swig基本教程","date":"2018-01-27T16:02:41.000Z","path":"2018/01/28/node-swig/","text":"完善ing。。。 参考资料http://www.iqianduan.net/blog/how_to_use_swig http://blog.csdn.net/dszgf5717/article/details/50697686","content":"<p>完善ing。。。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://www.iqianduan.net/blog/how_to_use_swig\" target=\"_blank\" rel=\"noopener\">http://www.iqianduan.net/blog/how_to_use_swig</a></p>\n<p><a href=\"http://blog.csdn.net/dszgf5717/article/details/50697686\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dszgf5717/article/details/50697686</a></p>\n","excerpt":"","categories":[],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://www.ding1996.cn/tags/nodejs/"}]},{"title":"node进程管理之supervisor","date":"2018-01-27T15:54:17.000Z","path":"2018/01/27/node-supervisor/","text":"supervisor是一个轻量级的node进程管理工具，热更新不用修改了文件每次都要重新运行node非常实用 安装1npm install -g supervisor 使用1supervisor app.js","content":"<p>supervisor是一个轻量级的node进程管理工具，热更新不用修改了文件每次都要重新运行node非常实用</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g supervisor</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisor app.js</span><br></pre></td></tr></table></figure>\n","excerpt":"","categories":[],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://www.ding1996.cn/tags/nodejs/"}]},{"title":"数据推送SSE学习笔记","date":"2018-01-26T02:51:20.000Z","path":"2018/01/26/it-sse-learn/","text":"SSE （ Server-sent Events ）是 WebSocket 的一种轻量代替方案，使用 HTTP 协议。严格地说，HTTP 协议是没有办法做服务器推送的，但是当服务器向客户端声明接下来要发送流信息时，客户端就会保持连接打开，SSE 使用的就是这种原理。 SSE能做什么理论上， SSE 和 WebSocket 做的是同一件事情。当你需要用新数据局部更新网络应用时，SSE 可以做到不需要用户执行任何操作，便可以完成。 举例我们要做一个统计系统的管理后台，我们想知道统计数据的实时情况。类似这种更新频繁、 低延迟的场景，SSE 可以完全满足。 其他一些应用场景：例如邮箱服务的新邮件提醒，微博的新消息推送、管理后台的一些操作 实时同步等，SSE 都是不错的选择。 SSE vs. WebSocketSSE 是单向通道，只能服务器向客户端发送消息，如果客户端需要向服务器发送消息，则需要一个新的 HTTP 请求。 这对比 WebSocket 的双工通道来说，会有更大的开销。这么一来的话就会存在一个「什么时候才需要关心这个差异？」的问题，如果平均每秒会向服务器发送一次消息的话，那应该选择 WebSocket。如果一分钟仅 5 - 6 次的话，其实这个差异并不大。 在浏览器兼容方面，两者差不多。在较早之前，每当需要建立双向 Socket 时就会使用 Flash，在 移动浏览器不支持 Flash 的情况下，WebSocket 的兼容是比较难做的。 SSE 我认为最大的优势是便利： 实现一个完整的服务仅需要少量的代码； 可以在现有的服务中使用，不需要启动一个新的服务； 可以用任何一种服务端语言中使用； 基于 HTTP ／ HTTPS 协议，可以直接运行于现有的代理服务器和认证技术。 有了这些优势，在选择使用 SSE 时就已经为自己的项目节约了不少成本。 demo服务器 data.php这里注意一点必须要\\n\\n结束 123456&lt;?phpheader(\"Content-Type:text/event-stream;charset=utf-8\");header('Access-Control-Allow-Origin:http://127.0.0.1:8888');echo \"data:现在北京时间是\".date('H:i:s').\"\\n\\n\"; ?&gt; 客户端 浏览器 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; var source; function init()&#123; source = new EventSource('http://127.0.0.1:8888/SSE/data.php'); source.onopen=function()&#123; console.log('连接已建立',this.readyState) &#125; source.onmessage=function(event)&#123; console.log('从服务器适时获取数据',event.data); &#125; source.onerror=function()&#123; &#125; &#125; init() &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 参考资料https://www.v2ex.com/t/379577","content":"<blockquote>\n<p>SSE （ Server-sent Events ）是 WebSocket 的一种轻量代替方案，使用 HTTP 协议。<br>严格地说，HTTP 协议是没有办法做服务器推送的，但是当服务器向客户端声明接下来要发送流信息时，客户端就会保持连接打开，SSE 使用的就是这种原理。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"SSE能做什么\"><a href=\"#SSE能做什么\" class=\"headerlink\" title=\"SSE能做什么\"></a>SSE能做什么</h3><p>理论上， SSE 和 WebSocket 做的是同一件事情。当你需要用新数据局部更新网络应用时，SSE 可以做到不需要用户执行任何操作，便可以完成。</p>\n<p>举例我们要做一个统计系统的管理后台，我们想知道统计数据的实时情况。类似这种更新频繁、 低延迟的场景，SSE 可以完全满足。</p>\n<p>其他一些应用场景：例如邮箱服务的新邮件提醒，微博的新消息推送、管理后台的一些操作 实时同步等，SSE 都是不错的选择。</p>\n<h3 id=\"SSE-vs-WebSocket\"><a href=\"#SSE-vs-WebSocket\" class=\"headerlink\" title=\"SSE vs. WebSocket\"></a>SSE vs. WebSocket</h3><p>SSE 是单向通道，只能服务器向客户端发送消息，如果客户端需要向服务器发送消息，则需要一个新的 HTTP 请求。 这对比 WebSocket 的双工通道来说，会有更大的开销。这么一来的话就会存在一个「什么时候才需要关心这个差异？」的问题，如果平均每秒会向服务器发送一次消息的话，那应该选择 WebSocket。如果一分钟仅 5 - 6 次的话，其实这个差异并不大。</p>\n<p>在浏览器兼容方面，两者差不多。在较早之前，每当需要建立双向 Socket 时就会使用 Flash，在 移动浏览器不支持 Flash 的情况下，WebSocket 的兼容是比较难做的。</p>\n<p>SSE 我认为最大的优势是便利：</p>\n<ul>\n<li>实现一个完整的服务仅需要少量的代码；</li>\n<li>可以在现有的服务中使用，不需要启动一个新的服务；</li>\n<li>可以用任何一种服务端语言中使用；</li>\n<li>基于 HTTP ／ HTTPS 协议，可以直接运行于现有的代理服务器和认证技术。</li>\n<li>有了这些优势，在选择使用 SSE 时就已经为自己的项目节约了不少成本。</li>\n</ul>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><p>服务器 data.php<br>这里注意一点必须要\\n\\n结束</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">header(<span class=\"string\">\"Content-Type:text/event-stream;charset=utf-8\"</span>);</span><br><span class=\"line\">header(<span class=\"string\">'Access-Control-Allow-Origin:http://127.0.0.1:8888'</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"data:现在北京时间是\"</span>.date(<span class=\"string\">'H:i:s'</span>).<span class=\"string\">\"\\n\\n\"</span>;</span><br><span class=\"line\"> <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>客户端 浏览器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"keyword\">var</span> source;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    source = <span class=\"keyword\">new</span> EventSource(<span class=\"string\">'http://127.0.0.1:8888/SSE/data.php'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">    source.onopen=<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接已建立'</span>,<span class=\"keyword\">this</span>.readyState)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"actionscript\">    source.onmessage=<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(event)</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'从服务器适时获取数据'</span>,event.data);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"actionscript\">    source.onerror=<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  init()</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://www.v2ex.com/t/379577\" target=\"_blank\" rel=\"noopener\">https://www.v2ex.com/t/379577</a></p>\n","excerpt":"SSE （ Server-sent Events ）是 WebSocket 的一种轻量代替方案，使用 HTTP 协议。严格地说，HTTP 协议是没有办法做服务器推送的，但是当服务器向客户端声明接下来要发送流信息时，客户端就会保持连接打开，SSE 使用的就是这种原理。","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"基础mac环境的nginx学习笔记","date":"2018-01-26T02:32:33.000Z","path":"2018/01/26/mac-nginx-install/","text":"现在是一个大前端的时代nginx这些必学不可下面是的一些安装使用时记录的笔记 安装1brew install nginx 命令使用启动 nginx查看语法 nginx -t重启 nginx -s reload暂停 nginx -s stop 配置安装完查看nginx安装在哪里brew info nginx 123456789101112131415161718192021222324252627282930313233343536➜ blog git:(master) ✗ brew info nginxnginx: stable 1.12.2 (bottled), devel 1.13.8, HEADHTTP(S) server and reverse proxy, and IMAP/POP3 proxy serverhttps://nginx.org//usr/local/Cellar/nginx/1.12.2_1 (23 files, 1MB) * Poured from bottle on 2018-01-24 at 15:29:39From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/nginx.rb==&gt; DependenciesRequired: openssl ✔, pcre ✔Optional: passenger ✘==&gt; Options--with-debug Compile with support for debug log--with-gunzip Compile with support for gunzip module--with-passenger Compile with support for Phusion Passenger module--with-webdav Compile with support for WebDAV module--devel Install development version 1.13.8--HEAD Install HEAD version==&gt; CaveatsDocroot is: /usr/local/var/wwwThe default port has been set in /usr/local/etc/nginx/nginx.conf to 8080 so thatnginx can run without sudo.nginx will load all files in /usr/local/etc/nginx/servers/.To have launchd start nginx now and restart at login: brew services start nginxOr, if you don't want/need a background service you can just run: nginx➜ blog git:(master) ✗ 一般是在 下面这个路径下/usr/local/etc/nginx/nginx.conf修改配置的话只需要修改nginx.conf 这个配置就行了 nginx反向代理 upstream模块放在http里面 server外面 upstream hah { server api.douban.com; } server { location / { proxy_pass http://hah; #root html; #index index.html index.htm; } }","content":"<blockquote>\n<p>现在是一个大前端的时代nginx这些必学不可下面是的一些安装使用时记录的笔记</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令使用\"><a href=\"#命令使用\" class=\"headerlink\" title=\"命令使用\"></a>命令使用</h3><p>启动 nginx<br>查看语法 nginx -t<br>重启 nginx -s reload<br>暂停 nginx -s stop</p>\n<a id=\"more\"></a>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>安装完查看nginx安装在哪里<br>brew info nginx </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  blog git:(master) ✗ brew info nginx</span><br><span class=\"line\">nginx: stable 1.12.2 (bottled), devel 1.13.8, HEAD</span><br><span class=\"line\">HTTP(S) server and reverse proxy, and IMAP/POP3 proxy server</span><br><span class=\"line\">https://nginx.org/</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/Cellar/nginx/1.12.2_1 (23 files, 1MB) *</span><br><span class=\"line\">  Poured from bottle on 2018-01-24 at 15:29:39</span><br><span class=\"line\">From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/nginx.rb</span><br><span class=\"line\">==&gt; Dependencies</span><br><span class=\"line\">Required: openssl ✔, pcre ✔</span><br><span class=\"line\">Optional: passenger ✘</span><br><span class=\"line\">==&gt; Options</span><br><span class=\"line\">--with-debug</span><br><span class=\"line\">\tCompile with support <span class=\"keyword\">for</span> debug <span class=\"built_in\">log</span></span><br><span class=\"line\">--with-gunzip</span><br><span class=\"line\">\tCompile with support <span class=\"keyword\">for</span> gunzip module</span><br><span class=\"line\">--with-passenger</span><br><span class=\"line\">\tCompile with support <span class=\"keyword\">for</span> Phusion Passenger module</span><br><span class=\"line\">--with-webdav</span><br><span class=\"line\">\tCompile with support <span class=\"keyword\">for</span> WebDAV module</span><br><span class=\"line\">--devel</span><br><span class=\"line\">\tInstall development version 1.13.8</span><br><span class=\"line\">--HEAD</span><br><span class=\"line\">\tInstall HEAD version</span><br><span class=\"line\">==&gt; Caveats</span><br><span class=\"line\">Docroot is: /usr/<span class=\"built_in\">local</span>/var/www</span><br><span class=\"line\"></span><br><span class=\"line\">The default port has been <span class=\"built_in\">set</span> <span class=\"keyword\">in</span> /usr/<span class=\"built_in\">local</span>/etc/nginx/nginx.conf to 8080 so that</span><br><span class=\"line\">nginx can run without sudo.</span><br><span class=\"line\"></span><br><span class=\"line\">nginx will load all files <span class=\"keyword\">in</span> /usr/<span class=\"built_in\">local</span>/etc/nginx/servers/.</span><br><span class=\"line\"></span><br><span class=\"line\">To have launchd start nginx now and restart at login:</span><br><span class=\"line\">  brew services start nginx</span><br><span class=\"line\">Or, <span class=\"keyword\">if</span> you don<span class=\"string\">'t want/need a background service you can just run:</span></span><br><span class=\"line\"><span class=\"string\">  nginx</span></span><br><span class=\"line\"><span class=\"string\">➜  blog git:(master) ✗</span></span><br></pre></td></tr></table></figure>\n<p>一般是在 下面这个路径下<br>/usr/local/etc/nginx/nginx.conf<br>修改配置的话只需要修改nginx.conf 这个配置就行了</p>\n<h3 id=\"nginx反向代理\"><a href=\"#nginx反向代理\" class=\"headerlink\" title=\"nginx反向代理\"></a>nginx反向代理</h3><p> upstream模块放在http里面 server外面</p>\n<pre><code>upstream hah {\n    server api.douban.com;\n  }\n\n server {\n     location / {\n        proxy_pass http://hah;\n        #root   html;\n        #index  index.html index.htm;\n    }\n }\n</code></pre>","excerpt":"现在是一个大前端的时代nginx这些必学不可下面是的一些安装使用时记录的笔记 安装1brew install nginx 命令使用启动 nginx查看语法 nginx -t重启 nginx -s reload暂停 nginx -s stop","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"http://www.ding1996.cn/tags/mac/"}]},{"title":"socket.io学习笔记","date":"2018-01-25T09:22:38.000Z","path":"2018/01/25/it-socket-io/","text":"即时通信当下最火的技术莫非socket了，今天简单的看了下api写了个demo总结下这里我们结合使用express 安装npm install socket.io –save 下面是我们的目录结构 123456789101112.├── app.js├── index.html├── package.json├── pm2.json└── public ├── index.html ├── javascript │ └── socket.js └── style3 directories, 6 files 主要就用到了app.js和index.html app.js 1234567891011121314151617181920var app = require(\"express\")();var express = require(\"express\");var server = require(\"http\").Server(app);var io = require(\"socket.io\")(server);app.get(\"/\", function(req, res) &#123; res.sendFile(__dirname + \"/index.html\");&#125;);io.on(\"connection\", function(socket) &#123; socket.on(\"line\", function(data) &#123; console.log(JSON.stringify(\"浏览器给我发消息了\" + data)); io.sockets.emit(\"line\", &#123;msg:'我是广播消息'&#125;); &#125;);&#125;);server.listen(3000, function() &#123; console.log(\"server is running\");&#125;); index.html 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;dingsheng&lt;/h1&gt; &lt;script src=\"/socket.io/socket.io.js\"&gt;&lt;/script&gt; &lt;script&gt;var socket = io.connect(\"http://localhost:3000/\");socket.on(\"connect\", function() &#123; console.log(\"与服务器连接成功\");&#125;);socket.emit(\"line\", &#123; ding: \"sheng\" &#125;);socket.on('line',function(data)&#123; console.log(\"服务器发来消息\"+JSON.stringify(data))&#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 参考资料 https://www.bbsmax.com/A/QV5Z4lRVzy/ http://febuild.me/socket.iodoc/#!/serverapi https://github.com/nswbmw/N-chat 聊天室 实战","content":"<p>即时通信当下最火的技术莫非socket了，<br>今天简单的看了下api写了个demo总结下<br>这里我们结合使用express</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>npm install socket.io –save</p>\n<p>下面是我们的目录结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── app.js</span><br><span class=\"line\">├── index.html</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── pm2.json</span><br><span class=\"line\">└── public</span><br><span class=\"line\">    ├── index.html</span><br><span class=\"line\">    ├── javascript</span><br><span class=\"line\">    │   └── socket.js</span><br><span class=\"line\">    └── style</span><br><span class=\"line\"></span><br><span class=\"line\">3 directories, 6 files</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>主要就用到了app.js和index.html</p>\n<p>app.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>)();</span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>).Server(app);</span><br><span class=\"line\"><span class=\"keyword\">var</span> io = <span class=\"built_in\">require</span>(<span class=\"string\">\"socket.io\"</span>)(server);</span><br><span class=\"line\">app.get(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.sendFile(__dirname + <span class=\"string\">\"/index.html\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">io.on(<span class=\"string\">\"connection\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">socket</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  socket.on(<span class=\"string\">\"line\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">\"浏览器给我发消息了\"</span> + data));</span><br><span class=\"line\">    io.sockets.emit(<span class=\"string\">\"line\"</span>, &#123;<span class=\"attr\">msg</span>:<span class=\"string\">'我是广播消息'</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"server is running\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>dingsheng<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/socket.io/socket.io.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">var</span> socket = io.connect(<span class=\"string\">\"http://localhost:3000/\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">socket.on(<span class=\"string\">\"connect\"</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"与服务器连接成功\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">socket.emit(<span class=\"string\">\"line\"</span>, &#123; ding: <span class=\"string\">\"sheng\"</span> &#125;);</span></span><br><span class=\"line\"><span class=\"actionscript\">socket.on(<span class=\"string\">'line'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(data)</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"服务器发来消息\"</span>+<span class=\"built_in\">JSON</span>.stringify(data))</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p> <a href=\"https://www.bbsmax.com/A/QV5Z4lRVzy/\" target=\"_blank\" rel=\"noopener\">https://www.bbsmax.com/A/QV5Z4lRVzy/</a></p>\n<p> <a href=\"http://febuild.me/socket.iodoc/#!/serverapi\" target=\"_blank\" rel=\"noopener\">http://febuild.me/socket.iodoc/#!/serverapi</a> </p>\n<p> <a href=\"https://github.com/nswbmw/N-chat\" target=\"_blank\" rel=\"noopener\">https://github.com/nswbmw/N-chat</a> 聊天室 实战</p>\n","excerpt":"即时通信当下最火的技术莫非socket了，今天简单的看了下api写了个demo总结下这里我们结合使用express 安装npm install socket.io –save 下面是我们的目录结构 123456789101112.├── app.js├── index.html├── package.json├── pm2.json└── public ├── index.html ├── javascript │ └── socket.js └── style3 directories, 6 files","categories":[],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://www.ding1996.cn/tags/nodejs/"}]},{"title":"Html Css开发规范","date":"2018-01-23T03:04:22.000Z","path":"2018/01/23/it-project-guide/","text":"转载原文地址https://github.com/doyoe/html-css-guide HTML/CSS开发规范指南目录 规范概述 基本信息 通用约定 文档目录结构 分离 文件命名 缩进 编码 小写 注释 待办事项 行尾空格 省略嵌入式资源协议头 代码有效性 HTML约定 文档类型 省略type属性 省略属性值 用双引号包裹属性值 嵌套 标签闭合 多媒体替代方案 有效操作 按模块添加注释 格式 语义化标签 模块化 CSS约定 文件引用 命名-组成元素 命名-词汇规范 命名-缩写规范 命名-前缀规范 id与class 书写格式 规则与分号 0与单位 0与小数 去掉uri中引用资源的引号 HEX颜色值写法 属性书写顺序 注释规范 hack规范 避免低效率选择器 属性缩写与分拆 模块化 图像约定 图像压缩 背景图 前景图 Sprite 结语 规范概述规范的制定是我们长期以来对工作的积累与沉淀的产物，帮助我们更快、更好、更高效的完成繁重、复杂、多样化的任务，我们制作规范的主要目的在于： 降低每个组员介入项目的门槛成本； 提高工作效率及协同开发的便捷性； 高度统一的代码风格； 提供一整套HTML、CSS解决方案，来帮助开发人员快速做出高质量的符合要求的页面。 基本信息 规范名称 Cook 当前版本 v1.0 beta 规范发起 杜瑶(@doyoe) 参与人群 Qunar FED 最后更新 2015.03.20 通用约定 1.文档目录结构123456789101112131415161718192021222324252627282930313233343536|-- 项目名 |-- src 开发环境 |-- html 静态页面模板目录 |-- bgimg 背景图目录（假设有的话） |-- image 前景图目录（假设有的话） |-- font 字体目录（假设有的话） |-- scripts 脚本目录 |-- styles（Yo） 样式目录 |-- lib 基础库 |-- core 核心代码：reset |-- element 元素 |-- fragment 公用碎片 |-- layout 布局 |-- widget 组件 |-- usage 项目具体实现 |-- project 某个子项目 |-- core 核心代码：桥接lib中的core，可以进行项目级扩展 |-- fragment 项目公用碎片 |-- module 模块 |-- page page桥接文件目录：src-list |-- export page pack之后的文件目录 |-- prd 生产环境 |-- bgimg 背景图目录（假设有的话） |-- image 前景图目录（假设有的话） |-- font 字体目录（假设有的话） |-- scripts 脚本目录 |-- styles（Yo） 样式目录 |-- project1 子项目 |-- index.css |-- login.css |-- and etc... |-- project2 子项目 |-- index.css |-- login.css |-- and etc... |-- and etc... src, scripts, styles 三个目录是为了和现有项目保持一致，避免修改过大，所以保持不变。 html 目录，用于存放前端开发做的静态页面，以备查阅、备份、review或给后端套页面。 bgimg, image, font 三个目录在Qunar一般不会直接存在，因为我们有source服务器，这些资源都会在那上面管理；不过特殊情况也会有，比如一些独立的项目，没有使用source的，那么就需要遵循这样的目录划分。 至于 html, bgimg, image, font 这几个目录为什么没有加 s，主要是因为不希望大家去想某个目录是否为复数，简单点就好。 prd 为生产环境目录，以 xxx 项目中的一个子项目 mobile 为例，其生产环境中的某个CSS外链大致如下：//sitename.com/prd/styles/mobile/index.css 2.分离结构（HTML）、表现（CSS）、行为分离（JavaScript） 将结构与表现、行为分离，保证它们之间的最小耦合，这对前期开发和后期维护都至关重要。 3.文件命名 CSS模块文件，其文件名必须与模块名一致； 假定有这样一个模块： .m-detail { sRules; } .m-detail-hd { sRules; } .m-detail-bd { sRules; } .m-detail-ft { sRules; } 那么该模块的文件名应该为：m-detail.css CSS页面文件，其文件名必须与HTML文件名一致； 假定有一个HTML页面叫 product.html，那么其相对应的CSS页面文件名应该为：product.css 假定现在有一个 product.html，里面有2个模块： +&lt;section class=&quot;m-list&quot;&gt; +&lt;section class=&quot;m-info&quot;&gt; 那么开发人员能快速找到与该页面相关的3个直接CSS文件，包括：product.css, m-list.css, m-info.css 4.缩进使用tab（4个空格宽度）来进行缩进，可以在IDE里进行设置 5.编码 以 UTF-8 无 BOM 编码作为文件格式； 在HTML中文档中用 &lt;meta charset=&quot;utf-8&quot; /&gt; 来指定编码； 为每个CSS文档显示的定义编码，在文档首行定义 @charset &quot;utf-8&quot;; 在 Sass 中，如果文档中出现中文，却未显示定义编码，将会编译出错，为了统一各种写法，且提前规避错误几率，统一要求每个CSS文档都需要定义编码 6.小写 所有的HTML标签必须小写； 所有的HTML属性必须小写； 所有的样式名及规则必须小写。 7.注释尽可能的为你的代码写上注释。解释为什么要这样写，它是新鲜的方案还是解决了什么问题。 8.待办事项用 TODO 标示待办事项和正在开发的条目 &lt;!-- TODO: 图文混排 --&gt; &lt;div class=&quot;g-imgtext&quot;&gt; &lt;img src=&quot;1.png&quot; alt=&quot;&quot; /&gt; ... /* TODO: 图文混排 comm: g-imgtext */ .g-imgtext { sRules; } 9.行尾空格删除行尾空格，这些空格没有必要存在 10.省略嵌入式资源协议头省略图像、媒体文件、样式表和脚本等URL协议头部声明 ( http: , https: )。如果不是这两个声明的URL则不省略。 省略协议声明，使URL成相对地址，防止内容混淆问题和导致小文件重复下载（这个主要是指http和https交杂的场景中）。 不推荐： &lt;script src=&quot;http://www.google.com/js/gweb/analytics/autotrack.js&quot;&gt;&lt;/script&gt; 推荐： &lt;script src=&quot;//www.google.com/js/gweb/analytics/autotrack.js&quot;&gt;&lt;/script&gt; 不推荐： 123.example &#123; background: url(http://www.google.com/images/example);&#125; 推荐： 123.example &#123; background: url(//www.google.com/images/example);&#125; 注：省略协议头在IE7-8下会有一点小问题，外部CSS文件（link和@import）会被下载两遍，所以该条目的约定看具体项目。 11.代码有效性 使用 W3C HTML Validator 来验证你的HTML代码有效性； 使用 W3C CSS Validator 来验证你的CSS代码有效性。 代码验证不是最终目的，真的目的在于让开发者在经过多次的这种验证过程后，能够深刻理解到怎样的语法或写法是非标准和不推荐的，即使在某些场景下被迫要使用非标准写法，也可以做到心中有数。 HTML约定 1.文档类型 统一使用HTML5的标准文档类型：&lt;!DOCTYPE html&gt;； HTML5文档类型具备前后兼容的特质，并且易记易书写 在文档doctype申明之前，不允许加上任何非空字符； 任何出现在doctype申明之前的字符都将使得你的HTML文档进入非标准模式 不允许添加 &lt;meta&gt; 标签强制改变文档模式。 避免出现不可控的问题 2.省略type属性在调用CSS和JavaScript时，可以将type属性省略不写 不允许： &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;base.css&quot; /&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;base.js&quot;&gt;&lt;/script&gt; 应该： &lt;link rel=&quot;stylesheet&quot; href=&quot;base.css&quot; /&gt; &lt;script src=&quot;base.js&quot;&gt;&lt;/script&gt; 因为HTML5在引入CSS时，默认type值为text/css；在引入JavaScript时，默认type值为text/javascript 3.省略属性值非必须属性值可以省略 不允许： &lt;input type=&quot;text&quot; readonly=&quot;readonly&quot; /&gt; &lt;input type=&quot;text&quot; disabled=&quot;disabled&quot; /&gt; 应该： &lt;input type=&quot;text&quot; readonly /&gt; &lt;input type=&quot;text&quot; disabled /&gt; 这里的 readonly 和 disabled 属性的值是非必须的，可以省略不写，我们知道HTML5表单元素新增了很多类似的属性，如: required 4.用双引号包裹属性值所有的标签属性值必须要用双引号包裹，同时也不允许有的用双引号，有的用单引号的情况 不允许： &lt;a href=http://www.qunar.com class=home&gt;去哪儿网&lt;/a&gt; 应该： &lt;a href=&quot;http://www.qunar.com&quot; class=&quot;home&quot;&gt;去哪儿网&lt;/a&gt; 5.嵌套所有元素必须正确嵌套 不允许交叉； 不允许： &lt;span&gt;&lt;dfn&gt;交叉嵌套&lt;/span&gt;&lt;/dfn&gt; 应该： &lt;span&gt;&lt;dfn&gt;交叉嵌套&lt;/dfn&gt;&lt;/span&gt; 不允许非法的子元素嵌套。 不允许： &lt;ul&gt; &lt;h3&gt;xx列表&lt;/h3&gt; &lt;li&gt;asdasdsdasd&lt;/li&gt; &lt;li&gt;asdasdsdasd&lt;/li&gt; &lt;/ul&gt; 应该： &lt;div&gt; &lt;h3&gt;xx列表&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;asdasdsdasd&lt;/li&gt; &lt;li&gt;asdasdsdasd&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; 不推荐inline元素包含block元素； 不推荐： &lt;span&gt; &lt;h1&gt;这是一个块级h1元素&lt;/h1&gt; &lt;p&gt;这是一个块级p元素&lt;/p&gt; &lt;/span&gt; 推荐： &lt;div&gt; &lt;h1&gt;这是一个块级h1元素&lt;/h1&gt; &lt;p&gt;这是一个块级p元素&lt;/p&gt; &lt;/div&gt; 规则可参考： HTML4/XHTML1.0 Strict: 嵌套规则。 HTML5: 嵌套规则 举个例子，在HTML5中，a元素同时属于 Flow content, Phrasing content, Interactive content, Palpable content 4个分类，那些子元素是 phrasing 元素的元素可以是 a 的父元素，a 允许的子元素是以它的父元素允许的子元素为准，但不能包含 interactive 元素。 6.标签闭合所有标签必须闭合 不允许： &lt;div&gt;balabala... &lt;link rel=&quot;stylesheet&quot; href=&quot;*.css&quot;&gt; 应该： &lt;div&gt;balabala...&lt;/div&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;*.css&quot; /&gt; 虽然有些标记没有要求必须关闭，但是为了避免出错的几率，要求必须全部关闭，省去判断某标记是否需要关闭的时间 7.多媒体替代方案 为img元素加上alt属性； 为视频内容提供音轨替代； 为音频内容提供字母替代等等。 不推荐： &lt;img src=&quot;banner.jpg&quot; /&gt; 推荐： &lt;img src=&quot;banner.jpg&quot; alt=&quot;520即将到来，爱就大声说出来&quot; /&gt; alt属性的内容为对该图片的简要描述，这对于盲人用户和图像损毁都非常有意义，即无障碍。对于纯粹的装饰性图片，alt属性值可以留空，如 alt=”” 8.有效操作为表单元素label加上for属性 不允许： &lt;input type=&quot;radio&quot; name=&quot;color&quot; value=&quot;0&quot; /&gt;&lt;label&gt;蓝色&lt;/label&gt; &lt;input type=&quot;radio&quot; name=&quot;color&quot; value=&quot;1&quot; /&gt;&lt;label&gt;粉色&lt;/label&gt; 应该： &lt;input type=&quot;radio&quot; id=&quot;blue&quot; name=&quot;color&quot; value=&quot;0&quot; /&gt;&lt;label for=&quot;blue&quot;&gt;蓝色&lt;/label&gt; &lt;input type=&quot;radio&quot; id=&quot;pink&quot; name=&quot;color&quot; value=&quot;1&quot; /&gt;&lt;label for=&quot;pink&quot;&gt;粉色&lt;/label&gt; for属性能让点击label标签的时候，同时focus到对应的 input 和 textarea上，增加响应区域 9.按模块添加注释在每个模块开始和结束的地方添加注释 &lt;!-- 新闻列表模块 --&gt; &lt;div class=&quot;m-news g-mod&quot; ... &lt;!-- /新闻列表模块 --&gt; &lt;!-- 排行榜模块 --&gt; &lt;div class=&quot;m-topic g-mod&quot; ... &lt;!-- /排行榜模块 --&gt; 注释内容左右两边保留和注释符号有1个空格位，在注释内容内不允许再出现中划线“-”，某些浏览器会报错。 注释风格保持与原生HTML的语法相似：成对出现 &lt;!-- comment --&gt;&lt;!-- /comment --&gt; 10.格式 将每个块元素、列表元素或表格元素都放在新行； inline元素视情况换行，以长度不超过编辑器一屏为宜； 每个子元素都需要相对其父级缩进（参见缩进约定）。 不推荐： &lt;div&gt;&lt;h1&gt;asdas&lt;/h1&gt;&lt;p&gt;dff&lt;em&gt;asd&lt;/em&gt;asda&lt;span&gt;sds&lt;/span&gt;dasdasd&lt;/p&gt;&lt;/div&gt; 推荐： &lt;div&gt; &lt;h1&gt;asdas&lt;/h1&gt; &lt;p&gt;dff&lt;em&gt;asd&lt;/em&gt;asda&lt;span&gt;sds&lt;/span&gt;dasdasd&lt;/p&gt; &lt;/div&gt; 11.语义化标签 根据HTML元素的本身用途去使用它们； 禁止使用被废弃的用于表现的标签，如 center, font 等； 部分在XHTML1中被废弃的标签，在HTML5中被重新赋予了新的语义，在选用时请先弄清其语义，如:b, i, u等。 不允许： &lt;p&gt;标题&lt;/p&gt; 应该： &lt;h1&gt;标题&lt;/h1&gt; 虽然使用p标签，也可以通过CSS去定义它的外观和标题相同，但p标签本身的并不是表示标题，而是表示文本段落 参阅：HTML5 Elements 12.模块化 每个模块必须有一个模块名； 每个模块的基本组成部分应该一致； 模块的子节点类名需带上模块名（防止模块间嵌套时产生不必要的覆盖）； 孙辈节点无需再带模块名。 代码如： &lt;section class=&quot;m-detail&quot;&gt; &lt;header class=&quot;m-detail-hd&quot;&gt; &lt;h1 class=&quot;title&quot;&gt;模块标题&lt;/h1&gt; &lt;/header&gt; &lt;div class=&quot;m-detail-bd&quot;&gt; &lt;p class=&quot;info&quot;&gt;一些实际内容&lt;/p&gt; &lt;/div&gt; &lt;footer class=&quot;m-detail-ft&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;more&quot;&gt;更多&lt;/a&gt; &lt;/footer&gt; &lt;/section&gt; 其中 .m-detail-hd, .m-detail-bd, .m-detail-ft 为可选，视具体模块情况决定是否需要抽象为这种 头，中，尾 的结构 CSS约定 1.文件引用 一律使用link的方式调用外部样式 不允许在页面中使用 &lt;style&gt; 块； 不允许在 &lt;style&gt; 块中使用 @import； 不允许使用 style 属性写行内样式。 一般情况下，在页面中只允许使用 &lt;link /&gt; 标签来引用CSS文件， 2.命名-组成元素 命名必须由单词、中划线①或数字组成； 不允许使用拼音（约定俗成的除外，如：youku, baidu），尤其是缩写的拼音、拼音与英文的混合。 不推荐： .xiangqing { sRules; } .news_list { sRules; } .zhuti { sRules; } 推荐： .detail { sRules; } .news-list { sRules; } .topic { sRules; } ①我们使用中划线 “-” 作为连接字符，而不是下划线 “_”。 我们知道2种方式都有不少支持者，但 “-“ 能让你少按一次shift键，并且更符合CSS原生语法，所以我们只选一种目前业内普遍使用的方式 3.命名-词汇规范 不依据表现形式来命名； 可根据内容来命名； 可根据功能来命名。 不推荐： left, right, center, red, black 推荐： nav, aside, news, type, search 4.命名-缩写规范 保证缩写后还能较为清晰保持原单词所能表述的意思； 使用业界熟知的或者约定俗成的。 不推荐： navigation =&gt; navi header =&gt; head description =&gt; des 推荐： navigation =&gt; nav header =&gt; hd description =&gt; desc 5.命名-前缀规范 前缀 说明 示例 g- 全局通用样式命名，前缀g全称为global，一旦修改将影响全站样式 g-mod m- 模块命名方式 m-detail ui- 组件命名方式 ui-selector js- 所有用于纯交互的命名，不涉及任何样式规则。JSer拥有全部定义权限 js-switch 选择器必须是以某个前缀开头 不推荐： .info { sRules; } .current { sRules; } .news { sRules; } 因为这样将给我们带来不可预知的管理麻烦以及沉重的历史包袱。你永远也不会知道哪些样式名已经被用掉了，如果你是一个新人，你可能会遭遇，你每定义个样式名，都有同名的样式已存在，然后你只能是换样式名或者覆盖规则。 推荐： .m-detail .info { sRules; } .m-detail .current { sRules; } .m-detail .news { sRules; } 所有的选择器必须是以 g-, m-, ui- 等有前缀的选择符开头的，意思就是说所有的规则都必须在某个相对的作用域下才生效，尽可能减少全局污染。 js- 这种级别的className完全交由JSer自定义，但是命名的规则也可以保持跟重构一致，比如说不能使用拼音之类的 6.id与class重构工程师只允许使用class（因历史原因及大家的习惯做出妥协）。 7.书写格式 选择器与大括号之间保留一个空格； 分号之后保留一个空格； 逗号之后保留一个空格； 所有规则需换行； 多组选择器之间需换行。 不推荐： main{ display:inline-block; } h1,h2,h3{ margin:0; background-color:rgba(0,0,0,.5); } 推荐： main { display: inline-block; } h1, h2, h3 { margin: 0; background-color: rgba(0, 0, 0, .5); } 8.规则与分号每条规则结束后都必须加上分号 不推荐： body { margin: 0; padding: 0; font-size: 14px } 推荐： body { margin: 0; padding: 0; font-size: 14px; } 9.0与单位如果属性值为0，则不需要为0加单位 不推荐： body { margin: 0px; padding: 0px; } 推荐： body { margin: 0; padding: 0; } 10.0与小数如果是0开始的小数，前面的0可以省略不写 不推荐： body { opacity: 0.6; text-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5); } 推荐： body { opacity: .6; text-shadow: 1px 1px 5px rgba(0, 0, 0, .5); } 11.去掉uri中引用资源的引号不要在url()里对引用资源加引号 不推荐： body { background-image: url(&quot;sprites.png&quot;); } @import url(&quot;global.css&quot;); 推荐： body { background-image: url(sprites.png); } @import url(global.css); 12.HEX颜色值写法 将所有的颜色值小写； 可以缩写的缩写至3位。 不推荐： body { background-color: #FF0000; } 推荐： body { background-color: #f00; } 13.属性书写顺序 遵循先布局后内容的顺序。 123456789101112.g-box &#123; display: block; float: left; width: 500px; height: 200px; margin: 10px; padding: 10px; border: 10px solid; background: #aaa; color: #000; font: 14px/1.5 sans-serif;&#125; 这个应该好理解，比如优先布局，我们知道布局属性有 display, float, overflow 等等；内容次之，比如 color, font, text-align 之类。 组概念。 拿上例的代码来说，如果我们还需要进行定位及堆叠，规则我们可以改成如下： 12345678910111213141516.g-box &#123; display: block; position: relative; z-index: 2; top: 10px; left: 100px; float: left; width: 500px; height: 200px; margin: 10px; padding: 10px; border: 10px solid; background: #aaa; color: #000; font: 14px/1.5 sans-serif;&#125; 从代码中可以看到，我们直接将z-index, top, left 紧跟在 position 之后，因为这几个属性其实是一组的，如果去掉position，则后3条属性规则都将失效。 私有属性在前标准属性在后 123456.g-box &#123; -webkit-box-shadow: 1px 1px 5px rgba(0, 0, 0, .5); -moz-box-shadow: 1px 1px 5px rgba(0, 0, 0, .5); -o-box-shadow: 1px 1px 5px rgba(0, 0, 0, .5); box-shadow: 1px 1px 5px rgba(0, 0, 0, .5);&#125; 当有一天你的浏览器升级后，可能不再支持私有写法，那么这时写在后面的标准写法将生效，避免无法向后兼容的情况发生。 14.注释规范保持注释内容与星号之间有一个空格的距离 普通注释（单行） /* 普通注释 */ 区块注释 /** * 模块: m-detail * 描述：酒店详情模块 * 应用：page detail, info and etc...etc */ 有特殊作用的规则一定要有注释说明应用了高级技巧的地方一定要注释说明 15.hack规范 尽可能的减少对Hack的使用和依赖，如果在项目中对Hack的使用太多太复杂，对项目的维护将是一个巨大的挑战； 使用其它的解决方案代替Hack思路； 如果非Hack不可，选择稳定且常用并易于理解的。 123456789.test &#123; color: #000; /* For all */ color: #111\\9; /* For all IE */ color: #222\\0; /* For IE8 and later, Opera without Webkit */ color: #333\\9\\0; /* For IE8 and later */ color: #444\\0/; /* For IE8 and later */ *color: #666; /* For IE7 and earlier */ _color: #777; /* For IE6 and earlier */&#125; 严谨且长期的项目，针对IE可以使用条件注释作为预留Hack或者在当前使用 IE条件注释语法： &lt;!--[if &lt;keywords&gt;? IE &lt;version&gt;?]&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;*.css&quot; /&gt; &lt;![endif]--&gt; 语法说明： 12345678&lt;keywords&gt;if条件共包含6种选择方式：是否、大于、大于或等于、小于、小于或等于、非指定版本是否：指定是否IE或IE某个版本。关键字：空大于：选择大于指定版本的IE版本。关键字：gt（greater than）大于或等于：选择大于或等于指定版本的IE版本。关键字：gte（greater than or equal）小于：选择小于指定版本的IE版本。关键字：lt（less than）小于或等于：选择小于或等于指定版本的IE版本。关键字：lte（less than or equal）非指定版本：选择除指定版本外的所有IE版本。关键字：! 12&lt;version&gt;目前的常用IE版本为6.0及以上，推荐酌情忽略低版本，把精力花在为使用高级浏览器的用户提供更好的体验上，另从IE10开始已无此特性 16.避免低效率选择器 避免类型选择器 不允许： div#doc { sRules; } li.first { sRules; } 应该： #doc { sRules; } .first { sRules; } CSS选择器是由右到左进行解析的，所以 div#doc 本身并不会比 #doc 更快 避免多id选择器 不允许： #xxx #yyy { sRules; } 应该： #yyy { sRules; } 17.属性缩写与分拆 无继承关系时，使用缩写 不推荐： 123456body &#123; margin-top: 10px; margin-right: 10px; margin-bottom: 10px; margin-left: 10px;&#125; 推荐： 123body &#123; margin: 10px;&#125; 存在继承关系时，使用分拆方式 不推荐： 123456.m-detail &#123; font: bold 12px/1.5 arial, sans-serif;&#125;.m-detail .info &#123; font: normal 14px/1.5 arial, sans-serif;&#125; 要避免错误的覆盖： 123.m-detail .info &#123; font: 14px sans;&#125; 如果你只是想改字号和字体，然后写成了上面这样，这是错误的写法，因为 font 复合属性里的其他属性将会被重置为 user agent 的默认值，比如 font-weight 就会被重置为 normal。 推荐： 1234567.m-detail &#123; font: bold 12px/1.5 arial, sans-serif;&#125;.m-detail .info &#123; font-weight: normal; font-size: 14px;&#125; 在存在继承关系的情况下，只将需要变更的属性重定义，不进行缩写，避免不需要的重写的属性被覆盖定义 根据规则条数选择缩写和拆分 不推荐： 12345.m-detail &#123; border-width: 1px; border-style: solid; border-color: #000 #000 #f00;&#125; 推荐： 1234.m-detail &#123; border: 1px solid #000; border-bottom-color: #f00;&#125; 18.模块化 每个模块必须是一个独立的样式文件，文件名与模块名一致； 模块样式的选择器必须以模块名开头以作范围约定； 假定有一个模块如前文 HTML模块化，那么 m-detail.scss 的写法大致如下： .m-detail { background: #fff; color: #333; &amp;-hd { padding: 5px 10px; background: #eee; .title { background: #eee; } } &amp;-bd { padding: 10px; .info { font-size: 14px; text-indent: 2em; } } &amp;-ft { text-align: center; .more { color: blue; } } } 编译之后代码如下： .m-detail { background: #fff; color: #333; } .m-detail-hd { padding: 5px 10px; background: #eee; } .m-detail-hd .title { background: #eee; } .m-detail-bd { padding: 10px; } .m-detail-bd .info { font-size: 14px; text-indent: 2em; } .m-detail-ft { text-align: center; } .m-detail-ft .more { color: blue; } 任何超过3级的选择器，需要思考是否必要，是否有无歧义的，能唯一命中的更简短的写法 图像约定 1.图像压缩所有图片必须经过一定的压缩和优化才能发布 2.背景图 使用PNG格式而不是GIF格式，因为PNG格式色彩更丰富，还能提供更好的压缩比； 在需要兼容IE6的项目中，尽可能选择PNG8，而不是使用PNG24+滤镜。 3.前景图 内容图片建议使用JPG，可以拥有更好地显示效果； 装饰性图片使用PNG。 4.Sprite CSS Sprite是一种将数个图片合成为一张大图的技术（既可以是背景图也可以是前景图），然后通过偏移来进行图像位置选取； CSS Sprite可以减少http请求。 结语坚持一致性的原则。 一个团队的代码风格如果统一了，首先可以培养良好的协同和编码习惯，其次可以减少无谓的思考，再次可以提升代码质量和可维护性。 统一的代码风格，团队内部阅读或编辑代码，将会变得非常轻松，因为所有组员都处在一致思维环境中。","content":"<p>转载原文地址<a href=\"https://github.com/doyoe/html-css-guide\" target=\"_blank\" rel=\"noopener\">https://github.com/doyoe/html-css-guide</a></p>\n<h1 id=\"HTML-CSS开发规范指南\"><a href=\"#HTML-CSS开发规范指南\" class=\"headerlink\" title=\"HTML/CSS开发规范指南\"></a>HTML/CSS开发规范指南</h1><h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#intro\">规范概述</a></li>\n<li><a href=\"#profile\">基本信息</a></li>\n<li><a href=\"#general\">通用约定</a><ul>\n<li><a href=\"#directory\">文档目录结构</a></li>\n<li><a href=\"#separate\">分离</a></li>\n<li><a href=\"#file-name\">文件命名</a></li>\n<li><a href=\"#indentation\">缩进</a></li>\n<li><a id=\"more\"></a></li>\n<li><a href=\"#encoding\">编码</a></li>\n<li><a href=\"#lowercase\">小写</a></li>\n<li><a href=\"#comment\">注释</a></li>\n<li><a href=\"#todo\">待办事项</a></li>\n<li><a href=\"#end-line-space\">行尾空格</a></li>\n<li><a href=\"#protocol-relative-url\">省略嵌入式资源协议头</a></li>\n<li><a href=\"#validator\">代码有效性</a></li>\n</ul>\n</li>\n<li><a href=\"#html\">HTML约定</a><ul>\n<li><a href=\"#doctype\">文档类型</a></li>\n<li><a href=\"#type\">省略type属性</a></li>\n<li><a href=\"#attribute\">省略属性值</a></li>\n<li><a href=\"#quots\">用双引号包裹属性值</a></li>\n<li><a href=\"#nest\">嵌套</a></li>\n<li><a href=\"#close-tag\">标签闭合</a></li>\n<li><a href=\"#perceivable\">多媒体替代方案</a></li>\n<li><a href=\"#friendly\">有效操作</a></li>\n<li><a href=\"#html-comment\">按模块添加注释</a></li>\n<li><a href=\"#format\">格式</a></li>\n<li><a href=\"#semantic\">语义化标签</a></li>\n<li><a href=\"#html-module\">模块化</a></li>\n</ul>\n</li>\n<li><a href=\"#css\">CSS约定</a><ul>\n<li><a href=\"#link\">文件引用</a></li>\n<li><a href=\"#element\">命名-组成元素</a></li>\n<li><a href=\"#word\">命名-词汇规范</a></li>\n<li><a href=\"#abbr\">命名-缩写规范</a></li>\n<li><a href=\"#prefix\">命名-前缀规范</a></li>\n<li><a href=\"#id\">id与class</a></li>\n<li><a href=\"#packaging\">书写格式</a></li>\n<li><a href=\"#semicolon\">规则与分号</a></li>\n<li><a href=\"#unit\">0与单位</a></li>\n<li><a href=\"#decimal\">0与小数</a></li>\n<li><a href=\"#non-quotes\">去掉uri中引用资源的引号</a></li>\n<li><a href=\"#hex\">HEX颜色值写法</a></li>\n<li><a href=\"#order\">属性书写顺序</a></li>\n<li><a href=\"#css-comment\">注释规范</a></li>\n<li><a href=\"#hack\">hack规范</a></li>\n<li><a href=\"#low-selector\">避免低效率选择器</a></li>\n<li><a href=\"#override\">属性缩写与分拆</a></li>\n<li><a href=\"#css-module\">模块化</a></li>\n</ul>\n</li>\n<li><a href=\"#img\">图像约定</a><ul>\n<li><a href=\"#img-compress\">图像压缩</a></li>\n<li><a href=\"#background-image\">背景图</a></li>\n<li><a href=\"#image\">前景图</a></li>\n<li><a href=\"#sprite\">Sprite</a></li>\n</ul>\n</li>\n<li><a href=\"#end\">结语</a></li>\n</ol>\n<p><a name=\"intro\"></a></p>\n<h2 id=\"规范概述\"><a href=\"#规范概述\" class=\"headerlink\" title=\"规范概述\"></a>规范概述</h2><p>规范的制定是我们长期以来对工作的积累与沉淀的产物，帮助我们更快、更好、更高效的完成繁重、复杂、多样化的任务，我们制作规范的主要目的在于：</p>\n<ul>\n<li>降低每个组员介入项目的门槛成本；</li>\n<li>提高工作效率及协同开发的便捷性；</li>\n<li>高度统一的代码风格；</li>\n<li>提供一整套HTML、CSS解决方案，来帮助开发人员快速做出高质量的符合要求的页面。</li>\n</ul>\n<p><a name=\"profile\"></a></p>\n<h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><table>\n<thead>\n<tr>\n<th>规范名称</th>\n<th>Cook</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>当前版本</td>\n<td>v1.0 beta</td>\n</tr>\n<tr>\n<td>规范发起</td>\n<td><a href=\"http://weibo.com/doyoe\" target=\"_blank\" rel=\"noopener\">杜瑶(@doyoe)</a></td>\n</tr>\n<tr>\n<td>参与人群</td>\n<td>Qunar FED</td>\n</tr>\n<tr>\n<td>最后更新</td>\n<td>2015.03.20</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"general\"></a></p>\n<h2 id=\"通用约定\"><a href=\"#通用约定\" class=\"headerlink\" title=\"通用约定\"></a>通用约定</h2><p><a name=\"directory\"></a></p>\n<h3 id=\"1-文档目录结构\"><a href=\"#1-文档目录结构\" class=\"headerlink\" title=\"1.文档目录结构\"></a>1.文档目录结构</h3><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">|-- 项目名</span></span><br><span class=\"line\">\t<span class=\"string\">|-- src\t开发环境</span></span><br><span class=\"line\">\t\t<span class=\"string\">|-- html    静态页面模板目录</span></span><br><span class=\"line\">\t\t<span class=\"string\">|-- bgimg   背景图目录（假设有的话）</span></span><br><span class=\"line\">\t\t<span class=\"string\">|-- image   前景图目录（假设有的话）</span></span><br><span class=\"line\">\t\t<span class=\"string\">|-- font    字体目录（假设有的话）</span></span><br><span class=\"line\">\t\t<span class=\"string\">|-- scripts      脚本目录</span></span><br><span class=\"line\">\t\t<span class=\"string\">|-- styles（Yo）  样式目录</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">|-- lib   基础库</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">|-- core      核心代码：reset</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">|-- element   元素</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">|-- fragment  公用碎片</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">|-- layout    布局</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">|-- widget    组件</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">|-- usage  项目具体实现</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">|-- project 某个子项目</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">|-- core      核心代码：桥接lib中的core，可以进行项目级扩展</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">|-- fragment  项目公用碎片</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">|-- module    模块</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">|-- page      page桥接文件目录：src-list</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">|-- export    page pack之后的文件目录</span></span><br><span class=\"line\">\t<span class=\"string\">|-- prd\t生产环境</span></span><br><span class=\"line\">\t\t<span class=\"string\">|-- bgimg   背景图目录（假设有的话）</span></span><br><span class=\"line\">\t\t<span class=\"string\">|-- image   前景图目录（假设有的话）</span></span><br><span class=\"line\">\t\t<span class=\"string\">|-- font    字体目录（假设有的话）</span></span><br><span class=\"line\">\t\t<span class=\"string\">|-- scripts      脚本目录</span></span><br><span class=\"line\">\t\t<span class=\"string\">|-- styles（Yo）  样式目录</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">|-- project1 子项目</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">|-- index.css</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">|-- login.css</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">|-- and etc...</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">|-- project2 子项目</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">|-- index.css</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">|-- login.css</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">|-- and etc...</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">|-- and etc...</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>src</code>, <code>scripts</code>, <code>styles</code> 三个目录是为了和现有项目保持一致，避免修改过大，所以保持不变。</p>\n</blockquote>\n<blockquote>\n<p><code>html</code> 目录，用于存放前端开发做的静态页面，以备查阅、备份、review或给后端套页面。</p>\n</blockquote>\n<blockquote>\n<p><code>bgimg</code>, <code>image</code>, <code>font</code> 三个目录在Qunar一般不会直接存在，因为我们有source服务器，这些资源都会在那上面管理；不过特殊情况也会有，比如一些独立的项目，没有使用source的，那么就需要遵循这样的目录划分。</p>\n</blockquote>\n<blockquote>\n<p>至于 <code>html</code>, <code>bgimg</code>, <code>image</code>, <code>font</code> 这几个目录为什么没有加 <code>s</code>，主要是因为不希望大家去想某个目录是否为复数，简单点就好。</p>\n</blockquote>\n<blockquote>\n<p><code>prd</code> 为生产环境目录，以 <code>xxx</code> 项目中的一个子项目 <code>mobile</code> 为例，其生产环境中的某个CSS外链大致如下：<code>//sitename.com/prd/styles/mobile/index.css</code></p>\n</blockquote>\n<p><a name=\"separate\"></a></p>\n<h3 id=\"2-分离\"><a href=\"#2-分离\" class=\"headerlink\" title=\"2.分离\"></a>2.分离</h3><p>结构（HTML）、表现（CSS）、行为分离（JavaScript）</p>\n<blockquote>\n<p>将结构与表现、行为分离，保证它们之间的最小耦合，这对前期开发和后期维护都至关重要。</p>\n</blockquote>\n<p><a name=\"file-name\"></a></p>\n<h3 id=\"3-文件命名\"><a href=\"#3-文件命名\" class=\"headerlink\" title=\"3.文件命名\"></a>3.文件命名</h3><ul>\n<li>CSS模块文件，其文件名必须与模块名一致；</li>\n</ul>\n<p>假定有这样一个模块：</p>\n<pre><code>.m-detail { sRules; }\n.m-detail-hd { sRules; }\n.m-detail-bd { sRules; }\n.m-detail-ft { sRules; }\n</code></pre><blockquote>\n<p>那么该模块的文件名应该为：<code>m-detail.css</code></p>\n</blockquote>\n<ul>\n<li>CSS页面文件，其文件名必须与HTML文件名一致；</li>\n</ul>\n<blockquote>\n<p>假定有一个HTML页面叫 <code>product.html</code>，那么其相对应的CSS页面文件名应该为：<code>product.css</code></p>\n</blockquote>\n<blockquote>\n<p>假定现在有一个 <code>product.html</code>，里面有2个模块：</p>\n</blockquote>\n<pre><code>+&lt;section class=&quot;m-list&quot;&gt;\n+&lt;section class=&quot;m-info&quot;&gt;\n</code></pre><p>那么开发人员能快速找到与该页面相关的3个直接CSS文件，包括：<code>product.css</code>, <code>m-list.css</code>, <code>m-info.css</code></p>\n<p><a name=\"indentation\"></a></p>\n<h3 id=\"4-缩进\"><a href=\"#4-缩进\" class=\"headerlink\" title=\"4.缩进\"></a>4.缩进</h3><p>使用tab（4个空格宽度）来进行缩进，可以在IDE里进行设置</p>\n<p><a name=\"encoding\"></a></p>\n<h3 id=\"5-编码\"><a href=\"#5-编码\" class=\"headerlink\" title=\"5.编码\"></a>5.编码</h3><ul>\n<li>以 UTF-8 无 BOM 编码作为文件格式；</li>\n<li>在HTML中文档中用 <code>&lt;meta charset=&quot;utf-8&quot; /&gt;</code> 来指定编码；</li>\n<li>为每个CSS文档显示的定义编码，在文档首行定义 <code>@charset &quot;utf-8&quot;;</code></li>\n</ul>\n<blockquote>\n<p>在 Sass 中，如果文档中出现中文，却未显示定义编码，将会编译出错，为了统一各种写法，且提前规避错误几率，统一要求每个CSS文档都需要定义编码</p>\n</blockquote>\n<p><a name=\"lowercase\"></a></p>\n<h3 id=\"6-小写\"><a href=\"#6-小写\" class=\"headerlink\" title=\"6.小写\"></a>6.小写</h3><ul>\n<li>所有的HTML标签必须小写；</li>\n<li>所有的HTML属性必须小写；</li>\n<li>所有的样式名及规则必须小写。</li>\n</ul>\n<p><a name=\"comment\"></a></p>\n<h3 id=\"7-注释\"><a href=\"#7-注释\" class=\"headerlink\" title=\"7.注释\"></a>7.注释</h3><p>尽可能的为你的代码写上注释。解释为什么要这样写，它是新鲜的方案还是解决了什么问题。</p>\n<p><a name=\"todo\"></a></p>\n<h3 id=\"8-待办事项\"><a href=\"#8-待办事项\" class=\"headerlink\" title=\"8.待办事项\"></a>8.待办事项</h3><p>用 TODO 标示待办事项和正在开发的条目</p>\n<pre><code>&lt;!-- TODO: 图文混排 --&gt;\n&lt;div class=&quot;g-imgtext&quot;&gt;\n&lt;img src=&quot;1.png&quot; alt=&quot;&quot; /&gt;\n...\n\n/* TODO: 图文混排 comm: g-imgtext */\n.g-imgtext { sRules; }\n</code></pre><p><a name=\"end-line-space\"></a></p>\n<h3 id=\"9-行尾空格\"><a href=\"#9-行尾空格\" class=\"headerlink\" title=\"9.行尾空格\"></a>9.行尾空格</h3><p>删除行尾空格，这些空格没有必要存在</p>\n<p><a name=\"protocol-relative-url\"></a></p>\n<h3 id=\"10-省略嵌入式资源协议头\"><a href=\"#10-省略嵌入式资源协议头\" class=\"headerlink\" title=\"10.省略嵌入式资源协议头\"></a>10.省略嵌入式资源协议头</h3><p>省略图像、媒体文件、样式表和脚本等URL协议头部声明 ( http: , https: )。如果不是这两个声明的URL则不省略。</p>\n<p>省略协议声明，使URL成相对地址，防止内容混淆问题和导致小文件重复下载（这个主要是指http和https交杂的场景中）。</p>\n<p>不推荐：</p>\n<pre><code>&lt;script src=&quot;http://www.google.com/js/gweb/analytics/autotrack.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>推荐：</p>\n<pre><code>&lt;script src=&quot;//www.google.com/js/gweb/analytics/autotrack.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>不推荐：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.example</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(http://www.google.com/images/example);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>推荐：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.example</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(//www.google.com/images/example);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：省略协议头在IE7-8下会有一点小问题，外部CSS文件（link和@import）会被下载两遍，所以该条目的约定看具体项目。</p>\n</blockquote>\n<p><a name=\"validator\"></a></p>\n<h3 id=\"11-代码有效性\"><a href=\"#11-代码有效性\" class=\"headerlink\" title=\"11.代码有效性\"></a>11.代码有效性</h3><ul>\n<li>使用 <a href=\"http://validator.w3.org/\" target=\"_blank\" rel=\"noopener\">W3C HTML Validator</a> 来验证你的HTML代码有效性；</li>\n<li>使用 <a href=\"http://jigsaw.w3.org/css-validator/\" target=\"_blank\" rel=\"noopener\">W3C CSS Validator</a> 来验证你的CSS代码有效性。</li>\n</ul>\n<blockquote>\n<p>代码验证不是最终目的，真的目的在于让开发者在经过多次的这种验证过程后，能够深刻理解到怎样的语法或写法是非标准和不推荐的，即使在某些场景下被迫要使用非标准写法，也可以做到心中有数。</p>\n</blockquote>\n<p><a name=\"html\"></a></p>\n<h2 id=\"HTML约定\"><a href=\"#HTML约定\" class=\"headerlink\" title=\"HTML约定\"></a>HTML约定</h2><p><a name=\"doctype\"></a></p>\n<h3 id=\"1-文档类型\"><a href=\"#1-文档类型\" class=\"headerlink\" title=\"1.文档类型\"></a>1.文档类型</h3><ul>\n<li>统一使用HTML5的标准文档类型：<code>&lt;!DOCTYPE html&gt;</code>；</li>\n</ul>\n<blockquote>\n<p>HTML5文档类型具备前后兼容的特质，并且易记易书写</p>\n</blockquote>\n<ul>\n<li>在文档doctype申明之前，不允许加上任何非空字符；</li>\n</ul>\n<blockquote>\n<p>任何出现在doctype申明之前的字符都将使得你的HTML文档进入非标准模式</p>\n</blockquote>\n<ul>\n<li>不允许添加 <code>&lt;meta&gt;</code> 标签强制改变文档模式。</li>\n</ul>\n<blockquote>\n<p>避免出现不可控的问题</p>\n</blockquote>\n<p><a name=\"type\"></a></p>\n<h3 id=\"2-省略type属性\"><a href=\"#2-省略type属性\" class=\"headerlink\" title=\"2.省略type属性\"></a>2.省略type属性</h3><p>在调用CSS和JavaScript时，可以将type属性省略不写</p>\n<p>不允许：</p>\n<pre><code>&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;base.css&quot; /&gt;\n&lt;script type=&quot;text/javascript&quot; src=&quot;base.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>应该：</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;base.css&quot; /&gt;\n&lt;script src=&quot;base.js&quot;&gt;&lt;/script&gt;\n</code></pre><blockquote>\n<p>因为HTML5在引入CSS时，默认type值为text/css；在引入JavaScript时，默认type值为text/javascript</p>\n</blockquote>\n<p><a name=\"attribute\"></a></p>\n<h3 id=\"3-省略属性值\"><a href=\"#3-省略属性值\" class=\"headerlink\" title=\"3.省略属性值\"></a>3.省略属性值</h3><p>非必须属性值可以省略</p>\n<p>不允许：</p>\n<pre><code>&lt;input type=&quot;text&quot; readonly=&quot;readonly&quot; /&gt;\n&lt;input type=&quot;text&quot; disabled=&quot;disabled&quot; /&gt;\n</code></pre><p>应该：</p>\n<pre><code>&lt;input type=&quot;text&quot; readonly /&gt;\n&lt;input type=&quot;text&quot; disabled /&gt;\n</code></pre><blockquote>\n<p>这里的 readonly 和 disabled 属性的值是非必须的，可以省略不写，我们知道HTML5表单元素新增了很多类似的属性，如: required</p>\n</blockquote>\n<p><a name=\"quots\"></a></p>\n<h3 id=\"4-用双引号包裹属性值\"><a href=\"#4-用双引号包裹属性值\" class=\"headerlink\" title=\"4.用双引号包裹属性值\"></a>4.用双引号包裹属性值</h3><p>所有的标签属性值必须要用双引号包裹，同时也不允许有的用双引号，有的用单引号的情况</p>\n<p>不允许：</p>\n<pre><code>&lt;a href=http://www.qunar.com class=home&gt;去哪儿网&lt;/a&gt;\n</code></pre><p>应该：</p>\n<pre><code>&lt;a href=&quot;http://www.qunar.com&quot; class=&quot;home&quot;&gt;去哪儿网&lt;/a&gt;\n</code></pre><p><a name=\"nest\"></a></p>\n<h3 id=\"5-嵌套\"><a href=\"#5-嵌套\" class=\"headerlink\" title=\"5.嵌套\"></a>5.嵌套</h3><p>所有元素必须正确嵌套</p>\n<ul>\n<li>不允许交叉；</li>\n</ul>\n<p>不允许：</p>\n<pre><code>&lt;span&gt;&lt;dfn&gt;交叉嵌套&lt;/span&gt;&lt;/dfn&gt;\n</code></pre><p>应该：</p>\n<pre><code>&lt;span&gt;&lt;dfn&gt;交叉嵌套&lt;/dfn&gt;&lt;/span&gt;\n</code></pre><ul>\n<li>不允许非法的子元素嵌套。</li>\n</ul>\n<p>不允许：</p>\n<pre><code>&lt;ul&gt;\n    &lt;h3&gt;xx列表&lt;/h3&gt;\n    &lt;li&gt;asdasdsdasd&lt;/li&gt;\n    &lt;li&gt;asdasdsdasd&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre><p>应该：</p>\n<pre><code>&lt;div&gt;\n    &lt;h3&gt;xx列表&lt;/h3&gt;\n    &lt;ul&gt;\n        &lt;li&gt;asdasdsdasd&lt;/li&gt;\n        &lt;li&gt;asdasdsdasd&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre><ul>\n<li>不推荐inline元素包含block元素；</li>\n</ul>\n<p>不推荐：</p>\n<pre><code>&lt;span&gt;\n    &lt;h1&gt;这是一个块级h1元素&lt;/h1&gt;\n    &lt;p&gt;这是一个块级p元素&lt;/p&gt;\n&lt;/span&gt;\n</code></pre><p>推荐：</p>\n<pre><code>&lt;div&gt;\n    &lt;h1&gt;这是一个块级h1元素&lt;/h1&gt;\n    &lt;p&gt;这是一个块级p元素&lt;/p&gt;\n&lt;/div&gt;\n</code></pre><blockquote>\n<p>规则可参考：</p>\n</blockquote>\n<blockquote>\n<p>HTML4/XHTML1.0 Strict: <a href=\"http://www.cs.tut.fi/~jkorpela/html/strict.html\" target=\"_blank\" rel=\"noopener\">嵌套规则</a>。</p>\n<p>HTML5: <a href=\"http://www.w3.org/TR/html5/\" target=\"_blank\" rel=\"noopener\">嵌套规则</a></p>\n<p>举个例子，在HTML5中，a元素同时属于 Flow content, Phrasing content, Interactive content, Palpable content 4个分类，那些子元素是 phrasing 元素的元素可以是 a 的父元素，a 允许的子元素是以它的父元素允许的子元素为准，但不能包含 interactive 元素。</p>\n</blockquote>\n<p><a name=\"close-tag\"></a></p>\n<h3 id=\"6-标签闭合\"><a href=\"#6-标签闭合\" class=\"headerlink\" title=\"6.标签闭合\"></a>6.标签闭合</h3><p>所有标签必须闭合</p>\n<p>不允许：</p>\n<pre><code>&lt;div&gt;balabala...\n&lt;link rel=&quot;stylesheet&quot; href=&quot;*.css&quot;&gt;\n</code></pre><p>应该：</p>\n<pre><code>&lt;div&gt;balabala...&lt;/div&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;*.css&quot; /&gt;\n</code></pre><blockquote>\n<p>虽然有些标记没有要求必须关闭，但是为了避免出错的几率，要求必须全部关闭，省去判断某标记是否需要关闭的时间</p>\n</blockquote>\n<p><a name=\"perceivable\"></a></p>\n<h3 id=\"7-多媒体替代方案\"><a href=\"#7-多媒体替代方案\" class=\"headerlink\" title=\"7.多媒体替代方案\"></a>7.多媒体替代方案</h3><ul>\n<li>为img元素加上alt属性；</li>\n<li>为视频内容提供音轨替代；</li>\n<li>为音频内容提供字母替代等等。</li>\n</ul>\n<p>不推荐：</p>\n<pre><code>&lt;img src=&quot;banner.jpg&quot; /&gt;\n</code></pre><p>推荐：</p>\n<pre><code>&lt;img src=&quot;banner.jpg&quot; alt=&quot;520即将到来，爱就大声说出来&quot; /&gt;\n</code></pre><blockquote>\n<p>alt属性的内容为对该图片的简要描述，这对于盲人用户和图像损毁都非常有意义，即无障碍。对于纯粹的装饰性图片，alt属性值可以留空，如 alt=””</p>\n</blockquote>\n<p><a name=\"friendly\"></a></p>\n<h3 id=\"8-有效操作\"><a href=\"#8-有效操作\" class=\"headerlink\" title=\"8.有效操作\"></a>8.有效操作</h3><p>为表单元素label加上for属性</p>\n<p>不允许：</p>\n<pre><code>&lt;input type=&quot;radio&quot; name=&quot;color&quot; value=&quot;0&quot; /&gt;&lt;label&gt;蓝色&lt;/label&gt;\n&lt;input type=&quot;radio&quot; name=&quot;color&quot; value=&quot;1&quot; /&gt;&lt;label&gt;粉色&lt;/label&gt;\n</code></pre><p>应该：</p>\n<pre><code>&lt;input type=&quot;radio&quot; id=&quot;blue&quot; name=&quot;color&quot; value=&quot;0&quot; /&gt;&lt;label for=&quot;blue&quot;&gt;蓝色&lt;/label&gt;\n&lt;input type=&quot;radio&quot; id=&quot;pink&quot; name=&quot;color&quot; value=&quot;1&quot; /&gt;&lt;label for=&quot;pink&quot;&gt;粉色&lt;/label&gt;\n</code></pre><blockquote>\n<p>for属性能让点击label标签的时候，同时focus到对应的 input 和 textarea上，增加响应区域</p>\n</blockquote>\n<p><a name=\"html-comment\"></a></p>\n<h3 id=\"9-按模块添加注释\"><a href=\"#9-按模块添加注释\" class=\"headerlink\" title=\"9.按模块添加注释\"></a>9.按模块添加注释</h3><p>在每个模块开始和结束的地方添加注释</p>\n<pre><code>&lt;!-- 新闻列表模块 --&gt;\n&lt;div class=&quot;m-news g-mod&quot;\n...\n&lt;!-- /新闻列表模块 --&gt;\n\n&lt;!-- 排行榜模块 --&gt;\n&lt;div class=&quot;m-topic g-mod&quot;\n...\n&lt;!-- /排行榜模块 --&gt;\n</code></pre><blockquote>\n<p>注释内容左右两边保留和注释符号有1个空格位，在注释内容内不允许再出现中划线“-”，某些浏览器会报错。</p>\n<p>注释风格保持与原生HTML的语法相似：成对出现 <code>&lt;!-- comment --&gt;&lt;!-- /comment --&gt;</code></p>\n</blockquote>\n<p><a name=\"format\"></a></p>\n<h3 id=\"10-格式\"><a href=\"#10-格式\" class=\"headerlink\" title=\"10.格式\"></a>10.格式</h3><ul>\n<li>将每个块元素、列表元素或表格元素都放在新行；</li>\n<li>inline元素视情况换行，以长度不超过编辑器一屏为宜；</li>\n<li>每个子元素都需要相对其父级缩进（参见<a href=\"#indentation\">缩进约定</a>）。</li>\n</ul>\n<p>不推荐：</p>\n<pre><code>&lt;div&gt;&lt;h1&gt;asdas&lt;/h1&gt;&lt;p&gt;dff&lt;em&gt;asd&lt;/em&gt;asda&lt;span&gt;sds&lt;/span&gt;dasdasd&lt;/p&gt;&lt;/div&gt;\n</code></pre><p>推荐：</p>\n<pre><code>&lt;div&gt;\n    &lt;h1&gt;asdas&lt;/h1&gt;\n    &lt;p&gt;dff&lt;em&gt;asd&lt;/em&gt;asda&lt;span&gt;sds&lt;/span&gt;dasdasd&lt;/p&gt;\n&lt;/div&gt;\n</code></pre><p><a name=\"semantic\"></a></p>\n<h3 id=\"11-语义化标签\"><a href=\"#11-语义化标签\" class=\"headerlink\" title=\"11.语义化标签\"></a>11.语义化标签</h3><ul>\n<li>根据HTML元素的本身用途去使用它们；</li>\n<li>禁止使用被废弃的用于表现的标签，如 center, font 等；</li>\n<li>部分在XHTML1中被废弃的标签，在HTML5中被重新赋予了新的语义，在选用时请先弄清其语义，如:b, i, u等。</li>\n</ul>\n<p>不允许：</p>\n<pre><code>&lt;p&gt;标题&lt;/p&gt;\n</code></pre><p>应该：</p>\n<pre><code>&lt;h1&gt;标题&lt;/h1&gt;\n</code></pre><blockquote>\n<p>虽然使用p标签，也可以通过CSS去定义它的外观和标题相同，但p标签本身的并不是表示标题，而是表示文本段落</p>\n</blockquote>\n<blockquote>\n<p>参阅：<a href=\"http://www.w3.org/TR/html5/\" target=\"_blank\" rel=\"noopener\">HTML5 Elements</a></p>\n</blockquote>\n<p><a name=\"html-module\"></a></p>\n<h3 id=\"12-模块化\"><a href=\"#12-模块化\" class=\"headerlink\" title=\"12.模块化\"></a>12.模块化</h3><ul>\n<li>每个模块必须有一个模块名；</li>\n<li>每个模块的基本组成部分应该一致；</li>\n<li>模块的子节点类名需带上模块名（防止模块间嵌套时产生不必要的覆盖）；</li>\n<li>孙辈节点无需再带模块名。</li>\n</ul>\n<p>代码如：</p>\n<pre><code>&lt;section class=&quot;m-detail&quot;&gt;\n    &lt;header class=&quot;m-detail-hd&quot;&gt;\n        &lt;h1 class=&quot;title&quot;&gt;模块标题&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;div class=&quot;m-detail-bd&quot;&gt;\n        &lt;p class=&quot;info&quot;&gt;一些实际内容&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;footer class=&quot;m-detail-ft&quot;&gt;\n        &lt;a href=&quot;#&quot; class=&quot;more&quot;&gt;更多&lt;/a&gt;\n    &lt;/footer&gt;\n&lt;/section&gt;\n</code></pre><blockquote>\n<p>其中 <code>.m-detail-hd</code>, <code>.m-detail-bd</code>, <code>.m-detail-ft</code> 为可选，视具体模块情况决定是否需要抽象为这种 <strong>头，中，尾</strong> 的结构</p>\n</blockquote>\n<p><a name=\"css\"></a></p>\n<h2 id=\"CSS约定\"><a href=\"#CSS约定\" class=\"headerlink\" title=\"CSS约定\"></a>CSS约定</h2><p><a name=\"link\"></a></p>\n<h3 id=\"1-文件引用\"><a href=\"#1-文件引用\" class=\"headerlink\" title=\"1.文件引用\"></a>1.文件引用</h3><ul>\n<li>一律使用link的方式调用外部样式</li>\n<li>不允许在页面中使用 <code>&lt;style&gt;</code> 块；</li>\n<li>不允许在 <code>&lt;style&gt;</code> 块中使用 <code>@import</code>；</li>\n<li>不允许使用 <code>style</code> 属性写行内样式。</li>\n</ul>\n<blockquote>\n<p>一般情况下，在页面中只允许使用 <code>&lt;link /&gt;</code> 标签来引用CSS文件，</p>\n</blockquote>\n<p><a name=\"element\"></a></p>\n<h3 id=\"2-命名-组成元素\"><a href=\"#2-命名-组成元素\" class=\"headerlink\" title=\"2.命名-组成元素\"></a>2.命名-组成元素</h3><ul>\n<li>命名必须由单词、中划线①或数字组成；</li>\n<li>不允许使用拼音（约定俗成的除外，如：youku, baidu），尤其是缩写的拼音、拼音与英文的混合。</li>\n</ul>\n<p>不推荐：</p>\n<pre><code>.xiangqing { sRules; }\n.news_list { sRules; }\n.zhuti { sRules; }\n</code></pre><p>推荐：</p>\n<pre><code>.detail { sRules; }\n.news-list { sRules; }\n.topic { sRules; }\n</code></pre><blockquote>\n<p>①我们使用中划线 “-” 作为连接字符，而不是下划线 “_”。</p>\n<p>我们知道2种方式都有不少支持者，但 “-“ 能让你少按一次shift键，并且更符合CSS原生语法，所以我们只选一种目前业内普遍使用的方式</p>\n</blockquote>\n<p><a name=\"word\"></a></p>\n<h3 id=\"3-命名-词汇规范\"><a href=\"#3-命名-词汇规范\" class=\"headerlink\" title=\"3.命名-词汇规范\"></a>3.命名-词汇规范</h3><ul>\n<li>不依据表现形式来命名；</li>\n<li>可根据内容来命名；</li>\n<li>可根据功能来命名。</li>\n</ul>\n<p>不推荐：</p>\n<pre><code>left, right, center, red, black\n</code></pre><p>推荐：</p>\n<pre><code>nav, aside, news, type, search\n</code></pre><p><a name=\"abbr\"></a></p>\n<h3 id=\"4-命名-缩写规范\"><a href=\"#4-命名-缩写规范\" class=\"headerlink\" title=\"4.命名-缩写规范\"></a>4.命名-缩写规范</h3><ul>\n<li>保证缩写后还能较为清晰保持原单词所能表述的意思；</li>\n<li>使用业界熟知的或者约定俗成的。</li>\n</ul>\n<p>不推荐：</p>\n<pre><code>navigation   =&gt;  navi\nheader       =&gt;  head\ndescription  =&gt;  des\n</code></pre><p>推荐：</p>\n<pre><code>navigation   =&gt;  nav\nheader       =&gt;  hd\ndescription  =&gt;  desc\n</code></pre><p><a name=\"prefix\"></a></p>\n<h3 id=\"5-命名-前缀规范\"><a href=\"#5-命名-前缀规范\" class=\"headerlink\" title=\"5.命名-前缀规范\"></a>5.命名-前缀规范</h3><table>\n<thead>\n<tr>\n<th>前缀</th>\n<th>说明</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>g-</td>\n<td>全局通用样式命名，前缀g全称为global，一旦修改将影响全站样式</td>\n<td>g-mod</td>\n</tr>\n<tr>\n<td>m-</td>\n<td>模块命名方式</td>\n<td>m-detail</td>\n</tr>\n<tr>\n<td>ui-</td>\n<td>组件命名方式</td>\n<td>ui-selector</td>\n</tr>\n<tr>\n<td>js-</td>\n<td>所有用于纯交互的命名，不涉及任何样式规则。JSer拥有全部定义权限</td>\n<td>js-switch</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>选择器必须是以某个前缀开头</li>\n</ul>\n<p>不推荐：</p>\n<pre><code>.info { sRules; }\n.current { sRules; }\n.news { sRules; }\n</code></pre><blockquote>\n<p>因为这样将给我们带来不可预知的管理麻烦以及沉重的历史包袱。你永远也不会知道哪些样式名已经被用掉了，如果你是一个新人，你可能会遭遇，你每定义个样式名，都有同名的样式已存在，然后你只能是换样式名或者覆盖规则。</p>\n</blockquote>\n<p>推荐：</p>\n<pre><code>.m-detail .info { sRules; }\n.m-detail .current { sRules; }\n.m-detail .news { sRules; }\n</code></pre><blockquote>\n<p>所有的选择器必须是以 g-, m-, ui- 等有前缀的选择符开头的，意思就是说所有的规则都必须在某个相对的作用域下才生效，尽可能减少全局污染。</p>\n</blockquote>\n<p>js- 这种级别的className完全交由JSer自定义，但是命名的规则也可以保持跟重构一致，比如说不能使用拼音之类的</p>\n<p><a name=\"id\"></a></p>\n<h3 id=\"6-id与class\"><a href=\"#6-id与class\" class=\"headerlink\" title=\"6.id与class\"></a>6.id与class</h3><p>重构工程师只允许使用class（因历史原因及大家的习惯做出妥协）。</p>\n<p><a name=\"packaging\"></a></p>\n<h3 id=\"7-书写格式\"><a href=\"#7-书写格式\" class=\"headerlink\" title=\"7.书写格式\"></a>7.书写格式</h3><ul>\n<li>选择器与大括号之间保留一个空格；</li>\n<li>分号之后保留一个空格；</li>\n<li>逗号之后保留一个空格；</li>\n<li>所有规则需换行；</li>\n<li>多组选择器之间需换行。</li>\n</ul>\n<p>不推荐：</p>\n<pre><code>main{\n    display:inline-block;\n}\nh1,h2,h3{\n    margin:0;\n    background-color:rgba(0,0,0,.5);\n}\n</code></pre><p>推荐：</p>\n<pre><code>main {\n    display: inline-block;\n}\nh1,\nh2,\nh3 {\n    margin: 0;\n    background-color: rgba(0, 0, 0, .5);\n}\n</code></pre><p><a name=\"semicolon\"></a></p>\n<h3 id=\"8-规则与分号\"><a href=\"#8-规则与分号\" class=\"headerlink\" title=\"8.规则与分号\"></a>8.规则与分号</h3><p>每条规则结束后都必须加上分号</p>\n<p>不推荐：</p>\n<pre><code>body {\n    margin: 0;\n    padding: 0;\n    font-size: 14px\n}\n</code></pre><p>推荐：</p>\n<pre><code>body {\n    margin: 0;\n    padding: 0;\n    font-size: 14px;\n}\n</code></pre><p><a name=\"unit\"></a></p>\n<h3 id=\"9-0与单位\"><a href=\"#9-0与单位\" class=\"headerlink\" title=\"9.0与单位\"></a>9.0与单位</h3><p>如果属性值为0，则不需要为0加单位</p>\n<p>不推荐：</p>\n<pre><code>body {\n    margin: 0px;\n    padding: 0px;\n}\n</code></pre><p>推荐：</p>\n<pre><code>body {\n    margin: 0;\n    padding: 0;\n}\n</code></pre><p><a name=\"decimal\"></a></p>\n<h3 id=\"10-0与小数\"><a href=\"#10-0与小数\" class=\"headerlink\" title=\"10.0与小数\"></a>10.0与小数</h3><p>如果是0开始的小数，前面的0可以省略不写</p>\n<p>不推荐：</p>\n<pre><code>body {\n    opacity: 0.6;\n    text-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);\n}\n</code></pre><p>推荐：</p>\n<pre><code>body {\n    opacity: .6;\n    text-shadow: 1px 1px 5px rgba(0, 0, 0, .5);\n}\n</code></pre><p><a name=\"non-quotes\"></a></p>\n<h3 id=\"11-去掉uri中引用资源的引号\"><a href=\"#11-去掉uri中引用资源的引号\" class=\"headerlink\" title=\"11.去掉uri中引用资源的引号\"></a>11.去掉uri中引用资源的引号</h3><p>不要在url()里对引用资源加引号</p>\n<p>不推荐：</p>\n<pre><code>body {\n    background-image: url(&quot;sprites.png&quot;);\n}\n@import url(&quot;global.css&quot;);\n</code></pre><p>推荐：</p>\n<pre><code>body {\n    background-image: url(sprites.png);\n}\n@import url(global.css);\n</code></pre><p><a name=\"hex\"></a></p>\n<h3 id=\"12-HEX颜色值写法\"><a href=\"#12-HEX颜色值写法\" class=\"headerlink\" title=\"12.HEX颜色值写法\"></a>12.HEX颜色值写法</h3><ul>\n<li>将所有的颜色值小写；</li>\n<li>可以缩写的缩写至3位。</li>\n</ul>\n<p>不推荐：</p>\n<pre><code>body {\n    background-color: #FF0000;\n}\n</code></pre><p>推荐：</p>\n<pre><code>body {\n    background-color: #f00;\n}\n</code></pre><p><a name=\"order\"></a></p>\n<h3 id=\"13-属性书写顺序\"><a href=\"#13-属性书写顺序\" class=\"headerlink\" title=\"13.属性书写顺序\"></a>13.属性书写顺序</h3><ul>\n<li>遵循先布局后内容的顺序。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.g-box</span> &#123;</span><br><span class=\"line\">　　　<span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">　　　<span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">　　　<span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">border</span>: <span class=\"number\">10px</span> solid;</span><br><span class=\"line\">　　　<span class=\"attribute\">background</span>: <span class=\"number\">#aaa</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">font</span>: <span class=\"number\">14px</span>/<span class=\"number\">1.5</span> sans-serif;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这个应该好理解，比如优先布局，我们知道布局属性有 display, float, overflow 等等；内容次之，比如 color, font, text-align 之类。</p>\n</blockquote>\n<ul>\n<li>组概念。</li>\n</ul>\n<p>拿上例的代码来说，如果我们还需要进行定位及堆叠，规则我们可以改成如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.g-box</span> &#123;</span><br><span class=\"line\">　　　<span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">　　　<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">　　　<span class=\"attribute\">z-index</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">　　　<span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">border</span>: <span class=\"number\">10px</span> solid;</span><br><span class=\"line\">　　　<span class=\"attribute\">background</span>: <span class=\"number\">#aaa</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">font</span>: <span class=\"number\">14px</span>/<span class=\"number\">1.5</span> sans-serif;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>从代码中可以看到，我们直接将z-index, top, left 紧跟在 position 之后，因为这几个属性其实是一组的，如果去掉position，则后3条属性规则都将失效。</p>\n</blockquote>\n<ul>\n<li>私有属性在前标准属性在后</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.g-box</span> &#123;</span><br><span class=\"line\">　　　<span class=\"attribute\">-webkit-box-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, .5);</span><br><span class=\"line\">　　　<span class=\"attribute\">-moz-box-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, .5);</span><br><span class=\"line\">　　　<span class=\"attribute\">-o-box-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, .5);</span><br><span class=\"line\">　　　<span class=\"attribute\">box-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, .5);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当有一天你的浏览器升级后，可能不再支持私有写法，那么这时写在后面的标准写法将生效，避免无法向后兼容的情况发生。</p>\n</blockquote>\n<p><a name=\"css-comment\"></a></p>\n<h3 id=\"14-注释规范\"><a href=\"#14-注释规范\" class=\"headerlink\" title=\"14.注释规范\"></a>14.注释规范</h3><p>保持注释内容与星号之间有一个空格的距离</p>\n<p><strong>普通注释（单行）</strong></p>\n<pre><code>/* 普通注释 */\n</code></pre><p><strong>区块注释</strong></p>\n<pre><code>/**\n * 模块: m-detail\n * 描述：酒店详情模块\n * 应用：page detail, info and etc...etc\n */\n</code></pre><blockquote>\n<p>有特殊作用的规则一定要有注释说明<br>应用了高级技巧的地方一定要注释说明</p>\n</blockquote>\n<p><a name=\"hack\"></a></p>\n<h3 id=\"15-hack规范\"><a href=\"#15-hack规范\" class=\"headerlink\" title=\"15.hack规范\"></a>15.hack规范</h3><ul>\n<li>尽可能的减少对Hack的使用和依赖，如果在项目中对Hack的使用太多太复杂，对项目的维护将是一个巨大的挑战；</li>\n<li>使用其它的解决方案代替Hack思路；</li>\n<li>如果非Hack不可，选择稳定且常用并易于理解的。</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">　　　<span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;       <span class=\"comment\">/* For all */</span></span><br><span class=\"line\">　　　<span class=\"attribute\">color</span>: <span class=\"number\">#111</span>\\<span class=\"number\">9</span>;     <span class=\"comment\">/* For all IE */</span></span><br><span class=\"line\">　　　<span class=\"attribute\">color</span>: <span class=\"number\">#222</span>\\<span class=\"number\">0</span>;     <span class=\"comment\">/* For IE8 and later, Opera without Webkit */</span></span><br><span class=\"line\">　　　<span class=\"attribute\">color</span>: <span class=\"number\">#333</span>\\<span class=\"number\">9</span>\\<span class=\"number\">0</span>;   <span class=\"comment\">/* For IE8 and later */</span></span><br><span class=\"line\">　　　<span class=\"attribute\">color</span>: <span class=\"number\">#444</span>\\<span class=\"number\">0</span>/;    <span class=\"comment\">/* For IE8 and later */</span></span><br><span class=\"line\">　　　*<span class=\"attribute\">color</span>: <span class=\"number\">#666</span>;      <span class=\"comment\">/* For IE7 and earlier */</span></span><br><span class=\"line\">　　　_color: <span class=\"number\">#777</span>;      <span class=\"comment\">/* For IE6 and earlier */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>严谨且长期的项目，针对IE可以使用条件注释作为预留Hack或者在当前使用</li>\n</ul>\n<p>IE条件注释语法：</p>\n<pre><code>&lt;!--[if &lt;keywords&gt;? IE &lt;version&gt;?]&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;*.css&quot; /&gt;\n&lt;![endif]--&gt;\n</code></pre><p>语法说明：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;keywords&gt;</span><br><span class=\"line\"><span class=\"keyword\">if</span>条件共包含<span class=\"number\">6</span>种选择方式：是否、大于、大于或等于、小于、小于或等于、非指定版本</span><br><span class=\"line\">是否：指定是否IE或IE某个版本。关键字：空</span><br><span class=\"line\">大于：选择大于指定版本的IE版本。关键字：gt（<span class=\"keyword\">greater</span> than）</span><br><span class=\"line\">大于或等于：选择大于或等于指定版本的IE版本。关键字：gte（<span class=\"keyword\">greater</span> than <span class=\"keyword\">or</span> <span class=\"keyword\">equal</span>）</span><br><span class=\"line\">小于：选择小于指定版本的IE版本。关键字：lt（<span class=\"keyword\">less</span> than）</span><br><span class=\"line\">小于或等于：选择小于或等于指定版本的IE版本。关键字：lte（<span class=\"keyword\">less</span> than <span class=\"keyword\">or</span> <span class=\"keyword\">equal</span>）</span><br><span class=\"line\">非指定版本：选择除指定版本外的所有IE版本。关键字：!</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"built_in\">version</span>&gt;</span><br><span class=\"line\">目前的常用IE版本为<span class=\"number\">6.0</span>及以上，推荐酌情忽略低版本，把精力花在为使用高级浏览器的用户提供更好的体验上，另从IE10开始已无此特性</span><br></pre></td></tr></table></figure>\n<p><a name=\"low-selector\"></a></p>\n<h3 id=\"16-避免低效率选择器\"><a href=\"#16-避免低效率选择器\" class=\"headerlink\" title=\"16.避免低效率选择器\"></a>16.避免低效率选择器</h3><ul>\n<li>避免类型选择器</li>\n</ul>\n<p>不允许：</p>\n<pre><code>div#doc { sRules; }\nli.first { sRules; }\n</code></pre><p>应该：</p>\n<pre><code>#doc { sRules; }\n.first { sRules; }\n</code></pre><blockquote>\n<p>CSS选择器是由右到左进行解析的，所以 div#doc 本身并不会比 #doc 更快</p>\n</blockquote>\n<ul>\n<li>避免多id选择器</li>\n</ul>\n<p>不允许：</p>\n<pre><code>#xxx #yyy { sRules; }\n</code></pre><p>应该：</p>\n<pre><code>#yyy { sRules; }\n</code></pre><p><a name=\"override\"></a></p>\n<h3 id=\"17-属性缩写与分拆\"><a href=\"#17-属性缩写与分拆\" class=\"headerlink\" title=\"17.属性缩写与分拆\"></a>17.属性缩写与分拆</h3><ul>\n<li>无继承关系时，使用缩写</li>\n</ul>\n<p>不推荐：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">　　　<span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">margin-right</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">margin-left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>推荐：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">　　　<span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>存在继承关系时，使用分拆方式</li>\n</ul>\n<p>不推荐：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.m-detail</span> &#123;</span><br><span class=\"line\">　　　<span class=\"attribute\">font</span>: bold <span class=\"number\">12px</span>/<span class=\"number\">1.5</span> arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.m-detail</span> <span class=\"selector-class\">.info</span> &#123;</span><br><span class=\"line\">　　　<span class=\"attribute\">font</span>: normal <span class=\"number\">14px</span>/<span class=\"number\">1.5</span> arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要避免错误的覆盖：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.m-detail</span> <span class=\"selector-class\">.info</span> &#123;</span><br><span class=\"line\">　　　<span class=\"attribute\">font</span>: <span class=\"number\">14px</span> sans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果你只是想改字号和字体，然后写成了上面这样，这是错误的写法，因为 <code>font</code> 复合属性里的其他属性将会被重置为 user agent 的默认值，比如 <code>font-weight</code> 就会被重置为 <code>normal</code>。</p>\n</blockquote>\n<p>推荐：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.m-detail</span> &#123;</span><br><span class=\"line\">　　　<span class=\"attribute\">font</span>: bold <span class=\"number\">12px</span>/<span class=\"number\">1.5</span> arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.m-detail</span> <span class=\"selector-class\">.info</span> &#123;</span><br><span class=\"line\">　　　<span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">　　　<span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在存在继承关系的情况下，只将需要变更的属性重定义，不进行缩写，避免不需要的重写的属性被覆盖定义</p>\n</blockquote>\n<ul>\n<li>根据规则条数选择缩写和拆分</li>\n</ul>\n<p>不推荐：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.m-detail</span> &#123;</span><br><span class=\"line\">　　　<span class=\"attribute\">border-width</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">border-style</span>: solid;</span><br><span class=\"line\">　　　<span class=\"attribute\">border-color</span>: <span class=\"number\">#000</span> <span class=\"number\">#000</span> <span class=\"number\">#f00</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>推荐：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.m-detail</span> &#123;</span><br><span class=\"line\">　　　<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000</span>;</span><br><span class=\"line\">　　　<span class=\"attribute\">border-bottom-color</span>: <span class=\"number\">#f00</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"css-module\"></a></p>\n<h3 id=\"18-模块化\"><a href=\"#18-模块化\" class=\"headerlink\" title=\"18.模块化\"></a>18.模块化</h3><ul>\n<li>每个模块必须是一个独立的样式文件，文件名与模块名一致；</li>\n<li>模块样式的选择器必须以模块名开头以作范围约定；</li>\n</ul>\n<p>假定有一个模块如前文 <a href=\"#html-module\">HTML模块化</a>，那么 <code>m-detail.scss</code> 的写法大致如下：</p>\n<pre><code>.m-detail {\n    background: #fff;\n    color: #333;\n    &amp;-hd {\n        padding: 5px 10px;\n        background: #eee;\n        .title {\n            background: #eee;\n        }\n    }\n    &amp;-bd {\n        padding: 10px;\n        .info {\n            font-size: 14px;\n            text-indent: 2em;\n        }\n    }\n    &amp;-ft {\n        text-align: center;\n        .more {\n            color: blue;\n        }\n    }\n}\n</code></pre><p>编译之后代码如下：</p>\n<pre><code>.m-detail {\n    background: #fff;\n    color: #333;\n}\n.m-detail-hd {\n    padding: 5px 10px;\n    background: #eee;\n}\n.m-detail-hd .title {\n    background: #eee;\n}\n.m-detail-bd {\n    padding: 10px;\n}\n.m-detail-bd .info {\n    font-size: 14px;\n    text-indent: 2em;\n}\n.m-detail-ft {\n    text-align: center;\n}\n.m-detail-ft .more {\n    color: blue;\n}\n</code></pre><blockquote>\n<p>任何超过3级的选择器，需要思考是否必要，是否有无歧义的，能唯一命中的更简短的写法</p>\n</blockquote>\n<p><a name=\"img\"></a></p>\n<h2 id=\"图像约定\"><a href=\"#图像约定\" class=\"headerlink\" title=\"图像约定\"></a>图像约定</h2><p><a name=\"img-compress\"></a></p>\n<h3 id=\"1-图像压缩\"><a href=\"#1-图像压缩\" class=\"headerlink\" title=\"1.图像压缩\"></a>1.图像压缩</h3><p>所有图片必须经过一定的压缩和优化才能发布</p>\n<p><a name=\"background-image\"></a></p>\n<h3 id=\"2-背景图\"><a href=\"#2-背景图\" class=\"headerlink\" title=\"2.背景图\"></a>2.背景图</h3><ul>\n<li>使用PNG格式而不是GIF格式，因为PNG格式色彩更丰富，还能提供更好的压缩比；</li>\n<li>在需要兼容IE6的项目中，尽可能选择PNG8，而不是使用PNG24+滤镜。</li>\n</ul>\n<p><a name=\"image\"></a></p>\n<h3 id=\"3-前景图\"><a href=\"#3-前景图\" class=\"headerlink\" title=\"3.前景图\"></a>3.前景图</h3><ul>\n<li>内容图片建议使用JPG，可以拥有更好地显示效果；</li>\n<li>装饰性图片使用PNG。</li>\n</ul>\n<p><a name=\"sprite\"></a></p>\n<h3 id=\"4-Sprite\"><a href=\"#4-Sprite\" class=\"headerlink\" title=\"4.Sprite\"></a>4.Sprite</h3><ul>\n<li>CSS Sprite是一种将数个图片合成为一张大图的技术（既可以是背景图也可以是前景图），然后通过偏移来进行图像位置选取；</li>\n<li>CSS Sprite可以减少http请求。</li>\n</ul>\n<p><a name=\"end\"></a></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>坚持一致性的原则。</p>\n<p>一个团队的代码风格如果统一了，首先可以培养良好的协同和编码习惯，其次可以减少无谓的思考，再次可以提升代码质量和可维护性。</p>\n<p>统一的代码风格，团队内部阅读或编辑代码，将会变得非常轻松，因为所有组员都处在一致思维环境中。</p>\n","excerpt":"转载原文地址https://github.com/doyoe/html-css-guide HTML/CSS开发规范指南目录 规范概述 基本信息 通用约定 文档目录结构 分离 文件命名 缩进","categories":[],"tags":[]},{"title":"常用的开发英语单词","date":"2018-01-19T02:48:28.000Z","path":"2018/01/19/English-note/","text":"prototype constructor extends Promise import export ModulequerySelector global writerstream process","content":"<p>prototype constructor extends Promise import export Module<br>querySelector global writer<br>stream process</p>\n","excerpt":"","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"学习javascript运行原理","date":"2018-01-19T02:05:30.000Z","path":"2018/01/19/it-js-yunxingjizhi/","text":"首先记住两点 js是单线程语言 js的运行机制就是EventLoop事件循环机制 上代码 123456console.log(1)setTimeout( function() &#123; console.log(2) &#125;, 0)console.log(3) 上面代码会输出什么 1 3 2 为什么呢？ js会分同步和异步队列，哪些代码会进入异步队列呢定时器 setTimeout dom事件 ajax 还有 promise js代码是从上到下一行一行的往下面执行，当碰到同步代码的时候回直接执行,碰到异步代码的时候会先把异步代码放到异步队列，然后接下往下执行，当没有同步代码的时候才会去执行异步代码所以这案例是输出 1 3 2 在来段代码 12345678910111213setTimeout(()=&gt;&#123; console.log('hhhh');&#125;,0)new Promise(function(reslove)&#123; console.log(111); reslove()&#125;).then(()=&gt;&#123; console.log(222)&#125;)console.log('dddd') 按照之前的原理我们来分析下会输出什么这里说下 Promise的then才是异步代码一行一行执行 碰到setTimeout放到异步队列new Promies 执行 111 then 里面的回调放到异步队列console.log(‘dddd’) 同步代码直接执行同步代码执行完了 现在回到异步队列 按理说应该是先执行 setTimeou在执行then的回调 这么分析的话就是输出111 ddd hhhh 222运行了下代码结果是输出 111 ddd 222 hhhh 为啥呢？我个人理解在异步队列中定时器的优先级是最低的 所以先执行then回调在执行定时器 当同步队列的代码没有执行完是进入不了异步队列的，来段代码 1234567setTimeout(()=&gt;&#123; console.log(1)&#125;,1000)while(true)&#123; console.log(222)&#125; 过一秒输出1吗 很多人会对setTimeout不理解以为会输出其实答案是不会 因为我们在上面讲过异步代码必须要在同步代码执行完才能去执行 这里 while true 一直会执行根本进入不到异步队列所以1不会输出","content":"<p>首先记住两点</p>\n<ul>\n<li>js是单线程语言</li>\n<li>js的运行机制就是EventLoop事件循环机制</li>\n</ul>\n<p>上代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">setTimeout(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>上面代码会输出什么</p>\n<p>1 3 2 为什么呢？</p>\n<p>js会分同步和异步队列，哪些代码会进入异步队列呢<br>定时器 setTimeout dom事件 ajax 还有 promise</p>\n<p>js代码是从上到下一行一行的往下面执行，当碰到同步代码的时候回直接执行,碰到异步代码的时候会先把异步代码放到异步队列，然后接下往下执行，当没有同步代码的时候才会去执行异步代码所以这案例是输出 1 3 2</p>\n<p>在来段代码 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'hhhh'</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reslove</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>);</span><br><span class=\"line\">\treslove()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'dddd'</span>)</span><br></pre></td></tr></table></figure>\n<p>按照之前的原理我们来分析下会输出什么<br>这里说下 Promise的then才是异步代码<br>一行一行执行 碰到setTimeout放到异步队列<br>new Promies 执行 111 then 里面的回调放到异步队列<br>console.log(‘dddd’) 同步代码直接执行<br>同步代码执行完了 现在回到异步队列 按理说应该是先执行 setTimeou在执行then的回调 这么分析的话就是输出<br>111 ddd hhhh 222<br>运行了下代码结果是输出 111 ddd 222 hhhh 为啥呢？<br>我个人理解在异步队列中定时器的优先级是最低的 所以先执行then回调在执行定时器</p>\n<p>当同步队列的代码没有执行完是进入不了异步队列的，来段代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>过一秒输出1吗 很多人会对setTimeout不理解以为会输出<br>其实答案是不会 因为我们在上面讲过异步代码必须要在同步代码执行完才能去执行 这里 while true 一直会执行根本进入不到异步队列所以1不会输出</p>\n","excerpt":"首先记住两点 js是单线程语言 js的运行机制就是EventLoop事件循环机制 上代码 123456console.log(1)setTimeout( function() &#123; console.log(2) &#125;, 0)console.log(3)","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"命令开发笔记","date":"2018-01-17T07:30:11.000Z","path":"2018/01/17/it-cmd01/","text":"昨天无意间看到别人的博客写开发自己的cli工具，于是我就认真的看了一遍 源码只有十来行代码 看着挺简单 于是我就是自己尝试开发一个属于自己的cli工具 开发步骤 mkdir cmdTest &amp;&amp; cd cmdTest npm init -y package.json 添加bin 123\"bin\": &#123; \"ding-cli\": \"./bin/index.js\" &#125; ding-cli 就是我的命令 我们现在到bin/index.js 编辑这个页面 下面是我的index文件 1234#! /usr/bin/env node console.log('hello world'); npm link 关联到全局 然后就能在命令行里输入 ding-cli 命令行就能出现hello world了 如果想要让别人也能用把这个模块上传到 npm 上面去就行了 参考资料 https://www.jianshu.com/p/5d0eef9724e0 https://sfantasy.gitbooks.io/node-in-action/content/zh/cli/output.html https://github.com/SFantasy/node-translator https://www.cnblogs.com/zhaowinter/p/5945067.html https://www.jianshu.com/p/2cae952250d1 https://aotu.io/notes/2016/08/09/command-line-development/index.html","content":"<blockquote>\n<p>昨天无意间看到别人的博客写开发自己的cli工具，于是我就认真的看了一遍 源码只有十来行代码 看着挺简单 于是我就是自己尝试开发一个属于自己的cli工具</p>\n</blockquote>\n<h3 id=\"开发步骤\"><a href=\"#开发步骤\" class=\"headerlink\" title=\"开发步骤\"></a>开发步骤</h3><ul>\n<li>mkdir cmdTest &amp;&amp; cd cmdTest</li>\n<li>npm init -y</li>\n<li><p>package.json 添加bin</p>\n  <a id=\"more\"></a>    \n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"bin\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"ding-cli\"</span>: <span class=\"string\">\"./bin/index.js\"</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ding-cli 就是我的命令</p>\n</li>\n<li>我们现在到bin/index.js 编辑这个页面</li>\n<li>下面是我的index文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#! /usr/bin/env node </span></span><br><span class=\"line\"></span><br><span class=\"line\">console.log(<span class=\"string\">'hello world'</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>npm link 关联到全局 然后就能在命令行里输入 ding-cli 命令行就能出现hello world了</li>\n</ul>\n<p>如果想要让别人也能用把这个模块上传到 npm 上面去就行了</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://www.jianshu.com/p/5d0eef9724e0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/5d0eef9724e0</a></li>\n<li><a href=\"https://sfantasy.gitbooks.io/node-in-action/content/zh/cli/output.html\" target=\"_blank\" rel=\"noopener\">https://sfantasy.gitbooks.io/node-in-action/content/zh/cli/output.html</a> </li>\n<li><a href=\"https://github.com/SFantasy/node-translator\" target=\"_blank\" rel=\"noopener\">https://github.com/SFantasy/node-translator</a></li>\n<li><a href=\"https://www.cnblogs.com/zhaowinter/p/5945067.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhaowinter/p/5945067.html</a></li>\n<li><a href=\"https://www.jianshu.com/p/2cae952250d1\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/2cae952250d1</a></li>\n<li><a href=\"https://aotu.io/notes/2016/08/09/command-line-development/index.html\" target=\"_blank\" rel=\"noopener\">https://aotu.io/notes/2016/08/09/command-line-development/index.html</a></li>\n</ul>\n","excerpt":"昨天无意间看到别人的博客写开发自己的cli工具，于是我就认真的看了一遍 源码只有十来行代码 看着挺简单 于是我就是自己尝试开发一个属于自己的cli工具 开发步骤 mkdir cmdTest &amp;&amp; cd cmdTest npm init -y package.json 添加bin","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"}]},{"title":"前端自动化测试学习笔记","date":"2018-01-15T03:32:36.000Z","path":"2018/01/15/js-test01/","text":"作为开发人员测试是必不可少的技能 一能提升代码的质量 二来能减轻测试人员的工作量 selenium-webdrivere2e测试 介绍 https://itbilu.com/nodejs/npm/VJnZYSxW-.html npm https://www.npmjs.com/package/selenium-webdriver backstopjsUI自动化测试 github https://github.com/garris/BackstopJS 使用介绍http://www.cnblogs.com/laden666666/p/6390063.html 12345npm install -g backstopjsbackstop init backstop test supertest mochamocha 测试框架 mocha 官网 https://mochajs.org/ mocha 介绍 https://cnodejs.org/topic/516526766d38277306c7d277 supertest接口测试 npm https://www.npmjs.com/package/supertest karma一个测试脚手架工具","content":"<p>作为开发人员测试是必不可少的技能 一能提升代码的质量 二来能减轻测试人员的工作量</p>\n<h3 id=\"selenium-webdriver\"><a href=\"#selenium-webdriver\" class=\"headerlink\" title=\"selenium-webdriver\"></a>selenium-webdriver</h3><p>e2e测试</p>\n<p>介绍 <a href=\"https://itbilu.com/nodejs/npm/VJnZYSxW-.html\" target=\"_blank\" rel=\"noopener\">https://itbilu.com/nodejs/npm/VJnZYSxW-.html</a></p>\n<p>npm  <a href=\"https://www.npmjs.com/package/selenium-webdriver\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/selenium-webdriver</a></p>\n<a id=\"more\"></a>\n<h3 id=\"backstopjs\"><a href=\"#backstopjs\" class=\"headerlink\" title=\"backstopjs\"></a>backstopjs</h3><p>UI自动化测试</p>\n<p>github <a href=\"https://github.com/garris/BackstopJS\" target=\"_blank\" rel=\"noopener\">https://github.com/garris/BackstopJS</a></p>\n<p>使用介绍<br><a href=\"http://www.cnblogs.com/laden666666/p/6390063.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/laden666666/p/6390063.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g backstopjs</span><br><span class=\"line\"></span><br><span class=\"line\">backstop init </span><br><span class=\"line\"></span><br><span class=\"line\">backstop <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"supertest-mocha\"><a href=\"#supertest-mocha\" class=\"headerlink\" title=\"supertest mocha\"></a>supertest mocha</h3><p>mocha 测试框架 </p>\n<p>mocha 官网 <a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"noopener\">https://mochajs.org/</a></p>\n<p>mocha 介绍 <a href=\"https://cnodejs.org/topic/516526766d38277306c7d277\" target=\"_blank\" rel=\"noopener\">https://cnodejs.org/topic/516526766d38277306c7d277</a></p>\n<p>supertest接口测试 </p>\n<p>npm  <a href=\"https://www.npmjs.com/package/supertest\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/supertest</a></p>\n<h3 id=\"karma\"><a href=\"#karma\" class=\"headerlink\" title=\"karma\"></a>karma</h3><p>一个测试脚手架工具</p>\n","excerpt":"作为开发人员测试是必不可少的技能 一能提升代码的质量 二来能减轻测试人员的工作量 selenium-webdrivere2e测试 介绍 https://itbilu.com/nodejs/npm/VJnZYSxW-.html npm https://www.npmjs.com/package/selenium-webdriver","categories":[],"tags":[{"name":"test","slug":"test","permalink":"http://www.ding1996.cn/tags/test/"}]},{"title":"2018年1月学习计划","date":"2018-01-11T06:48:33.000Z","path":"2018/01/11/2018011/","text":"1月学习计划 javascript 设计模式 http https 知识 typescript javascript 函数式编程 lodash.js源码 Rx.js","content":"<p>1月学习计划</p>\n<p>javascript 设计模式</p>\n<p>http https 知识</p>\n<p>typescript </p>\n<p>javascript 函数式编程</p>\n<p>lodash.js源码</p>\n<p>Rx.js</p>\n","excerpt":"","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://www.ding1996.cn/tags/随笔/"}]},{"title":"函数式编程学习","date":"2018-01-10T06:48:33.000Z","path":"2018/01/10/it-fg/","text":"随着React的高阶组件函数式编程越来越火，so函数式编程是前端必不可少的一门技术 函数式编程的思维范畴轮1 函数式编程是范畴轮的数学分支是一门很复杂的数学，认为世界上所有的概念体系都可以抽象出一个范畴2 彼此之间存在某种关系概念 事物 对象等等 都构成范畴 。任何事物只要找出他们之间的关系 就能定义3 箭头表示范畴成员之间的关系 正式名称叫做 态射 。范畴轮认为，同一个范畴的所有成员 就是不同态射的变形，通过态射，一个成员可以变形成灵一个成员 函数式编程基础理论1 函数式编程其实对于计算机的历史而言是一个古老的概念，甚至早于第一台计算机的诞生。韩式是编程的基础模型来源kambda的演算，而演算并非设计于在计算机上执行，他是在20世纪三十年代引入的一套用于研究函数定义 函数应用和递归形式的系统。2 函数式编程不是用函数来编程，也不是传统的面向过程编程。主旨在于将复杂的函数合成简单的函数（计算理论 或者递归轮 或者拉姆达演算）运算过程劲量写成一系列嵌套函数调用3 Javascript 是披着C外衣的lisp4 真正的火热是随着react的高阶函数而逐步升温 1 函数式一等公民。所谓 第一等公民 指的是函数与其他数据类型一样 处于平等地位，可以复制给其他变量也可以作为参数传入另一个函数，或者作为别的函数的返回值；2 不可改变量。在函数式编程中，我们通常理解的变量在函数式编程中也被函数替代了了；在函数式编程中变量仅仅代表某个表达式。这里所说的变量是不能被修改的 所有的变量只能被赋一次初值；3 map 和reduce他们是最常见的函数式编程的方式 函数式编程的核心概念 纯函数 函数的柯里化 函数组合 Point Free 声明式于命令式代码 惰性求值 纯函数对于相同的输入 永远会得到相同的输出 而且没有任何可观察的副作用 也不依赖外部的环境状态。 函数柯里化传递给函数的一部分参数来调用他，让他返回一个函数去处理剩下的参数 12345678910111213141516 // 柯里化之前 function add(x,y)&#123; return x+y; &#125; add(1,2);// 柯里化之后 function add(x)&#123; return function(y)&#123; return x+y; &#125; &#125; add(1)(2) // 柯里化的话 代码可以缓存 var result = add(1); reuslt(2) // 3 柯里化的优点事实上柯里化是一个预加载函数的方式，通过传递较少的参数得到一个已经记住了这些参数的新函数，某种意义上讲 这是一种对参数的 缓存，是一个非常高效的编写函数方法 函数组合纯函数以及如何把他柯里化写出洋葱代码h(g(f(x)))为了解决函数嵌套的问题，我们需要用到函数组合； Poiint Free把一些对象自带的方法转化成春函数，不要命名转瞬即逝的中间变量。这个中间变量除了让代码变得长了一点异味是毫无意义的 1const = str=&gt;str.toUppercase().split(''); 声明式和命令式代码命令式代码的意思就是，我们通过编写一条又一条指令去让计算机执行一些动作，这其中一半都会涉及到很多复杂的细节。而声明式就要优雅很多了，我们通过写表达式的方式来声明我们想干什么，而不是通过一步一步的提示。 12345678910// 命令式let ceos=[];for(var i=0;i&lt;companies.length;i++)&#123; ceos.push(companies[i].ceo)&#125;// 声明式let ceso = companies.map(function(c)&#123; return c.ceo&#125;) 优缺点函数式编程的一个明显好处就是这种声明式的代码，对于无副作用的春函数，我们完全可以不考虑函数内部是如何实现的专注于编写业务代码，优化代码时 目光只需要几种在这些稳定坚固的函数内部即可。 相反，不纯的函数式的代码会产生副作用或者依赖外部系统环境，使用它们的时候总是需要考虑这些不干净的副作用。在复杂的系统中，这对于程序员的心智来说是极大地负担； 惰性求值、惰性函数在指令式语言中一下代码会按顺序执行，由于每个函数都有可能改动或者依赖于其外部的状态，因此必须顺序执行； 更加专业的术语 高阶函数 尾调用优化 闭包 容器、Functor 错误处理 Either、 AP IO Monad","content":"<blockquote>\n<p>随着React的高阶组件函数式编程越来越火，so函数式编程是前端必不可少的一门技术 </p>\n</blockquote>\n<h3 id=\"函数式编程的思维\"><a href=\"#函数式编程的思维\" class=\"headerlink\" title=\"函数式编程的思维\"></a>函数式编程的思维</h3><p>范畴轮<br>1 函数式编程是范畴轮的数学分支是一门很复杂的数学，认为世界上所有的概念体系都可以抽象出一个范畴<br>2 彼此之间存在某种关系概念 事物 对象等等 都构成范畴 。任何事物只要找出他们之间的关系 就能定义<br>3 箭头表示范畴成员之间的关系 正式名称叫做 态射 。范畴轮认为，同一个范畴的所有成员 就是不同态射的变形，通过态射，一个成员可以变形成灵一个成员<br><a id=\"more\"></a></p>\n<h3 id=\"函数式编程基础理论\"><a href=\"#函数式编程基础理论\" class=\"headerlink\" title=\"函数式编程基础理论\"></a>函数式编程基础理论</h3><p>1 函数式编程其实对于计算机的历史而言是一个古老的概念，甚至早于第一台计算机的诞生。韩式是编程的基础模型来源kambda的演算，而演算并非设计于在计算机上执行，他是在20世纪三十年代引入的一套用于研究函数定义 函数应用和递归形式的系统。<br>2 函数式编程不是用函数来编程，也不是传统的面向过程编程。主旨在于将复杂的函数合成简单的函数（计算理论 或者递归轮 或者拉姆达演算）运算过程劲量写成一系列嵌套函数调用<br>3 Javascript 是披着C外衣的lisp<br>4 真正的火热是随着react的高阶函数而逐步升温</p>\n<p>1 函数式一等公民。所谓 第一等公民 指的是函数与其他数据类型一样 处于平等地位，可以复制给其他变量也可以作为参数传入另一个函数，或者作为别的函数的返回值；<br>2 不可改变量。在函数式编程中，我们通常理解的变量在函数式编程中也被函数替代了了；在函数式编程中变量仅仅代表某个表达式。这里所说的变量是不能被修改的 所有的变量只能被赋一次初值；<br>3 map 和reduce他们是最常见的函数式编程的方式</p>\n<h3 id=\"函数式编程的核心概念\"><a href=\"#函数式编程的核心概念\" class=\"headerlink\" title=\"函数式编程的核心概念\"></a>函数式编程的核心概念</h3><ul>\n<li>纯函数</li>\n<li>函数的柯里化</li>\n<li>函数组合</li>\n<li>Point Free</li>\n<li>声明式于命令式代码</li>\n<li>惰性求值</li>\n</ul>\n<h3 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a>纯函数</h3><p>对于相同的输入 永远会得到相同的输出 而且没有任何可观察的副作用 也不依赖外部的环境状态。</p>\n<h3 id=\"函数柯里化\"><a href=\"#函数柯里化\" class=\"headerlink\" title=\"函数柯里化\"></a>函数柯里化</h3><p>传递给函数的一部分参数来调用他，让他返回一个函数去处理剩下的参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">// 柯里化之前</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   add(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 柯里化之后</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>)</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 柯里化的话 代码可以缓存</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> result = add(<span class=\"number\">1</span>);</span><br><span class=\"line\">   reuslt(<span class=\"number\">2</span>) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"柯里化的优点\"><a href=\"#柯里化的优点\" class=\"headerlink\" title=\"柯里化的优点\"></a>柯里化的优点</h4><p>事实上柯里化是一个预加载函数的方式，通过传递较少的参数得到一个已经记住了这些参数的新函数，某种意义上讲 这是一种对参数的 缓存，是一个非常高效的编写函数方法</p>\n<h3 id=\"函数组合\"><a href=\"#函数组合\" class=\"headerlink\" title=\"函数组合\"></a>函数组合</h3><p>纯函数以及如何把他柯里化写出洋葱代码h(g(f(x)))为了解决函数嵌套的问题，我们需要用到函数组合；</p>\n<h3 id=\"Poiint-Free\"><a href=\"#Poiint-Free\" class=\"headerlink\" title=\"Poiint Free\"></a>Poiint Free</h3><p>把一些对象自带的方法转化成春函数，不要命名转瞬即逝的中间变量。<br>这个中间变量除了让代码变得长了一点异味是毫无意义的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> = <span class=\"function\"><span class=\"params\">str</span>=&gt;</span>str.toUppercase().split(<span class=\"string\">''</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"声明式和命令式代码\"><a href=\"#声明式和命令式代码\" class=\"headerlink\" title=\"声明式和命令式代码\"></a>声明式和命令式代码</h3><p>命令式代码的意思就是，我们通过编写一条又一条指令去让计算机执行一些动作，这其中一半都会涉及到很多复杂的细节。<br>而声明式就要优雅很多了，我们通过写表达式的方式来声明我们想干什么，而不是通过一步一步的提示。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 命令式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ceos=[];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;companies.length;i++)&#123;</span><br><span class=\"line\">    ceos.push(companies[i].ceo)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ceso = companies.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c.ceo</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><p>函数式编程的一个明显好处就是这种声明式的代码，对于无副作用的春函数，我们完全可以不考虑函数内部是如何实现的<br>专注于编写业务代码，优化代码时 目光只需要几种在这些稳定坚固的函数内部即可。</p>\n<p>相反，不纯的函数式的代码会产生副作用或者依赖外部系统环境，使用它们的时候总是需要考虑这些不干净的副作用。<br>在复杂的系统中，这对于程序员的心智来说是极大地负担；</p>\n<h3 id=\"惰性求值、惰性函数\"><a href=\"#惰性求值、惰性函数\" class=\"headerlink\" title=\"惰性求值、惰性函数\"></a>惰性求值、惰性函数</h3><p>在指令式语言中一下代码会按顺序执行，由于每个函数都有可能改动或者依赖于其外部的状态，因此必须顺序执行；</p>\n<h2 id=\"更加专业的术语\"><a href=\"#更加专业的术语\" class=\"headerlink\" title=\"更加专业的术语\"></a>更加专业的术语</h2><ul>\n<li>高阶函数</li>\n<li>尾调用优化</li>\n<li>闭包</li>\n<li>容器、Functor</li>\n<li>错误处理 Either、 AP</li>\n<li>IO</li>\n<li>Monad</li>\n</ul>\n","excerpt":"随着React的高阶组件函数式编程越来越火，so函数式编程是前端必不可少的一门技术 函数式编程的思维范畴轮1 函数式编程是范畴轮的数学分支是一门很复杂的数学，认为世界上所有的概念体系都可以抽象出一个范畴2 彼此之间存在某种关系概念 事物 对象等等 都构成范畴 。任何事物只要找出他们之间的关系 就能定义3 箭头表示范畴成员之间的关系 正式名称叫做 态射 。范畴轮认为，同一个范畴的所有成员 就是不同态射的变形，通过态射，一个成员可以变形成灵一个成员","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://www.ding1996.cn/tags/随笔/"}]},{"title":"收藏的js面试题","date":"2018-01-08T12:49:50.000Z","path":"2018/01/08/it-mianshi-20180108/","text":"12345678910111213141516171819202122232425262728293031if (!(\"a\" in window)) &#123; var a = 1;&#125;alert(a); var a = 1, b = function a(x) &#123; x &amp;&amp; a(--x); &#125;;alert(a); 1function a(x) &#123; return x * 2;&#125;var a =6;alert(a); var foo = 'function '; var foo ;console.log(foo);function b(x, y, a) &#123; arguments[2] = 10; alert(a); &#125; b(1, 2);function a() &#123; alert(this);&#125;a.call(null); window","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!(<span class=\"string\">\"a\"</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(a); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>,</span><br><span class=\"line\">    b = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">        x &amp;&amp; a(--x);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">alert(a);  <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a =<span class=\"number\">6</span>;</span><br><span class=\"line\">alert(a);  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'function '</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> foo ;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x, y, a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">    alert(a);   </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">b(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.call(<span class=\"literal\">null</span>);   <span class=\"built_in\">window</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"http://www.ding1996.cn/tags/面试/"}]},{"title":"webpack优化技巧收藏","date":"2018-01-08T06:01:41.000Z","path":"2018/01/08/it-js-webpack-youhua01/","text":"https://github.com/linzx1993/linzx1993.github.io/issues/2 https://github.com/dwqs/blog/issues/52 https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/ webpack原理与实战：http://www.cnblogs.com/libin-1/p/6958858.htmlwebpack模块化机制：https://www.jianshu.com/p/ee88e9849a1bwebpack与gulp区别：https://segmentfault.com/a/1190000012674691Gulp和webpack对比：https://www.tuicool.com/articles/e632EbA","content":"<p><a href=\"https://github.com/linzx1993/linzx1993.github.io/issues/2\" target=\"_blank\" rel=\"noopener\">https://github.com/linzx1993/linzx1993.github.io/issues/2</a></p>\n<p><a href=\"https://github.com/dwqs/blog/issues/52\" target=\"_blank\" rel=\"noopener\">https://github.com/dwqs/blog/issues/52</a></p>\n<p><a href=\"https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/\" target=\"_blank\" rel=\"noopener\">https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/</a></p>\n<p>webpack原理与实战：<a href=\"http://www.cnblogs.com/libin-1/p/6958858.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/libin-1/p/6958858.html</a><br>webpack模块化机制：<a href=\"https://www.jianshu.com/p/ee88e9849a1b\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ee88e9849a1b</a><br>webpack与gulp区别：<a href=\"https://segmentfault.com/a/1190000012674691\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000012674691</a><br>Gulp和webpack对比：<a href=\"https://www.tuicool.com/articles/e632EbA\" target=\"_blank\" rel=\"noopener\">https://www.tuicool.com/articles/e632EbA</a></p>\n","excerpt":"","categories":[],"tags":[{"name":"webpack","slug":"webpack","permalink":"http://www.ding1996.cn/tags/webpack/"}]},{"title":"js语言精粹2笔记","date":"2018-01-02T06:37:33.000Z","path":"2018/01/02/js-mianshi-1802/","text":"案例一 123456789var obj = &#123; user :'zhengzheng.zx', getname:function()&#123; return user; &#125;&#125;var getnamefn=obj.getname;console.log(getnamefn()) // user is not definedconsole.log(obj.getname()) 案例二 1234if(!(\"username\" in window))&#123; var username=\"hahh\";&#125;console.log(username); // 变量提升 undefined 案例三 123456789var obj = &#123; user :'zhengzheng.zx', getname:function()&#123; return this.user; &#125;&#125;var getnamefn=obj.getname;console.log(getnamefn()) // window.getnamefn thsi = winodwconsole.log(obj.getname()) // this=obj 案列四 原型对象是什么？在javascript中 没定义一个对象 函数时 对象中都会包含一些预定义的属性 其中函数对象的一个属性就是原型对象的属性prototype 普通对象没有prototype属性 担有proto 属性 12345function f1()&#123;&#125; console.log(typeof f1.prototype) // objectconsole.log(typeof Function.prototype) //functionconsole.log(typeof Object.prototype) //objectconsole.log(typeof Function.prototype.prototype) //undefined 原型对象有什么用？1面向对象开发类的继承 12345678function Person(name)&#123; this.name=name;&#125;Person.prototype.getName = function()&#123; return this.name;&#125;var hah = new Person('丁盛');console.log(hah.getName()) 构造函数 使用new关键字调用的函数 构造函数可以实例化一个对象 返回值 默认返回类的实例 特殊情况 没有返回值 简单数据类型 对象类型 123456function People(name,age)&#123; this.name = name ; this.age = age;&#125;var people = new People('dingsheng',20);console.log(people); 原型链是如何实现的？1每一个函数都有一个prototype的对象属性2每一个对象都会有一个proto属性，这个属性指向父类的prototype对象 原型对象中的constructor？每个原型对象prototype中都有一个constructor属性默认指向函数本身。 1234Person.prototype.construtor = Person;Function.prototype.construtor = Function ;Object.prototype.construtor=Object;Object.construtor=Function; 练习题 12345678910function make(num)&#123; return function()&#123; return num; &#125;&#125;var arr = [make(0),make(1),make(2)];console.log(arr[0]())console.log(arr[1]())console.log(arr[2]())console.log(arr[0]()) 练习题2 要点this属性优先访问 原型链集成顺序先从本身实例开始访问在到原型链； 1234567891011var name = 'global';function A(name)&#123; alert(name); this.name = name; var name = '1';&#125;A.prototype.name='2';var a = new A('3');alert(a.name);delete a.name;alert(a.name); 练习三 12345678910111213141516function fun(n,o)&#123; console.log(o); return &#123; fun:function(m)&#123; return fun(m,n) &#125; &#125;&#125;var a = function(0);a.fun(1);a.fun(2);var b = fun(0).fun(1).fun(2).fun(3);var c = fun(0).fun(1);c.fun(2);c.fun(3);","content":"<p>案例一</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">\tuser :<span class=\"string\">'zhengzheng.zx'</span>,</span><br><span class=\"line\">\tgetname:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>  user;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getnamefn=obj.getname;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getnamefn())  <span class=\"comment\">// user is not defined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.getname())</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p> 案例二</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!(<span class=\"string\">\"username\"</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>))&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> username=<span class=\"string\">\"hahh\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(username);   <span class=\"comment\">// 变量提升  undefined</span></span><br></pre></td></tr></table></figure>\n<p>案例三</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">\tuser :<span class=\"string\">'zhengzheng.zx'</span>,</span><br><span class=\"line\">\tgetname:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.user;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getnamefn=obj.getname;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getnamefn())  <span class=\"comment\">//  window.getnamefn   thsi = winodw</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.getname())  <span class=\"comment\">//  this=obj</span></span><br></pre></td></tr></table></figure>\n<p>案列四</p>\n<p> 原型对象是什么？<br>在javascript中 没定义一个对象 函数时 对象中都会包含一些预定义的属性 其中函数对象的一个属性就是原型对象的属性prototype 普通对象没有prototype属性 担有<strong>proto</strong> 属性 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;&#125; </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> f1.prototype)   <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Function</span>.prototype)  <span class=\"comment\">//function</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.prototype)  <span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Function</span>.prototype.prototype)  <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>原型对象有什么用？<br>1面向对象开发类的继承</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> hah = <span class=\"keyword\">new</span> Person(<span class=\"string\">'丁盛'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hah.getName())</span><br></pre></td></tr></table></figure>\n<p> 构造函数</p>\n<ul>\n<li>使用new关键字调用的函数</li>\n<li>构造函数可以实例化一个对象</li>\n<li>返回值 默认返回类的实例</li>\n</ul>\n<p>特殊情况</p>\n<ul>\n<li>没有返回值</li>\n<li>简单数据类型</li>\n<li>对象类型</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">People</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name ;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> people = <span class=\"keyword\">new</span> People(<span class=\"string\">'dingsheng'</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(people);</span><br></pre></td></tr></table></figure>\n<p>原型链是如何实现的？<br>1每一个函数都有一个prototype的对象属性<br>2每一个对象都会有一个<strong>proto</strong>属性，这个属性指向父类的prototype对象</p>\n<p>原型对象中的constructor？<br>每个原型对象prototype中都有一个constructor属性默认指向函数本身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.prototype.construtor = Person;</span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.construtor = <span class=\"built_in\">Function</span> ;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.construtor=<span class=\"built_in\">Object</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.construtor=<span class=\"built_in\">Function</span>;</span><br></pre></td></tr></table></figure>\n<p>练习题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">make</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [make(<span class=\"number\">0</span>),make(<span class=\"number\">1</span>),make(<span class=\"number\">2</span>)];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">0</span>]())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">1</span>]())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">2</span>]())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">0</span>]())</span><br></pre></td></tr></table></figure>\n<p>练习题2<br> 要点this属性优先访问 原型链集成顺序先从本身实例开始访问在到原型链；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'global'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\talert(name);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name = <span class=\"string\">'1'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">A.prototype.name=<span class=\"string\">'2'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> A(<span class=\"string\">'3'</span>);</span><br><span class=\"line\">alert(a.name);</span><br><span class=\"line\"><span class=\"keyword\">delete</span> a.name;</span><br><span class=\"line\">alert(a.name);</span><br></pre></td></tr></table></figure>\n<p> 练习三</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">n,o</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(o);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\tfun:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> fun(m,n)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"number\">0</span></span>);</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">a</span>.<span class=\"title\">fun</span>(<span class=\"params\"><span class=\"number\">1</span></span>);</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">a</span>.<span class=\"title\">fun</span>(<span class=\"params\"><span class=\"number\">2</span></span>);</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">var</span> <span class=\"title\">b</span> = <span class=\"title\">fun</span>(<span class=\"params\"><span class=\"number\">0</span></span>).<span class=\"title\">fun</span>(<span class=\"params\"><span class=\"number\">1</span></span>).<span class=\"title\">fun</span>(<span class=\"params\"><span class=\"number\">2</span></span>).<span class=\"title\">fun</span>(<span class=\"params\"><span class=\"number\">3</span></span>);</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">var</span> <span class=\"title\">c</span> = <span class=\"title\">fun</span>(<span class=\"params\"><span class=\"number\">0</span></span>).<span class=\"title\">fun</span>(<span class=\"params\"><span class=\"number\">1</span></span>);</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">c</span>.<span class=\"title\">fun</span>(<span class=\"params\"><span class=\"number\">2</span></span>);</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">c</span>.<span class=\"title\">fun</span>(<span class=\"params\"><span class=\"number\">3</span></span>);</span></span><br></pre></td></tr></table></figure>\n","excerpt":"案例一 123456789var obj = &#123; user :'zhengzheng.zx', getname:function()&#123; return user; &#125;&#125;var getnamefn=obj.getname;console.log(getnamefn()) // user is not definedconsole.log(obj.getname())","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"下一代打包工具parcel","date":"2017-12-28T08:08:47.000Z","path":"2017/12/28/it-gongchenghua-parcel/","text":"官网 https://parceljs.org/ vue项目parcel配置 12345678910111213141516171819202122&#123; \"name\": \"vue-parcel\", \"version\": \"1.0.0\", \"main\": \"index.js\", \"license\": \"MIT\", \"scripts\": &#123; \"dev\": \"parcel index.html\", \"build\": \"parcel build index.html --public-url /\" &#125;, \"devDependencies\": &#123; \"babel-preset-env\": \"^1.6.1\", \"less\": \"^2.7.3\", \"node-sass\": \"^4.7.2\", \"parcel-bundler\": \"^1.2.0\", \"parcel-plugin-vue\": \"^1.0.1\" &#125;, \"dependencies\": &#123; \"echarts\": \"^3.8.5\", \"vue-router\": \"^3.0.1\" &#125;&#125;","content":"<p>官网 <a href=\"https://parceljs.org/\" target=\"_blank\" rel=\"noopener\">https://parceljs.org/</a></p>\n<p>vue项目parcel配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"vue-parcel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"dev\"</span>: <span class=\"string\">\"parcel index.html\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"parcel build index.html --public-url /\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-env\"</span>: <span class=\"string\">\"^1.6.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"less\"</span>: <span class=\"string\">\"^2.7.3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"node-sass\"</span>: <span class=\"string\">\"^4.7.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"parcel-bundler\"</span>: <span class=\"string\">\"^1.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"parcel-plugin-vue\"</span>: <span class=\"string\">\"^1.0.1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"echarts\"</span>: <span class=\"string\">\"^3.8.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue-router\"</span>: <span class=\"string\">\"^3.0.1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","categories":[],"tags":[{"name":"parcel","slug":"parcel","permalink":"http://www.ding1996.cn/tags/parcel/"}]},{"title":"js连等赋值面试题的思考思路","date":"2017-12-21T01:52:28.000Z","path":"2017/12/21/it-js-1221/","text":"昨晚看到了一道js的连等赋值的题目思考了很久一直没有解决，今天茅塞顿开貌似懂了点什么； 先来看段代码 12345var a = &#123;n:1&#125;var b = a;a = &#123;n:2&#125;;console.log(a);console.log(b); 第一个log输出 {n:2}第二个log输出 {n:1}上面这段代码看懂了 我们在来看下面这个段代码下面这段代码输出什么 12345var a = &#123;n:1&#125;;var b = a;a.x=a=&#123;n:2&#125;;console.log(a.x);console.log(b.x); 第一个log输出 undefined第二个log输出 {n:2} 我的天，很多人百思不得其解这是为什么呢？ 下面是我的思考思路首先第一行 var a = {n:1} 这一行就是一个简单的创建一个对象然后赋值个a这个变量第二行 var b = a; 这一行 把变量b也指向内存中的{n:1}这个对象；第三行就是难点了这里很多人解说的思路都不一样但是我都没怎么看明白 我自己的思路是 首先连等赋值是从右道左边就相当于是 a={n:2} a.x={n:2} 但是这边a.x的优先级要比=高所以解析是按下面这个样解析的 1 a.x={n:2} a={n:2} 执行a.x={n:2}的时候这时候a和b都是指向内存中{n:1}这个对象，就相当于在{n:1}这个对象中添加了x属性赋值了个{n:2}的值所以这个时候b也有了x属性 2下面一步a={n:2}这个时候有在内存中创建了个{n:2}的对象把a指向了这个对象，这个对象中没有x属性所以在a.x的时候等于undefined 我是这么理解的，不对的地方大佬可以指出小弟虚心学习 ~","content":"<p>昨晚看到了一道js的连等赋值的题目思考了很久一直没有解决，今天茅塞顿开貌似懂了点什么；</p>\n<p>先来看段代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">n</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\">a = &#123;<span class=\"attr\">n</span>:<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br></pre></td></tr></table></figure>\n<p>第一个log输出 {n:2}<br>第二个log输出 {n:1}<br>上面这段代码看懂了 我们在来看下面这个段代码<br><a id=\"more\"></a><br>下面这段代码输出什么</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">n</span>:<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\">a.x=a=&#123;<span class=\"attr\">n</span>:<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.x);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.x);</span><br></pre></td></tr></table></figure>\n<p>第一个log输出 undefined<br>第二个log输出 {n:2}</p>\n<p>我的天，很多人百思不得其解这是为什么呢？ </p>\n<p>下面是我的思考思路<br>首先第一行 var a = {n:1} 这一行就是一个简单的创建一个对象然后赋值个a这个变量<br>第二行 var b = a; 这一行 把变量b也指向内存中的{n:1}这个对象；<br>第三行就是难点了这里很多人解说的思路都不一样但是我都没怎么看明白 我自己的思路是 首先连等赋值是从右道左边<br>就相当于是 a={n:2} a.x={n:2} 但是这边a.x的优先级要比=高所以解析是按下面这个样解析的</p>\n<p>1 a.x={n:2} a={n:2} 执行a.x={n:2}的时候这时候a和b都是指向内存中{n:1}这个对象，就相当于在{n:1}这个对象中添加了x属性赋值了个{n:2}的值所以这个时候b也有了x属性</p>\n<p>2下面一步a={n:2}这个时候有在内存中创建了个{n:2}的对象把a指向了这个对象，这个对象中没有x属性所以在a.x的时候等于undefined</p>\n<p>我是这么理解的，不对的地方大佬可以指出小弟虚心学习 ~</p>\n","excerpt":"昨晚看到了一道js的连等赋值的题目思考了很久一直没有解决，今天茅塞顿开貌似懂了点什么； 先来看段代码 12345var a = &#123;n:1&#125;var b = a;a = &#123;n:2&#125;;console.log(a);console.log(b); 第一个log输出 {n:2}第二个log输出 {n:1}上面这段代码看懂了 我们在来看下面这个段代码","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"数学复习","date":"2017-12-14T07:55:51.000Z","path":"2017/12/14/it-shuxue/","text":"三角函数https://wenku.baidu.com/view/4024c002e87101f69e319562.html?from=search 圆的面积S=πr² r=半径周长计算公式2πr 弧长的计算公式L = nπr/180 n=角度 r=半径","content":"<p>三角函数<a href=\"https://wenku.baidu.com/view/4024c002e87101f69e319562.html?from=search\" target=\"_blank\" rel=\"noopener\">https://wenku.baidu.com/view/4024c002e87101f69e319562.html?from=search</a></p>\n<p>圆的面积<br>S=πr² r=半径<br>周长计算公式<br>2πr</p>\n<p>弧长的计算公式<br>L = nπr/180   n=角度  r=半径</p>\n","excerpt":"","categories":[],"tags":[]},{"title":"前端性能优化","date":"2017-12-14T02:51:30.000Z","path":"2017/12/14/it-mianshi-youhua/","text":"这些规则呢主要是来自《高性能网站建设指南》这本书，然后雅虎军规加以补充。 减少http请求学过计算机网络的同学应该都知道，http请求需要进行三次握手，这是很费时间的。通过查看流量也可以发现，大部分的时间都花在了为html文档所引用的所有组件进行的http请求上。因此减少http请求可以提高网站性能。 图片地图这个我实际用的比较少，就是在一个图片上关联多个url。 CSS Sprites中文叫雪碧图，将多个图片合并到一个单独的图片中。如果用作背景图片，可以根据background-position来定位背景，这样需要很多张背景图片现在就只需要一张了。也就是本来需要发送多次http请求来请求图片现在只需要发送一次就可以了。 内联图片通过编码的字符串将图片内嵌到网页文本中。通过使用data: URL模式可以在web页面中包含图片但无需额外的http请求。 合并脚本和样式表将多个js脚本文件打包成一个文件，将多个css样式表打包成一个样式表。如果分成多个小文件，每个文件都会导致一个额外的http请求。 使用内容发布网络（CDN）内容发布网络是一组分布在多个不同地理位置的web服务器，用于更加有效地向用户发布内容。在优化性能时，向特定用户发布内容的服务器的选择基于对网络可用度的测量。例如，CDN可能选择网络阶数最小的服务器，或者具有最短响应时间的服务器。这样就能减短网络请求的时间。 添加Expires头添加Expires头可以最大化地利用浏览器的缓存能力来改善页面的性能。通过使用一个长久的Expires头，使组件被缓存，可以在后续的页面浏览中避免不必要的http请求。web服务器使用Expires头来告诉web客户端它可以使用一个组件的当前副本，直到指定时间为止。 Cache-ControlExpires头有一定的限制，就是要求服务器和客户端的时钟严格同步，另外，过期日期需要经常检查。HTTP 1.1引入了Cache-Control头来克服Expires头的限制。Cache-Control可以重写Expires头。 压缩组件压缩组件可以减小http响应的大小，进而减少响应时间。如果http请求产生的响应包很小，传输时间就会减少。 将样式表放在顶部将样式表放在文档底部会导致在浏览器中阻止内容逐步呈现，将样式表放在顶部会显得加载速度更快，这样可以是浏览器逐步呈现已经下载的网页内容。对于内容比较多的网页尤其重要，用户不用一直等待一个白屏的页面，而是可以先看已经下载的内容。 将脚本放在底部在使用样式表时，页面逐步呈现会被阻止，直到所有的样式表下载完成。将样式表移到head中，就能首先下载样式表而不会阻止页面呈现。使用脚本时，所有位于脚本以下的内容，逐步呈现都会被阻塞，将脚本放在页面越靠下的位置，意味着越多的内容能够逐步地呈现。 避免CSS表达式css表达式的问题在于对其进行求值的频率比我们期望的要高。不只是在页面呈现和大小改变时求值，当页面滚动、甚至用户鼠标在页面上移过时都要求值。 使用外部JavaScript和CSS纯粹而言，内联的js和css可以产生比外部文件更快的响应速度，因为外部文件需要承担多个http请求带来的开销。尽管如此，现实中还是使用外部文件会产生较快的页面，因为外部文件有机会被浏览器缓存起来。html文档通常不会配置为可以缓存的。 减少DNS查找Internet是通过ip地址来查找服务器的，由于IP地址很难记忆，通常使用url代替，但是当浏览器发送http请求时还是需要ip地址，DNS就是用来将url映射到ip地址上的。DNS查找当然也是有开销的，通常要花费20-120毫秒。在DNS查找完成之前，浏览器不能从主机名那下载到任何内容。 DNS缓存DNS查找可以被缓存起来以提高查找性能，通常浏览器和用户主机都会进行DNS缓存。 减少DNS查找DNS查找的数量与页面中唯一主机名的数量相等，包括页面url、图片、脚本文件、样式表、Flash对象等的主机名。减少唯一主机名的数量就可以减少DNS查找的数量。 精简JavaScript精简，就是从代码中移除不必要的字符以减小其大小，进而改善页面加载时间。同样，css文件也可以进行精简。压缩同时也可以减小所需要请求文件的大小，进而加快文件的请求。 避免重定向重定向是将用户从一个url重新路由到另一个url，重定向会使页面加载变慢。 移除重复脚本在一个页面中两次包含同样的一个js文件会损伤性能。一个大型的网站可能是多人协作或者多团队协作的，这样脚本被重复添加是很可能发生的事情。重复的脚本会增加不必要的http请求和浪费执行js所用的时间，这样会损伤页面性能，所以需要避免使用同样的脚本。 配置ETag当网站被宿主在多于一台服务器上时，ETag头可能会阻碍缓存。当浏览器从一台服务器上获取原始组件，之后，又向另外一台不同的服务器发起条件GET请求时，ETag是不会匹配的，而对于使用服务器集群来处理请求的网站来说，这是很常见的一种情况。所以需要对ETag进行配置，以利用其灵活的验证能力。 雅虎军规补充延迟加载延迟加载需要知道网页最初加载需要的最小内容集是什么。剩下的内容就可以延迟加载了。 提前加载与延迟加载目的相反，提前加载的是为了提前加载接下来网页中要访问的资源。 减少DOM元素数量网页中元素过多对网页的加载和脚本的执行都是沉重的负担，500个元素和5000个元素在加载速度上会有很大差别。所以减少DOM元素数量是十分有必要的。 减少DOM操作通过js访问DOM元素没有我们想象中快，元素多的网页尤其慢，利用js对DOM的访问时要注意: 缓存已经访问过的元素Offline更新节点然后再加回DOM Tree避免通过Javascript修复layout根据域名划分内容浏览器一般对同一个域的下载链接数有所限制，按照域名划分下载内容可以增大浏览器并行下载数量，但是也不能盲目增加域名，这样会增加DNS查找的负担。 减少iframe负担iframe会阻止页面的加载，而且即使iframe内容为空也会消耗时间，所以尽量避免使用iframe。 使用Ajax GET请求浏览器在实现XMLHttpRequest POST的时候会分成两步，先发送header，然后再发送数据。而GET却可以用一个TCP报文完成请求。另外GET从语义上来讲是去服务器取数据，而POST则是向服务器发送数据，所以我们使用Ajax请求数据的时候尽量通过GET来完成。 避免空的图片src空的图片src仍然会使浏览器发送请求到服务器，这样完全是不必要的浪费。 用代替@import@import相当于将css放在网页内容底部。","content":"<p>这些规则呢主要是来自《高性能网站建设指南》这本书，然后雅虎军规加以补充。</p>\n<h4 id=\"减少http请求\"><a href=\"#减少http请求\" class=\"headerlink\" title=\"减少http请求\"></a>减少http请求</h4><p>学过计算机网络的同学应该都知道，http请求需要进行三次握手，这是很费时间的。通过查看流量也可以发现，大部分的时间都花在了为html文档所引用的所有组件进行的http请求上。因此减少http请求可以提高网站性能。</p>\n<h4 id=\"图片地图\"><a href=\"#图片地图\" class=\"headerlink\" title=\"图片地图\"></a>图片地图</h4><p>这个我实际用的比较少，就是在一个图片上关联多个url。<br><a id=\"more\"></a></p>\n<h4 id=\"CSS-Sprites\"><a href=\"#CSS-Sprites\" class=\"headerlink\" title=\"CSS Sprites\"></a>CSS Sprites</h4><p>中文叫雪碧图，将多个图片合并到一个单独的图片中。如果用作背景图片，可以根据background-position来定位背景，这样需要很多张背景图片现在就只需要一张了。也就是本来需要发送多次http请求来请求图片现在只需要发送一次就可以了。</p>\n<h4 id=\"内联图片\"><a href=\"#内联图片\" class=\"headerlink\" title=\"内联图片\"></a>内联图片</h4><p>通过编码的字符串将图片内嵌到网页文本中。通过使用data: URL模式可以在web页面中包含图片但无需额外的http请求。</p>\n<h4 id=\"合并脚本和样式表\"><a href=\"#合并脚本和样式表\" class=\"headerlink\" title=\"合并脚本和样式表\"></a>合并脚本和样式表</h4><p>将多个js脚本文件打包成一个文件，将多个css样式表打包成一个样式表。如果分成多个小文件，每个文件都会导致一个额外的http请求。</p>\n<h4 id=\"使用内容发布网络（CDN）\"><a href=\"#使用内容发布网络（CDN）\" class=\"headerlink\" title=\"使用内容发布网络（CDN）\"></a>使用内容发布网络（CDN）</h4><p>内容发布网络是一组分布在多个不同地理位置的web服务器，用于更加有效地向用户发布内容。在优化性能时，向特定用户发布内容的服务器的选择基于对网络可用度的测量。例如，CDN可能选择网络阶数最小的服务器，或者具有最短响应时间的服务器。这样就能减短网络请求的时间。</p>\n<h4 id=\"添加Expires头\"><a href=\"#添加Expires头\" class=\"headerlink\" title=\"添加Expires头\"></a>添加Expires头</h4><p>添加Expires头可以最大化地利用浏览器的缓存能力来改善页面的性能。通过使用一个长久的Expires头，使组件被缓存，可以在后续的页面浏览中避免不必要的http请求。<br>web服务器使用Expires头来告诉web客户端它可以使用一个组件的当前副本，直到指定时间为止。</p>\n<h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h4><p>Expires头有一定的限制，就是要求服务器和客户端的时钟严格同步，另外，过期日期需要经常检查。HTTP 1.1引入了Cache-Control头来克服Expires头的限制。Cache-Control可以重写Expires头。</p>\n<h4 id=\"压缩组件\"><a href=\"#压缩组件\" class=\"headerlink\" title=\"压缩组件\"></a>压缩组件</h4><p>压缩组件可以减小http响应的大小，进而减少响应时间。如果http请求产生的响应包很小，传输时间就会减少。</p>\n<h4 id=\"将样式表放在顶部\"><a href=\"#将样式表放在顶部\" class=\"headerlink\" title=\"将样式表放在顶部\"></a>将样式表放在顶部</h4><p>将样式表放在文档底部会导致在浏览器中阻止内容逐步呈现，将样式表放在顶部会显得加载速度更快，这样可以是浏览器逐步呈现已经下载的网页内容。对于内容比较多的网页尤其重要，用户不用一直等待一个白屏的页面，而是可以先看已经下载的内容。</p>\n<h4 id=\"将脚本放在底部\"><a href=\"#将脚本放在底部\" class=\"headerlink\" title=\"将脚本放在底部\"></a>将脚本放在底部</h4><p>在使用样式表时，页面逐步呈现会被阻止，直到所有的样式表下载完成。将样式表移到head中，就能首先下载样式表而不会阻止页面呈现。使用脚本时，所有位于脚本以下的内容，逐步呈现都会被阻塞，将脚本放在页面越靠下的位置，意味着越多的内容能够逐步地呈现。</p>\n<h4 id=\"避免CSS表达式\"><a href=\"#避免CSS表达式\" class=\"headerlink\" title=\"避免CSS表达式\"></a>避免CSS表达式</h4><p>css表达式的问题在于对其进行求值的频率比我们期望的要高。不只是在页面呈现和大小改变时求值，当页面滚动、甚至用户鼠标在页面上移过时都要求值。</p>\n<h4 id=\"使用外部JavaScript和CSS\"><a href=\"#使用外部JavaScript和CSS\" class=\"headerlink\" title=\"使用外部JavaScript和CSS\"></a>使用外部JavaScript和CSS</h4><p>纯粹而言，内联的js和css可以产生比外部文件更快的响应速度，因为外部文件需要承担多个http请求带来的开销。尽管如此，现实中还是使用外部文件会产生较快的页面，因为外部文件有机会被浏览器缓存起来。html文档通常不会配置为可以缓存的。</p>\n<h4 id=\"减少DNS查找\"><a href=\"#减少DNS查找\" class=\"headerlink\" title=\"减少DNS查找\"></a>减少DNS查找</h4><p>Internet是通过ip地址来查找服务器的，由于IP地址很难记忆，通常使用url代替，但是当浏览器发送http请求时还是需要ip地址，DNS就是用来将url映射到ip地址上的。DNS查找当然也是有开销的，通常要花费20-120毫秒。在DNS查找完成之前，浏览器不能从主机名那下载到任何内容。</p>\n<h4 id=\"DNS缓存\"><a href=\"#DNS缓存\" class=\"headerlink\" title=\"DNS缓存\"></a>DNS缓存</h4><p>DNS查找可以被缓存起来以提高查找性能，通常浏览器和用户主机都会进行DNS缓存。</p>\n<h4 id=\"减少DNS查找-1\"><a href=\"#减少DNS查找-1\" class=\"headerlink\" title=\"减少DNS查找\"></a>减少DNS查找</h4><p>DNS查找的数量与页面中唯一主机名的数量相等，包括页面url、图片、脚本文件、样式表、Flash对象等的主机名。减少唯一主机名的数量就可以减少DNS查找的数量。</p>\n<h4 id=\"精简JavaScript\"><a href=\"#精简JavaScript\" class=\"headerlink\" title=\"精简JavaScript\"></a>精简JavaScript</h4><p>精简，就是从代码中移除不必要的字符以减小其大小，进而改善页面加载时间。同样，css文件也可以进行精简。压缩同时也可以减小所需要请求文件的大小，进而加快文件的请求。</p>\n<h4 id=\"避免重定向\"><a href=\"#避免重定向\" class=\"headerlink\" title=\"避免重定向\"></a>避免重定向</h4><p>重定向是将用户从一个url重新路由到另一个url，重定向会使页面加载变慢。</p>\n<h4 id=\"移除重复脚本\"><a href=\"#移除重复脚本\" class=\"headerlink\" title=\"移除重复脚本\"></a>移除重复脚本</h4><p>在一个页面中两次包含同样的一个js文件会损伤性能。一个大型的网站可能是多人协作或者多团队协作的，这样脚本被重复添加是很可能发生的事情。重复的脚本会增加不必要的http请求和浪费执行js所用的时间，这样会损伤页面性能，所以需要避免使用同样的脚本。</p>\n<h4 id=\"配置ETag\"><a href=\"#配置ETag\" class=\"headerlink\" title=\"配置ETag\"></a>配置ETag</h4><p>当网站被宿主在多于一台服务器上时，ETag头可能会阻碍缓存。当浏览器从一台服务器上获取原始组件，之后，又向另外一台不同的服务器发起条件GET请求时，ETag是不会匹配的，而对于使用服务器集群来处理请求的网站来说，这是很常见的一种情况。所以需要对ETag进行配置，以利用其灵活的验证能力。</p>\n<h4 id=\"雅虎军规补充\"><a href=\"#雅虎军规补充\" class=\"headerlink\" title=\"雅虎军规补充\"></a>雅虎军规补充</h4><p>延迟加载<br>延迟加载需要知道网页最初加载需要的最小内容集是什么。剩下的内容就可以延迟加载了。</p>\n<p>提前加载<br>与延迟加载目的相反，提前加载的是为了提前加载接下来网页中要访问的资源。</p>\n<p>减少DOM元素数量<br>网页中元素过多对网页的加载和脚本的执行都是沉重的负担，500个元素和5000个元素在加载速度上会有很大差别。所以减少DOM元素数量是十分有必要的。</p>\n<p>减少DOM操作<br>通过js访问DOM元素没有我们想象中快，元素多的网页尤其慢，利用js对DOM的访问时要注意:</p>\n<p>缓存已经访问过的元素<br>Offline更新节点然后再加回DOM Tree<br>避免通过Javascript修复layout<br>根据域名划分内容<br>浏览器一般对同一个域的下载链接数有所限制，按照域名划分下载内容可以增大浏览器并行下载数量，但是也不能盲目增加域名，这样会增加DNS查找的负担。</p>\n<p>减少iframe负担<br>iframe会阻止页面的加载，而且即使iframe内容为空也会消耗时间，所以尽量避免使用iframe。</p>\n<p>使用Ajax GET请求<br>浏览器在实现XMLHttpRequest POST的时候会分成两步，先发送header，然后再发送数据。而GET却可以用一个TCP报文完成请求。另外GET从语义上来讲是去服务器取数据，而POST则是向服务器发送数据，所以我们使用Ajax请求数据的时候尽量通过GET来完成。</p>\n<p>避免空的图片src<br>空的图片src仍然会使浏览器发送请求到服务器，这样完全是不必要的浪费。</p>\n<p>用代替@import<br>@import相当于将css放在网页内容底部。</p>\n","excerpt":"这些规则呢主要是来自《高性能网站建设指南》这本书，然后雅虎军规加以补充。 减少http请求学过计算机网络的同学应该都知道，http请求需要进行三次握手，这是很费时间的。通过查看流量也可以发现，大部分的时间都花在了为html文档所引用的所有组件进行的http请求上。因此减少http请求可以提高网站性能。 图片地图这个我实际用的比较少，就是在一个图片上关联多个url。","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"http://www.ding1996.cn/tags/面试/"}]},{"title":"Html5新特性总结","date":"2017-12-14T02:46:36.000Z","path":"2017/12/14/it-mianshi-html/","text":"今天来谈谈前端面试中基本上每次一面的时候都会被问到的一个问题，那就是html5的新特性。这个是学习前端必须掌握的基础知识。 原文转载 http://hyuhan.com/2017/07/06/html5-of-interview/ 新增的元素html5新增了一些语义化更好的标签元素。 结构元素article元素，表示页面中的一块与上下文不相关的独立内容，比如博客中的一篇文章。aside元素，表示article内容之外的内容，辅助信息。header元素，表示页面中一个内容区块或整个页面的页眉。hgroup元素，用于对页面中一个区块或整个页面的标题进行组合。footer元素，表示页面中一个内容区块或整个页面的页脚。figure元素，表示媒介内容的分组，以及它们的标题。section元素，表示页面中一个内容区块，比如章节。nav元素，表示页面中的导航链接。其他元素video元素，用来定义视频。audio元素，用来定义音频。canvas元素，用来展示图形，该元素本身没有行为，仅提供一块画布。embed元素，用来插入各种多媒体，格式可以是Midi、Wav、AIFF、AU、MP3等。mark元素，用来展示高亮的文字。progress元素，用来展示任何类型的任务的进度。meter元素，表示度量衡，定义预定义范围内的度量。time元素，用来展示日期或者时间。command元素，表示命令按钮。details元素，用来展示用户要求得到并且可以得到的细节信息。summary元素，用来为details元素定义可见的标题。datalist元素，用来展示可选的数据列表，与input元素配合使用，可以制作出输入值的下拉列表。datagrid元素，也用来展示可选的数据列表，以树形列表的形式来显示。keygen元素，表示生成密匙。output元素，表示不同类型的输出。source元素，为媒介元素定义媒介资源。menu元素，表示菜单列表。ruby元素，表示ruby注释， rt元素表示字符的解释或发音。 rp元素在ruby注释中使用，以定义不支持ruby元素的浏览器所显示的内容。wbr元素，表示软换行。与br元素的区别是：br元素表示此处必须换行，而wbr元素的意思是浏览器窗口或父级元素的宽度够宽时。不进行换行，而当宽度不够时，主动在此处进行换行。bdi元素，定义文本的文本方向，使其脱离其周围文本的方向设置。dialog元素，表示对话框或窗口。废除的元素html5中废除了一些纯表现的元素，只有部分浏览器支持的元素还有一些会对可用性产生负面影响的元素。 纯表现元素纯表现的元素就是那些可以用css替代的元素。basefont、big、center、font、s、strike、tt、u这些元素，他们的功能都是纯粹为页面展示服务的，html5提倡把页面展示性功能放在css样式表中统一处理，所以将这些元素废除，用css样式进行替代。 对可用性产生负面影响的元素对于frameset元素、frame元素与noframes元素，由于frame框架对网页可用性存在负面影响，在html5中已不支持frame框架，只支持iframe框架，html5中同时将frameset、frame和noframes这三个元素废除。 只有部分浏览器支持的元素对于applet、bgsound、blink、marquee等元素，由于只有部分浏览器支持，特别是bgsound元素以及marquee元素，只被IE支持，所以在html5中被废除。其中applet元素可由embed元素或object元素替代，bgsound元素可由audio元素替代，marquee可以由javascript编程的方式替代。 新增的APICanvas API上文提到的canvas元素可以为页面提供一块画布来展示图形。结合Canvas API，就可以在这块画布上动态生成和展示各种图形、图表、图像以及动画了。Canvas本质上是位图画布，不可缩放，绘制出来的对象不属于页面DOM结构或者任何命名空间。不需要将每个图元当做对象存储，执行性能非常好。","content":"<blockquote>\n<p>今天来谈谈前端面试中基本上每次一面的时候都会被问到的一个问题，那就是html5的新特性。这个是学习前端必须掌握的基础知识。</p>\n</blockquote>\n<p>原文转载  <a href=\"http://hyuhan.com/2017/07/06/html5-of-interview/\" target=\"_blank\" rel=\"noopener\">http://hyuhan.com/2017/07/06/html5-of-interview/</a></p>\n<p>新增的元素<br>html5新增了一些语义化更好的标签元素。</p>\n<p>结构元素<br>article元素，表示页面中的一块与上下文不相关的独立内容，比如博客中的一篇文章。<br>aside元素，表示article内容之外的内容，辅助信息。<br>header元素，表示页面中一个内容区块或整个页面的页眉。<br>hgroup元素，用于对页面中一个区块或整个页面的标题进行组合。<br>footer元素，表示页面中一个内容区块或整个页面的页脚。<br>figure元素，表示媒介内容的分组，以及它们的标题。<br>section元素，表示页面中一个内容区块，比如章节。<br>nav元素，表示页面中的导航链接。<br><a id=\"more\"></a><br>其他元素<br>video元素，用来定义视频。<br>audio元素，用来定义音频。<br>canvas元素，用来展示图形，该元素本身没有行为，仅提供一块画布。<br>embed元素，用来插入各种多媒体，格式可以是Midi、Wav、AIFF、AU、MP3等。<br>mark元素，用来展示高亮的文字。<br>progress元素，用来展示任何类型的任务的进度。<br>meter元素，表示度量衡，定义预定义范围内的度量。<br>time元素，用来展示日期或者时间。<br>command元素，表示命令按钮。<br>details元素，用来展示用户要求得到并且可以得到的细节信息。<br>summary元素，用来为details元素定义可见的标题。<br>datalist元素，用来展示可选的数据列表，与input元素配合使用，可以制作出输入值的下拉列表。<br>datagrid元素，也用来展示可选的数据列表，以树形列表的形式来显示。<br>keygen元素，表示生成密匙。<br>output元素，表示不同类型的输出。<br>source元素，为媒介元素定义媒介资源。<br>menu元素，表示菜单列表。<br>ruby元素，表示ruby注释， rt元素表示字符的解释或发音。 rp元素在ruby注释中使用，以定义不支持ruby元素的浏览器所显示的内容。<br>wbr元素，表示软换行。与br元素的区别是：br元素表示此处必须换行，而wbr元素的意思是浏览器窗口或父级元素的宽度够宽时。不进行换行，而当宽度不够时，主动在此处进行换行。<br>bdi元素，定义文本的文本方向，使其脱离其周围文本的方向设置。<br>dialog元素，表示对话框或窗口。<br>废除的元素<br>html5中废除了一些纯表现的元素，只有部分浏览器支持的元素还有一些会对可用性产生负面影响的元素。</p>\n<p>纯表现元素<br>纯表现的元素就是那些可以用css替代的元素。basefont、big、center、font、s、strike、tt、u这些元素，他们的功能都是纯粹为页面展示服务的，html5提倡把页面展示性功能放在css样式表中统一处理，所以将这些元素废除，用css样式进行替代。</p>\n<p>对可用性产生负面影响的元素<br>对于frameset元素、frame元素与noframes元素，由于frame框架对网页可用性存在负面影响，在html5中已不支持frame框架，只支持iframe框架，html5中同时将frameset、frame和noframes这三个元素废除。</p>\n<p>只有部分浏览器支持的元素<br>对于applet、bgsound、blink、marquee等元素，由于只有部分浏览器支持，特别是bgsound元素以及marquee元素，只被IE支持，所以在html5中被废除。其中applet元素可由embed元素或object元素替代，bgsound元素可由audio元素替代，marquee可以由javascript编程的方式替代。</p>\n<p>新增的API<br>Canvas API<br>上文提到的canvas元素可以为页面提供一块画布来展示图形。结合Canvas API，就可以在这块画布上动态生成和展示各种图形、图表、图像以及动画了。Canvas本质上是位图画布，不可缩放，绘制出来的对象不属于页面DOM结构或者任何命名空间。不需要将每个图元当做对象存储，执行性能非常好。</p>\n","excerpt":"今天来谈谈前端面试中基本上每次一面的时候都会被问到的一个问题，那就是html5的新特性。这个是学习前端必须掌握的基础知识。 原文转载 http://hyuhan.com/2017/07/06/html5-of-interview/ 新增的元素html5新增了一些语义化更好的标签元素。 结构元素article元素，表示页面中的一块与上下文不相关的独立内容，比如博客中的一篇文章。aside元素，表示article内容之外的内容，辅助信息。header元素，表示页面中一个内容区块或整个页面的页眉。hgroup元素，用于对页面中一个区块或整个页面的标题进行组合。footer元素，表示页面中一个内容区块或整个页面的页脚。figure元素，表示媒介内容的分组，以及它们的标题。section元素，表示页面中一个内容区块，比如章节。nav元素，表示页面中的导航链接。","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"http://www.ding1996.cn/tags/面试/"}]},{"title":"css高级技巧","date":"2017-12-08T07:36:00.000Z","path":"2017/12/08/it-css-gaojijiqiao/","text":"css代码检测以及项目规范1.不要使用多个class选择元素，如a.foo.boo，这在ie6及以下不能正确解析2.移除空的css规则，如a{}3.正确的使用显示属性，如display:inline不要和width，height，float，margin,padding同时使用，display:inline-block不要和float同时使用等4.避免过多的浮动，当浮动次数超过十次时，会显示警告5.避免使用过多的字号，当字号声明超过十种时，显示警告6.避免使用过多web字体，当使用超过五次时，显示警告7.避免使用id作为样式选择器8.标题元素只定义一次9.使用width:100%时要小心10.属性值为0时不要写单位11.各浏览器专属的css属性要有规范，例如.foo{-moz-border-radius:5px;border-radius:5px}12.避免使用看起来像正则表达式的css3选择器13.遵守盒模型规则 css Icon收藏http://cssicon.space/#/ css高级绘制技巧 border border-radius after before box-shadow linear-gradient radial-grandient BFC的概念生成和使用场景概念Box: CSS布局的基本单位Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。 如何生成BFC根元素float属性不为noneposition为absolute或fixeddisplay为inline-block, table-cell, table-caption, flex, inline-flexoverflow不为visible BFC元素的特点根据BFC布局规则：1.每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。2.BFC的区域不会与float box重叠。3.计算BFC的高度时，浮动元素也参与计算 BFC的使用场景 自适应布局 清楚内部浮动 防止margin重叠 移动端PX和REM的换算different size different DPR目前的设计稿 一般是 640 750 1125，一般要先均分成100份，(兼容vh,vm) 750/10 = 75px。div宽是240px120px css的书写改为3.2rem 1.6rem。 配合响应式修改html根的大小。字体不建议使用rem的，data-dpr属性动态设置字体大小。屏幕变大放更多的文字，或者屏幕更大放更多的字。神奇的padding/margin-top等比例缩放间距 ie6中的经典bug1、IE6怪异解析之padding与border算入宽高原因：未加文档声明造成非盒模型解析解决方法：加入文档声明&lt;!doctype html&gt;2、IE6在块元素、左右浮动、设定marin时造成margin双倍（双边距）解决方法：display:inline3、以下三种其实是同一种bug，其实也不算是个bug，举个例子：父标签高度20，子标签11，垂直居中，20-11=9，9要分给文字的上面与下面，怎么分？IE6就会与其它的不同，所以，尽量避免。1）字体大小为奇数之边框高度少1px解决方法：字体大小设置为偶数或line-height为偶数2）line-height，文本垂直居中差1px解决方法：padding-top代替line-height居中，或line-height加1或减13）与父标签的宽度的奇偶不同的居中造成1px的偏离解决方法：如果父标签是奇数宽度，则子标签也用奇数宽度;如果是父标签偶数宽度，则子标签也用偶数宽度4、内部盒模型超出父级时，父级被撑大解决方法：父标签使用overflow:hidden5、line-height默认行高bug解决方法：line-height设值6、行标签之间会有一小段空白解决方法：float或结构并排(可读性差，不建议)7、标签高度无法小于19px解决方法：overflow: hidden;8、左浮元素margin-bottom失效解决方法：显示设置高度 or 父标签设置_padding-bottom代替子标签的margin-bottom or 再放个标签让父标签浮动，子标签 margin- bottom，即(margin-bottom与float不同时作用于一个标签)9、img于块元素中，底边多出空白解决方法：父级设置overflow: hidden; 或 img { display: block; } 或 _margin: -5px;10、li之间会有间距解决方法：float: left;11、块元素中有文字及右浮动的行元素，行元素换行解决方法：将行元素置于块元素内的文字前12、position下的left，bottom错位解决方法：为父级(relative层)设置宽高或添加*zoom:113、子级中有设置position，则父级overflow失效解决方法：为父级设置position:relative","content":"<h3 id=\"css代码检测以及项目规范\"><a href=\"#css代码检测以及项目规范\" class=\"headerlink\" title=\"css代码检测以及项目规范\"></a><strong>css代码检测以及项目规范</strong></h3><p>1.不要使用多个class选择元素，如a.foo.boo，这在ie6及以下不能正确解析<br>2.移除空的css规则，如a{}<br>3.正确的使用显示属性，如display:inline不要和width，height，float，margin,padding同时使用，display:inline-block不要和float同时使用等<br>4.避免过多的浮动，当浮动次数超过十次时，会显示警告<br><a id=\"more\"></a><br>5.避免使用过多的字号，当字号声明超过十种时，显示警告<br>6.避免使用过多web字体，当使用超过五次时，显示警告<br>7.避免使用id作为样式选择器<br>8.标题元素只定义一次<br>9.使用width:100%时要小心<br>10.属性值为0时不要写单位<br>11.各浏览器专属的css属性要有规范，<br>例如.foo{-moz-border-radius:5px;border-radius:5px}<br>12.避免使用看起来像正则表达式的css3选择器<br>13.遵守盒模型规则</p>\n<h3 id=\"css-Icon收藏\"><a href=\"#css-Icon收藏\" class=\"headerlink\" title=\"css Icon收藏\"></a>css Icon收藏</h3><p><a href=\"http://cssicon.space/#/\" target=\"_blank\" rel=\"noopener\">http://cssicon.space/#/</a></p>\n<h3 id=\"css高级绘制技巧\"><a href=\"#css高级绘制技巧\" class=\"headerlink\" title=\"css高级绘制技巧\"></a>css高级绘制技巧</h3><ul>\n<li>border border-radius</li>\n<li>after before</li>\n<li>box-shadow</li>\n<li>linear-gradient </li>\n<li>radial-grandient</li>\n</ul>\n<h3 id=\"BFC的概念生成和使用场景\"><a href=\"#BFC的概念生成和使用场景\" class=\"headerlink\" title=\"BFC的概念生成和使用场景\"></a>BFC的概念生成和使用场景</h3><p><strong>概念</strong><br>Box: CSS布局的基本单位<br>Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：<br>block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；<br>inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；<br>Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。</p>\n<p><strong>如何生成BFC</strong><br>根元素<br>float属性不为none<br>position为absolute或fixed<br>display为inline-block, table-cell, table-caption, flex, inline-flex<br>overflow不为visible</p>\n<p><strong>BFC元素的特点</strong><br>根据BFC布局规则：<br>1.每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。<br>2.BFC的区域不会与float box重叠。<br>3.计算BFC的高度时，浮动元素也参与计算</p>\n<p><strong>BFC的使用场景</strong></p>\n<ul>\n<li>自适应布局</li>\n<li>清楚内部浮动</li>\n<li>防止margin重叠</li>\n</ul>\n<h3 id=\"移动端PX和REM的换算\"><a href=\"#移动端PX和REM的换算\" class=\"headerlink\" title=\"移动端PX和REM的换算\"></a>移动端PX和REM的换算</h3><p>different size  different DPR<br>目前的设计稿 一般是 640 750 1125，一般要先均分成100份，(兼容vh,vm) 750/10 = 75px。div宽是240px<em>120px css的书写改为3.2rem </em> 1.6rem。 配合响应式修改html根的大小。<br>字体不建议使用rem的，data-dpr属性动态设置字体大小。屏幕变大放更多的文字，或者屏幕更大放更多的字。<br>神奇的padding/margin-top等比例缩放间距</p>\n<h3 id=\"ie6中的经典bug\"><a href=\"#ie6中的经典bug\" class=\"headerlink\" title=\"ie6中的经典bug\"></a>ie6中的经典bug</h3><p>1、IE6怪异解析之padding与border算入宽高<br>原因：未加文档声明造成非盒模型解析<br>解决方法：加入文档声明&lt;!doctype html&gt;<br>2、IE6在块元素、左右浮动、设定marin时造成margin双倍（双边距）<br>解决方法：display:inline<br>3、以下三种其实是同一种bug，其实也不算是个bug，举个例子：父标签高度20，子标签11，垂直居中，20-11=9，9要分给文字的上面与下面，怎么分？IE6就会与其它的不同，所以，尽量避免。<br>1）字体大小为奇数之边框高度少1px<br>解决方法：字体大小设置为偶数或line-height为偶数<br>2）line-height，文本垂直居中差1px<br>解决方法：padding-top代替line-height居中，或line-height加1或减1<br>3）与父标签的宽度的奇偶不同的居中造成1px的偏离<br>解决方法：如果父标签是奇数宽度，则子标签也用奇数宽度;如果是父标签偶数宽度，则子标签也用偶数宽度<br>4、内部盒模型超出父级时，父级被撑大<br>解决方法：父标签使用overflow:hidden<br>5、line-height默认行高bug<br>解决方法：line-height设值<br>6、行标签之间会有一小段空白<br>解决方法：float或结构并排(可读性差，不建议)<br>7、标签高度无法小于19px<br>解决方法：overflow: hidden;<br>8、左浮元素margin-bottom失效<br>解决方法：显示设置高度 or 父标签设置_padding-bottom代替子标签的margin-bottom or 再放个标签让父标签浮动，子标签 margin- bottom，即(margin-bottom与float不同时作用于一个标签)<br>9、img于块元素中，底边多出空白<br>解决方法：父级设置overflow: hidden; 或 img { display: block; } 或 _margin: -5px;<br>10、li之间会有间距<br>解决方法：float: left;<br>11、块元素中有文字及右浮动的行元素，行元素换行<br>解决方法：将行元素置于块元素内的文字前<br>12、position下的left，bottom错位<br>解决方法：为父级(relative层)设置宽高或添加*zoom:1<br>13、子级中有设置position，则父级overflow失效<br>解决方法：为父级设置position:relative</p>\n","excerpt":"css代码检测以及项目规范1.不要使用多个class选择元素，如a.foo.boo，这在ie6及以下不能正确解析2.移除空的css规则，如a{}3.正确的使用显示属性，如display:inline不要和width，height，float，margin,padding同时使用，display:inline-block不要和float同时使用等4.避免过多的浮动，当浮动次数超过十次时，会显示警告","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://www.ding1996.cn/tags/css/"}]},{"title":"js学习笔记","date":"2017-12-08T03:08:04.000Z","path":"2017/12/08/it-js-note-20171208/","text":"Object.keys(Object)返回的对象的key如果是数组返回下标 12345var data=&#123;'name':'dingsheng','age':'222'&#125;;var arr = [10,20,30];Object.keys(data); //['name','dingsheng','age']Object.keys(arr);//[0,1,2] ‘ proto ‘俗称隐事原型 1234var o = new Objcet()o.__proto_=Object.prototype;// 对象的__proto__等于构造函数的原型","content":"<p>Object.keys(Object)<br>返回的对象的key<br>如果是数组返回下标</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> data=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'dingsheng'</span>,<span class=\"string\">'age'</span>:<span class=\"string\">'222'</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>];</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(data); <span class=\"comment\">//['name','dingsheng','age']</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(arr);<span class=\"comment\">//[0,1,2]</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>‘<strong> proto </strong>‘<br>俗称隐事原型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> Objcet()</span><br><span class=\"line\">o.__proto_=<span class=\"built_in\">Object</span>.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对象的__proto__等于构造函数的原型</span></span><br></pre></td></tr></table></figure>\n","excerpt":"Object.keys(Object)返回的对象的key如果是数组返回下标 12345var data=&#123;'name':'dingsheng','age':'222'&#125;;var arr = [10,20,30];Object.keys(data); //['name','dingsheng','age']Object.keys(arr);//[0,1,2]","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"学习清单","date":"2017-12-06T01:57:25.000Z","path":"2017/12/06/it-note/","text":"实践manifest ES6 Vue2.0高级再看一遍 ES5看一遍再 HTML5+CSS3 那本书 NodeJs 数据结构的书看一下 看微信视频的性能测试一类没见过的东西 看一下张磊的分享微信技术:继承,双向绑定,原型链 http底层协议 js多继承,圣杯模式 前端架构需要做的事情不止是在coding层,需要在性能优化上更着重一些 学Nodejs之前先学一下mysql REST API eslint是编码规范工具,看一下有空 git分支上线看看 mocha单元测试工具 如何设计模块? 假设一个主模块下有多个模块需要通信,往上冒泡,那么是不是会卡? 有时候模块层级太多,是不是会影响性能?那么这时候应该怎么解决 也有可能模块本身并不知道自己处于谁是我的父级的状态,那么怎么办? 如何管理模块冒泡并不至于卡?是不是委托事件能解决的? localStorage长度处理 webSocket如何做到向下兼容,和websocket的协议 手机端1像素问题怎么处理 cookie @media看一下 浏览器输入网址到显示网站发生了什么 1 浏览器从url中解析出服务器的主机名2 浏览器将服务器的主机名转换成服务器的IP地址3 浏览器将端口从URL解析出来4 浏览器建立一条与webp服务器的tcp链接5 浏览器向服务器发送一条 http请求报文6 服务器想浏览器回送一条http响应报文7 关闭连接 浏览器显示文档","content":"<ul>\n<li>实践manifest</li>\n<li>ES6</li>\n<li>Vue2.0高级再看一遍</li>\n<li>ES5看一遍再</li>\n<li>HTML5+CSS3 那本书</li>\n<li>NodeJs</li>\n<li>数据结构的书看一下</li>\n<li>看微信视频的性能测试一类没见过的东西</li>\n<li>看一下张磊的分享微信技术:继承,双向绑定,原型链</li>\n<li>http底层协议</li>\n<li>js多继承,圣杯模式</li>\n<li>前端架构需要做的事情不止是在coding层,需要在性能优化上更着重一些</li>\n<li>学Nodejs之前先学一下mysql</li>\n<li>REST API</li>\n<li><a id=\"more\"></a></li>\n<li>eslint是编码规范工具,看一下有空</li>\n<li>git分支上线看看</li>\n<li>mocha单元测试工具</li>\n<li>如何设计模块?</li>\n<li>假设一个主模块下有多个模块需要通信,往上冒泡,那么是不是会卡?</li>\n<li>有时候模块层级太多,是不是会影响性能?那么这时候应该怎么解决</li>\n<li>也有可能模块本身并不知道自己处于谁是我的父级的状态,那么怎么办?</li>\n<li>如何管理模块冒泡并不至于卡?是不是委托事件能解决的?</li>\n<li>localStorage长度处理</li>\n<li>webSocket如何做到向下兼容,和websocket的协议</li>\n<li>手机端1像素问题怎么处理</li>\n<li>cookie</li>\n<li>@media看一下</li>\n</ul>\n<p>浏览器输入网址到显示网站发生了什么</p>\n<p>1 浏览器从url中解析出服务器的主机名<br>2 浏览器将服务器的主机名转换成服务器的IP地址<br>3 浏览器将端口从URL解析出来<br>4 浏览器建立一条与webp服务器的tcp链接<br>5 浏览器向服务器发送一条 http请求报文<br>6 服务器想浏览器回送一条http响应报文<br>7 关闭连接 浏览器显示文档</p>\n","excerpt":"实践manifest ES6 Vue2.0高级再看一遍 ES5看一遍再 HTML5+CSS3 那本书 NodeJs 数据结构的书看一下 看微信视频的性能测试一类没见过的东西 看一下张磊的分享微信技术:继承,双向绑定,原型链 http底层协议 js多继承,圣杯模式 前端架构需要做的事情不止是在coding层,需要在性能优化上更着重一些 学Nodejs之前先学一下mysql REST API","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"移动端常见的问题以及解决方案","date":"2017-12-05T02:46:02.000Z","path":"2017/12/05/it-h5web-bug/","text":"https://segmentfault.com/a/1190000004263966 https://github.com/AlloyTeam/Mars/tree/master/issues http://note.rpsh.net/posts/2015/08/27/mobile-web-html-css-faq/","content":"<p><a href=\"https://segmentfault.com/a/1190000004263966\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000004263966</a></p>\n<p><a href=\"https://github.com/AlloyTeam/Mars/tree/master/issues\" target=\"_blank\" rel=\"noopener\">https://github.com/AlloyTeam/Mars/tree/master/issues</a></p>\n<p><a href=\"http://note.rpsh.net/posts/2015/08/27/mobile-web-html-css-faq/\" target=\"_blank\" rel=\"noopener\">http://note.rpsh.net/posts/2015/08/27/mobile-web-html-css-faq/</a></p>\n","excerpt":"","categories":[],"tags":[]},{"title":"css3 animation详解","date":"2017-12-05T02:21:38.000Z","path":"2017/12/05/it-css3-animation/","text":"最近在面试中经常会被问到css3的动画属性今天把animation的文档详细看了遍 http://www.w3school.com.cn/css3/css3_animation.asp 属性 描述 CSS @keyframes 规定动画。 3 animation 所有动画属性的简写属性，除了 animation-play-state 属性。 3 animation-name 规定 @keyframes 动画的名称。 3 animation-duration 规定动画完成一个周期所花费的秒或毫秒。默认是 0。 3 animation-timing-function 规定动画的速度曲线。默认是 “ease”。 3 animation-delay 规定动画何时开始。默认是 0。 3 animation-iteration-count 规定动画被播放的次数。默认是 1。 3 animation-direction 规定动画是否在下一周期逆向地播放。默认是 “normal”。 3 animation-play-state 规定动画是否正在运行或暂停。默认是 “running”。 3 animation-fill-mode 规定对象动画时间之外的状态。 3 animation是可以绑定多个动画 animation-fill-mode :forwards 可以让动画运动完停留在最后一帧","content":"<blockquote>\n<p>最近在面试中经常会被问到css3的动画属性今天把animation的文档详细看了遍</p>\n</blockquote>\n<p><a href=\"http://www.w3school.com.cn/css3/css3_animation.asp\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/css3/css3_animation.asp</a></p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n<th>CSS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@keyframes</td>\n<td>规定动画。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation</td>\n<td>所有动画属性的简写属性，除了 animation-play-state 属性。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-name</td>\n<td>规定 @keyframes 动画的名称。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-duration</td>\n<td>规定动画完成一个周期所花费的秒或毫秒。默认是 0。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-timing-function</td>\n<td>规定动画的速度曲线。默认是 “ease”。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-delay</td>\n<td>规定动画何时开始。默认是 0。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-iteration-count</td>\n<td>规定动画被播放的次数。默认是 1。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-direction</td>\n<td>规定动画是否在下一周期逆向地播放。默认是 “normal”。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-play-state</td>\n<td>规定动画是否正在运行或暂停。默认是 “running”。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-fill-mode</td>\n<td>规定对象动画时间之外的状态。</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>animation是可以绑定多个动画</p>\n<p>animation-fill-mode :forwards </p>\n<p>可以让动画运动完停留在最后一帧</p>\n","excerpt":"","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://www.ding1996.cn/tags/css/"}]},{"title":"offsetLeft,Left,clientLeft的区别","date":"2017-12-05T02:17:47.000Z","path":"2017/12/05/it-js-offsetLeft/","text":"原文 offsetLeft,Left,clientLeft的区别https://www.cnblogs.com/panjun-Donet/articles/1294033.html","content":"<p>原文 offsetLeft,Left,clientLeft的区别<br><a href=\"https://www.cnblogs.com/panjun-Donet/articles/1294033.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/panjun-Donet/articles/1294033.html</a></p>\n<p><img src=\"https://images.cnblogs.com/cnblogs_com/panjun-donet/dhtmopos.gif\" alt=\"\"></p>\n","excerpt":"","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"情商学习笔记","date":"2017-12-01T03:04:34.000Z","path":"2017/12/01/20171201/","text":"毕业了已经不再是小孩子了，在职场也好在外面认识朋友也好避免不了与人接触,会不会为人处世就是体验情商的时候 自认为自己情商比较低和别人处关系经常容易做吃力不讨好的事情所以想好好提升下自己的情商。我在蜻蜓FM上面买了个老梁的四大名著讲情商这里是我总结的一些点。 什么是情商首先情商不是天生的，情商是后天随着环境和年龄对为人处世经验的总结的； 情商的五个层面1 了解自己的情绪 控制自己情绪 欲望2 了解别人的情绪 控制别人情绪 欲望3 自我认知4 自我激励5 自我提升 如何参加聚会1 低调2 体贴3 活跃气氛 拒绝不是艺术而是战术生活中我们经常会拒绝人但是怎么拒绝人？是委婉还是直接？拒绝人是根绝对方的性格是思维模式来使用拒绝的方法 比较聪明的人可以委婉一点。脑子一根筋的可以直接一点。","content":"<blockquote>\n<p>毕业了已经不再是小孩子了，在职场也好在外面认识朋友也好避免不了与人接触,会不会为人处世就是体验情商的时候</p>\n</blockquote>\n<p>自认为自己情商比较低和别人处关系经常容易做吃力不讨好的事情所以想好好提升下自己的情商。我在蜻蜓FM上面买了个老梁的四大名著讲情商这里是我总结的一些点。</p>\n<a id=\"more\"></a>\n<h4 id=\"什么是情商\"><a href=\"#什么是情商\" class=\"headerlink\" title=\"什么是情商\"></a>什么是情商</h4><p>首先情商不是天生的，情商是后天随着环境和年龄对为人处世经验的总结的；</p>\n<h4 id=\"情商的五个层面\"><a href=\"#情商的五个层面\" class=\"headerlink\" title=\"情商的五个层面\"></a>情商的五个层面</h4><p>1  了解自己的情绪  控制自己情绪 欲望<br>2  了解别人的情绪  控制别人情绪 欲望<br>3  自我认知<br>4  自我激励<br>5  自我提升</p>\n<h4 id=\"如何参加聚会\"><a href=\"#如何参加聚会\" class=\"headerlink\" title=\"如何参加聚会\"></a>如何参加聚会</h4><p>1  低调<br>2  体贴<br>3  活跃气氛</p>\n<h4 id=\"拒绝不是艺术而是战术\"><a href=\"#拒绝不是艺术而是战术\" class=\"headerlink\" title=\"拒绝不是艺术而是战术\"></a>拒绝不是艺术而是战术</h4><p>生活中我们经常会拒绝人但是怎么拒绝人？是委婉还是直接？<br>拒绝人是根绝对方的性格是思维模式来使用拒绝的方法 比较聪明的人可以委婉一点。脑子一根筋的可以直接一点。</p>\n","excerpt":"毕业了已经不再是小孩子了，在职场也好在外面认识朋友也好避免不了与人接触,会不会为人处世就是体验情商的时候 自认为自己情商比较低和别人处关系经常容易做吃力不讨好的事情所以想好好提升下自己的情商。我在蜻蜓FM上面买了个老梁的四大名著讲情商这里是我总结的一些点。","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://www.ding1996.cn/tags/随笔/"}]},{"title":"php学习笔记","date":"2017-11-30T01:32:31.000Z","path":"2017/11/30/it-php-biji01/","text":"php基础语法php需要写在&lt;?php ?&gt;环境里 定义变量 $a = ‘a’; isset()方法判断这个变量是否存在 echo ‘a’ 打印方法 1234567$a = 'hah'; // 函数内部拿不到 外面的变量需要添加 global 才能拿到function ding()&#123; global $a; echo $a;&#125; ding() php引入外部文件的方法1 include_once() 引入文件错误程序依然会执行 2 require_once() 文件如果错误整个程序就不会执行 3 require() 数组12$arry = array('msg'=&gt;'hah')$arry = array('0'=&gt;'hah') json_encode() 这个方法可以把数组转换成json sessionsession_start() 回话机制 $_SESSION[‘key’] = value; get post$GET[‘username’] $POST[‘username’] $REQUEST[‘username’] get和post的数组都能拿到 php-mysql参考文档 http://www.w3school.com.cn/php/php_mysql_connect.asp 123456789101112131415161718192021222324252627282930&lt;?php$con = new mysqli(\"localhost:8889\",\"root\",\"root\",'phpxuexi');if (!$con)&#123; die('Could not connect: ' . mysql_error());&#125;else&#123; echo \"chenggogn\";&#125;$con=mysqli_set_charset($mysqli, \"utf8\"); // 设置编码格式$sql = \"SELECT * FROM news\";$result = $con-&gt;query($sql);// echo $result;// var_dump($result);if ($result-&gt;num_rows &gt; 0) &#123; // 输出每行数据 while($row = $result-&gt;fetch_assoc()) &#123; printf (\"%s %s\\n\", $row[\"newsid\"], $row[\"newstitle\"]); &#125;&#125; else &#123; echo \"0 results\";&#125;// echo \"string\";// some code?&gt; 打印logecho普通字符串和变量 var_dump 打印出对象 printf(%s %s,’ding’,’sheng’) // ding sheng 02php面向对象软件危机 软件工程学 重用 灵活 扩展 特点 封装 继承 多态 面向对象有三个主要特性：1对象的行为 2对象的状态 3对象的标识 如何抽象一个类类的声明 成员属性 成员方法 php类的语法语法123456789101112131415161718class Person&#123; public $age; public function say($word)&#123; echo \"she say &#123;$word&#125;\"; &#125; public function info()&#123; $this-&gt;say('Hi'); return $this-&gt;age; &#125;&#125;$xiaohong = new Person();$xiaohong-&gt;age=12;$age = $xiaohong-&gt;info();echo $age; 构造函数和析构函数12345678910111213141516171819202122232425262728293031323334&lt;?php class Person&#123; // 构造方法 public function __construct($name,$age)&#123; // 当这个类new的时候自动执行 echo ($name.'hello'); echo \"&lt;hr/&gt;\"; $this-&gt;name=$name; $this-&gt;age = $age; &#125; public function data()&#123; return $this-&gt;age; &#125; // 析构方法 public function __destruct()&#123; // 用途 可以进行资源的释放操作 数据库关闭 // 对象呗销货的时候执行 没有代码再去运行了 echo \"bey bey &#123;$this-&gt;name&#125;\"; &#125;&#125;$xiaowang= new Person('ding',30);$xiaohong= new Person('hong',30);// echo $xiaowang-&gt;data();?&gt; 修饰符 以及魔术方法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;?php // 修饰符// public 公共// private 私有的// protected 受保护的class Person&#123; public $x=0; public $name='dingsheng'; // 公有的 private $age='22'; // 私有的 protected $money='10' ; // 受保护的 // 私有的成员方法 不能在类外部直接被访问 private function getName()&#123; return $this-&gt;age; &#125; // 被保护的成员方法 不能类的外部直接被访问 protected function getMoney()&#123; return $this-&gt;money; &#125; public function userCard()&#123; echo 'name:'.$this-&gt;name.'年龄:'.$this-&gt;getName().'多少钱:'.$this-&gt;getMoney(); &#125; public function __set($key,$value)&#123; // 魔术方法只针对受保护的 private protechted; if($key=='name' &amp;&amp; $value=='laowang')&#123; $this-&gt;name='xiaowang'; &#125; &#125; // get 只接受一个参数 public function __get($key)&#123; if($key=='age')&#123; return 'girl not tell you'; &#125; &#125; // 判断是否有这个属性 public function __isset($key)&#123; if($key=='age')&#123; return true; &#125; &#125; // 注销 public function __unset($key)&#123; if($key=='age')&#123; unset($this-&gt;age); &#125; &#125;&#125;$xw = new Person();$xw-&gt;name='laowang';echo $xw-&gt;userCard();echo $xw-&gt;age;var_dump(isset($xw-&gt;age));unset($xw-&gt;x);echo $xw-&gt;x; ?&gt;","content":"<h3 id=\"php基础语法\"><a href=\"#php基础语法\" class=\"headerlink\" title=\"php基础语法\"></a>php基础语法</h3><p>php需要写在&lt;?php ?&gt;环境里</p>\n<p>定义变量 $a = ‘a’;</p>\n<p>isset()方法判断这个变量是否存在</p>\n<p>echo ‘a’  打印方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = <span class=\"string\">'hah'</span>;</span><br><span class=\"line\">   <span class=\"comment\">// 函数内部拿不到 外面的变量需要添加 global 才能拿到</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ding</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">global</span> $a;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> $a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> ding()</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"php引入外部文件的方法\"><a href=\"#php引入外部文件的方法\" class=\"headerlink\" title=\"php引入外部文件的方法\"></a>php引入外部文件的方法</h3><p>1 include_once() 引入文件错误程序依然会执行</p>\n<p>2 require_once() 文件如果错误整个程序就不会执行</p>\n<p>3 require() </p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arry = <span class=\"keyword\">array</span>(<span class=\"string\">'msg'</span>=&gt;<span class=\"string\">'hah'</span>)</span><br><span class=\"line\">$arry = <span class=\"keyword\">array</span>(<span class=\"string\">'0'</span>=&gt;<span class=\"string\">'hah'</span>)</span><br></pre></td></tr></table></figure>\n<p>json_encode() 这个方法可以把数组转换成json</p>\n<h3 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h3><p>session_start() 回话机制</p>\n<p>$_SESSION[‘key’] = value;</p>\n<h3 id=\"get-post\"><a href=\"#get-post\" class=\"headerlink\" title=\"get post\"></a>get post</h3><p>$GET[‘username’]</p>\n<p>$POST[‘username’]</p>\n<p>$REQUEST[‘username’] get和post的数组都能拿到</p>\n<h3 id=\"php-mysql\"><a href=\"#php-mysql\" class=\"headerlink\" title=\"php-mysql\"></a>php-mysql</h3><p>参考文档 <a href=\"http://www.w3school.com.cn/php/php_mysql_connect.asp\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/php/php_mysql_connect.asp</a></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$con = <span class=\"keyword\">new</span> mysqli(<span class=\"string\">\"localhost:8889\"</span>,<span class=\"string\">\"root\"</span>,<span class=\"string\">\"root\"</span>,<span class=\"string\">'phpxuexi'</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!$con)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">die</span>(<span class=\"string\">'Could not connect: '</span> . mysql_error());</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"chenggogn\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$con=mysqli_set_charset($mysqli, <span class=\"string\">\"utf8\"</span>);  <span class=\"comment\">// 设置编码格式</span></span><br><span class=\"line\"></span><br><span class=\"line\">$sql = <span class=\"string\">\"SELECT * FROM news\"</span>;</span><br><span class=\"line\">$result = $con-&gt;query($sql);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// echo $result;</span></span><br><span class=\"line\"><span class=\"comment\">// var_dump($result);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($result-&gt;num_rows &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输出每行数据</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>($row = $result-&gt;fetch_assoc()) &#123;</span><br><span class=\"line\">           printf (<span class=\"string\">\"%s %s\\n\"</span>, $row[<span class=\"string\">\"newsid\"</span>], $row[<span class=\"string\">\"newstitle\"</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"0 results\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// echo \"string\";</span></span><br><span class=\"line\"><span class=\"comment\">// some code</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"打印log\"><a href=\"#打印log\" class=\"headerlink\" title=\"打印log\"></a>打印log</h3><p>echo普通字符串和变量</p>\n<p>var_dump 打印出对象</p>\n<p> printf(%s %s,’ding’,’sheng’) // ding sheng</p>\n<h2 id=\"02php面向对象\"><a href=\"#02php面向对象\" class=\"headerlink\" title=\"02php面向对象\"></a>02php面向对象</h2><p>软件危机 软件工程学</p>\n<p>重用 灵活 扩展</p>\n<p><strong>特点</strong></p>\n<p>封装 继承 多态</p>\n<h3 id=\"面向对象有三个主要特性：\"><a href=\"#面向对象有三个主要特性：\" class=\"headerlink\" title=\"面向对象有三个主要特性：\"></a>面向对象有三个主要特性：</h3><p>1对象的行为</p>\n<p>2对象的状态</p>\n<p>3对象的标识</p>\n<h3 id=\"如何抽象一个类\"><a href=\"#如何抽象一个类\" class=\"headerlink\" title=\"如何抽象一个类\"></a>如何抽象一个类</h3><p>类的声明</p>\n<p>成员属性 </p>\n<p>成员方法</p>\n<h3 id=\"php类的语法语法\"><a href=\"#php类的语法语法\" class=\"headerlink\" title=\"php类的语法语法\"></a>php类的语法语法</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> $age;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span><span class=\"params\">($word)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"she say &#123;$word&#125;\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">info</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;say(<span class=\"string\">'Hi'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$xiaohong = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">$xiaohong-&gt;age=<span class=\"number\">12</span>;</span><br><span class=\"line\">$age = $xiaohong-&gt;info();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $age;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造函数和析构函数\"><a href=\"#构造函数和析构函数\" class=\"headerlink\" title=\"构造函数和析构函数\"></a>构造函数和析构函数</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//  构造方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($name,$age)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 当这个类new的时候自动执行</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> ($name.<span class=\"string\">'hello'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;hr/&gt;\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;name=$name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;age = $age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">data</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 析构方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">           <span class=\"comment\">//  用途 可以进行资源的释放操作 数据库关闭</span></span><br><span class=\"line\">           <span class=\"comment\">// 对象呗销货的时候执行 没有代码再去运行了</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"bey bey  &#123;$this-&gt;name&#125;\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$xiaowang= <span class=\"keyword\">new</span> Person(<span class=\"string\">'ding'</span>,<span class=\"number\">30</span>);</span><br><span class=\"line\">$xiaohong= <span class=\"keyword\">new</span> Person(<span class=\"string\">'hong'</span>,<span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"comment\">// echo $xiaowang-&gt;data();</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修饰符-以及魔术方法\"><a href=\"#修饰符-以及魔术方法\" class=\"headerlink\" title=\"修饰符 以及魔术方法\"></a>修饰符 以及魔术方法</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"comment\">// 修饰符</span></span><br><span class=\"line\"><span class=\"comment\">// public  公共</span></span><br><span class=\"line\"><span class=\"comment\">// private 私有的</span></span><br><span class=\"line\"><span class=\"comment\">// protected  受保护的</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> $x=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> $name=<span class=\"string\">'dingsheng'</span>;   <span class=\"comment\">// 公有的</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> $age=<span class=\"string\">'22'</span>; <span class=\"comment\">// 私有的</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span>  $money=<span class=\"string\">'10'</span> ; <span class=\"comment\">// 受保护的</span></span><br><span class=\"line\">\t<span class=\"comment\">// 私有的成员方法 不能在类外部直接被访问</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>  <span class=\"keyword\">$this</span>-&gt;age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//  被保护的成员方法 不能类的外部直接被访问</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMoney</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;money;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">userCard</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">'name:'</span>.<span class=\"keyword\">$this</span>-&gt;name.<span class=\"string\">'年龄:'</span>.<span class=\"keyword\">$this</span>-&gt;getName().<span class=\"string\">'多少钱:'</span>.<span class=\"keyword\">$this</span>-&gt;getMoney();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span>  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__set</span><span class=\"params\">($key,$value)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 魔术方法只针对受保护的 private protechted;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>($key==<span class=\"string\">'name'</span> &amp;&amp; $value==<span class=\"string\">'laowang'</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">$this</span>-&gt;name=<span class=\"string\">'xiaowang'</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// get 只接受一个参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__get</span><span class=\"params\">($key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>($key==<span class=\"string\">'age'</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">'girl not tell you'</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//  判断是否有这个属性</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__isset</span><span class=\"params\">($key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>($key==<span class=\"string\">'age'</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 注销</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__unset</span><span class=\"params\">($key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>($key==<span class=\"string\">'age'</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;age);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$xw = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">$xw-&gt;name=<span class=\"string\">'laowang'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $xw-&gt;userCard();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $xw-&gt;age;</span><br><span class=\"line\">var_dump(<span class=\"keyword\">isset</span>($xw-&gt;age));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">unset</span>($xw-&gt;x);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $xw-&gt;x;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n","excerpt":"php基础语法php需要写在&lt;?php ?&gt;环境里 定义变量 $a = ‘a’; isset()方法判断这个变量是否存在 echo ‘a’ 打印方法 1234567$a = 'hah'; // 函数内部拿不到 外面的变量需要添加 global 才能拿到function ding()&#123; global $a; echo $a;&#125; ding()","categories":[],"tags":[{"name":"php","slug":"php","permalink":"http://www.ding1996.cn/tags/php/"}]},{"title":"Liunx文件传输Scp命令使用","date":"2017-11-22T02:50:04.000Z","path":"2017/11/22/it-linux-scp/","text":"\u0010 linux上面本地和服务器如何进行文件传输—scplinux 的 scp 命令 可以 在 linux 之间复制 文件 和 目录； 文件上传几种方式 scp local_file remote_username@remote_ip:remote_folder scp local_file remote_username@remote_ip:remote_file scp local_file remote_ip:remote_folder scp local_file remote_ip:remote_file 列子 scp /home/space/music/1.mp3 root@www.cumt.edu.cn:/home/root/others/music scp /home/space/music/1.mp3 root@www.cumt.edu.cn:/home/root/others/music/001.mp3 scp /home/space/music/1.mp3 www.cumt.edu.cn:/home/root/others/music scp /home/space/music/1.mp3 www.cumt.edu.cn:/home/root/others/music/001.mp3 文件夹上传需要在scp上面加 -r列如 scp -r /home/space/music/ root@www.cumt.edu.cn:/home/root/others/ scp -r /home/space/music/ www.cumt.edu.cn:/home/root/others/","content":"<blockquote>\n<p>\u0010 linux上面本地和服务器如何进行文件传输—scp<br>linux 的 scp 命令 可以 在 linux 之间复制 文件 和 目录； </p>\n</blockquote>\n<h3 id=\"文件上传几种方式\"><a href=\"#文件上传几种方式\" class=\"headerlink\" title=\"文件上传几种方式\"></a>文件上传几种方式</h3><ul>\n<li>scp local_file remote_username@remote_ip:remote_folder </li>\n<li>scp local_file remote_username@remote_ip:remote_file </li>\n<li>scp local_file remote_ip:remote_folder </li>\n<li>scp local_file remote_ip:remote_file </li>\n</ul>\n<p>列子<br><a id=\"more\"></a></p>\n<ul>\n<li>scp /home/space/music/1.mp3 <a href=\"mailto:root@www.cumt.edu.cn\" target=\"_blank\" rel=\"noopener\">root@www.cumt.edu.cn</a>:/home/root/others/music </li>\n<li>scp /home/space/music/1.mp3 <a href=\"mailto:root@www.cumt.edu.cn\" target=\"_blank\" rel=\"noopener\">root@www.cumt.edu.cn</a>:/home/root/others/music/001.mp3 </li>\n<li>scp /home/space/music/1.mp3 <a href=\"http://www.cumt.edu.cn:/home/root/others/music\" target=\"_blank\" rel=\"noopener\">www.cumt.edu.cn:/home/root/others/music</a> </li>\n<li>scp /home/space/music/1.mp3 <a href=\"http://www.cumt.edu.cn:/home/root/others/music/001.mp3\" target=\"_blank\" rel=\"noopener\">www.cumt.edu.cn:/home/root/others/music/001.mp3</a> </li>\n</ul>\n<h3 id=\"文件夹上传\"><a href=\"#文件夹上传\" class=\"headerlink\" title=\"文件夹上传\"></a>文件夹上传</h3><p>需要在scp上面加 -r<br>列如</p>\n<ul>\n<li>scp -r /home/space/music/ <a href=\"mailto:root@www.cumt.edu.cn\" target=\"_blank\" rel=\"noopener\">root@www.cumt.edu.cn</a>:/home/root/others/ </li>\n<li>scp -r /home/space/music/ <a href=\"http://www.cumt.edu.cn:/home/root/others/\" target=\"_blank\" rel=\"noopener\">www.cumt.edu.cn:/home/root/others/</a> </li>\n</ul>\n","excerpt":"\u0010 linux上面本地和服务器如何进行文件传输—scplinux 的 scp 命令 可以 在 linux 之间复制 文件 和 目录； 文件上传几种方式 scp local_file remote_username@remote_ip:remote_folder scp local_file remote_username@remote_ip:remote_file scp local_file remote_ip:remote_folder scp local_file remote_ip:remote_file 列子","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://www.ding1996.cn/tags/linux/"}]},{"title":"nvm安装以及使用","date":"2017-11-21T03:00:39.000Z","path":"2017/11/21/it-node-nvm/","text":"在我们开发项目中经常会使用到不同版本的node 常规的安装node只能安装一种版本 所以就出现了nvm等版本切换工具 参考资料https://segmentfault.com/a/1190000004404505http://bubkoo.com/2017/01/08/quick-tip-multiple-versions-node-nvm/ 卸载全局安装的 node/npm在官网下载的 node 安装包，运行后会自动安装在全局目录，使用过程中经常会遇到一些权限问题，所以推荐按照以下方法卸载全局安装的 node/npm。首先，打开你 Finder，按 shift+command+G，打开前往文件夹的窗口，分别输入下列目录进去之后删除 node 和 node_modules 相关的文件和文件夹:打开 /usr/local/lib，删除 node 和 node_modules 相关的文件和文件夹打开 /usr/local/include，删除 node 和 node_modules 相关的文件和文件夹如果你是使用的 brew install node 安装的 NodeJS，那么你还需要在终端中执行 brew uninstall node 命令来卸载检查你的个人主文件夹下面的所有的 local、lib 以及 include 文件夹，并且删除所有与 node 和 node_modules 相关的文件以及文件夹打开 /usr/local/bin 并删除 node 可执行文件 你可能还需要在你的终端中输入一些额外的指令： 12345678sudo rm /usr/local/bin/npmsudo rm /usr/local/share/man/man1/node.1sudo rm /usr/local/lib/dtrace/node.dsudo rm -rf ~/.npmsudo rm -rf ~/.node-gypsudo rm /opt/local/bin/nodesudo rm /opt/local/include/nodesudo rm -rf /opt/local/lib/node_modules Nvm安装1wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash 安装完需要添加到全局的环境变量中执行 source ~/.zshrc 会使配置生效 Nvm常用命令nvm ls-remote 查看node有哪些版本 可以安装nvm install v6.19 安装node版本nvm ls 查看安装了哪些node版本nvm use v6.18 切换node版本","content":"<blockquote>\n<p>在我们开发项目中经常会使用到不同版本的node 常规的安装node只能安装一种版本 所以就出现了nvm等版本切换工具</p>\n</blockquote>\n<p>参考资料<br><a href=\"https://segmentfault.com/a/1190000004404505\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000004404505</a><br><a href=\"http://bubkoo.com/2017/01/08/quick-tip-multiple-versions-node-nvm/\" target=\"_blank\" rel=\"noopener\">http://bubkoo.com/2017/01/08/quick-tip-multiple-versions-node-nvm/</a></p>\n<a id=\"more\"></a>\n<h3 id=\"卸载全局安装的-node-npm\"><a href=\"#卸载全局安装的-node-npm\" class=\"headerlink\" title=\"卸载全局安装的 node/npm\"></a>卸载全局安装的 node/npm</h3><p>在官网下载的 node 安装包，运行后会自动安装在全局目录，使用过程中经常会遇到一些权限问题，所以推荐按照以下方法卸载全局安装的 node/npm。<br>首先，打开你 Finder，按 shift+command+G，打开前往文件夹的窗口，分别输入下列目录进去之后删除 node 和 node_modules 相关的文件和文件夹:<br>打开 /usr/local/lib，删除 node 和 node_modules 相关的文件和文件夹<br>打开 /usr/local/include，删除 node 和 node_modules 相关的文件和文件夹<br>如果你是使用的 brew install node 安装的 NodeJS，那么你还需要在终端中执行 brew uninstall node 命令来卸载<br>检查你的个人主文件夹下面的所有的 local、lib 以及 include 文件夹，并且删除所有与 node 和 node_modules 相关的文件以及文件夹<br>打开 /usr/local/bin 并删除 node 可执行文件</p>\n<p>你可能还需要在你的终端中输入一些额外的指令：</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rm /usr/local/bin/npm</span><br><span class=\"line\">sudo rm /usr/local/share/man/man1/node.<span class=\"number\">1</span></span><br><span class=\"line\">sudo rm /usr/local/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">dtrace</span>/<span class=\"title\">node</span>.<span class=\"title\">d</span></span></span><br><span class=\"line\">sudo rm -rf ~<span class=\"regexp\">/.npm</span></span><br><span class=\"line\"><span class=\"regexp\">sudo rm -rf ~/</span>.node-gyp</span><br><span class=\"line\">sudo rm /opt/local/bin/node</span><br><span class=\"line\">sudo rm /opt/local/<span class=\"keyword\">include</span>/node</span><br><span class=\"line\">sudo rm -rf /opt/local/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">node_modules</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Nvm安装\"><a href=\"#Nvm安装\" class=\"headerlink\" title=\"Nvm安装\"></a>Nvm安装</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https:<span class=\"regexp\">//</span>raw.githubusercontent.com<span class=\"regexp\">/creationix/</span>nvm<span class=\"regexp\">/v0.33.0/i</span>nstall.sh | bash</span><br></pre></td></tr></table></figure>\n<p>安装完需要添加到全局的环境变量中<br>执行 source ~/.zshrc  会使配置生效</p>\n<h3 id=\"Nvm常用命令\"><a href=\"#Nvm常用命令\" class=\"headerlink\" title=\"Nvm常用命令\"></a>Nvm常用命令</h3><p>nvm ls-remote  查看node有哪些版本 可以安装<br>nvm install v6.19 安装node版本<br>nvm ls 查看安装了哪些node版本<br>nvm use v6.18 切换node版本</p>\n","excerpt":"在我们开发项目中经常会使用到不同版本的node 常规的安装node只能安装一种版本 所以就出现了nvm等版本切换工具 参考资料https://segmentfault.com/a/1190000004404505http://bubkoo.com/2017/01/08/quick-tip-multiple-versions-node-nvm/","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"}]},{"title":"node开发微信公众号初体验","date":"2017-11-20T08:13:38.000Z","path":"2017/11/20/it-node-weixin/","text":"微信公众号官网 https://mp.weixin.qq.com/ ngrokngrok https://ngrok.com/ 用于微信调试转发内网到外网能访问 node代码app.js 1234567891011var express = require(\"express\");var path=require('path');var app = express();server = require('http').Server(app);app.set('views',__dirname); // 设置视图app.set('view engine', 'html');app.engine( '.html', require( 'ejs' ).__express );require('./index')(app); //路由配置文件server.listen(1234,function()&#123; console.log('App start,port 80.');&#125;); index.js 回复消息 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104var sha1 = require(\"sha1\");var xml = require(\"node-xml\");module.exports = function(app) &#123; app.get(\"/\", function(req, res) &#123; res.render(\"test\", &#123; issuccess: \"success\" &#125;); &#125;); app.get(\"/interface\", function(req, res) &#123; var token = \"weixin\"; var signature = req.query.signature; var timestamp = req.query.timestamp; var echostr = req.query.echostr; var nonce = req.query.nonce; var oriArray = new Array(); oriArray[0] = nonce; oriArray[1] = timestamp; oriArray[2] = token; oriArray.sort(); var original = oriArray.join(\"\"); var scyptoString = sha1(original); if (signature == scyptoString) &#123; //验证成功 res.send(echostr); console.log(\"hah\"); &#125; else &#123; //验证失败 console.log(\"xixiix\"); &#125; &#125;); app.post(\"/interface\", function(req, res) &#123; var post_data = \"\"; req.on(\"data\", function(data) &#123; post_data = data; &#125;); req.on(\"end\", function() &#123; var xmlStr = post_data.toString(\"utf-8\", 0, post_data.length); //解析消息代码 //回发消息代码 // 定义解析存储变量 var ToUserName = \"\"; var FromUserName = \"\"; var CreateTime = \"\"; var MsgType = \"\"; var Content = \"\"; var tempName = \"\"; //开始解析消息 var parse = new xml.SaxParser(function(cb) &#123; cb.onStartElementNS(function(elem, attra, prefix, uri, namespaces) &#123; tempName = elem; &#125;); cb.onCharacters(function(chars) &#123; chars = chars.replace(/(^\\s*)|(\\s*$)/g, \"\"); if (tempName == \"CreateTime\") &#123; CreateTime = chars; &#125; &#125;); cb.onCdata(function(cdata) &#123; if (tempName == \"ToUserName\") &#123; ToUserName = cdata; &#125; else if (tempName == \"FromUserName\") &#123; FromUserName = cdata; &#125; else if (tempName == \"MsgType\") &#123; MsgType = cdata; &#125; else if (tempName == \"Content\") &#123; Content = cdata; &#125; console.log(tempName + \":\" + cdata); &#125;); cb.onEndElementNS(function(elem, prefix, uri) &#123; tempName = \"\"; &#125;); cb.onEndDocument(function() &#123; //按收到的消息格式回复消息 &#125;); &#125;); parse.parseString(xmlStr); CreateTime=parseInt(new Date().getTime() / 1000); var msg=\"\"; if(MsgType==\"text\")&#123; msg=\"谢谢关注,你说的是:\"+Content; //组织返回的数据包 var sendMessage=` &lt;xml&gt; &lt;ToUserName&gt;&lt;![CDATA[$&#123;FromUserName&#125;]]&gt;&lt;/ToUserName&gt; &lt;FromUserName&gt;&lt;![CDATA[$&#123;ToUserName&#125;]]&gt;&lt;/FromUserName&gt; &lt;CreateTime&gt;$&#123;CreateTime&#125;&lt;/CreateTime&gt; &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt; &lt;Content&gt;&lt;![CDATA[$&#123;msg&#125;]]&gt;&lt;/Content&gt; &lt;/xml&gt;`; res.send(sendMessage); &#125; &#125;); &#125;);&#125;; test.html 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head lang=\"en\"&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;汇智网&lt;/title&gt; &lt;/head&gt;&lt;body&gt;&lt;div&gt;&lt;%=issuccess%&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; node app.js","content":"<h3 id=\"微信公众号\"><a href=\"#微信公众号\" class=\"headerlink\" title=\"微信公众号\"></a>微信公众号</h3><p>官网 <a href=\"https://mp.weixin.qq.com/\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/</a> </p>\n<h3 id=\"ngrok\"><a href=\"#ngrok\" class=\"headerlink\" title=\"ngrok\"></a>ngrok</h3><p>ngrok  <a href=\"https://ngrok.com/\" target=\"_blank\" rel=\"noopener\">https://ngrok.com/</a></p>\n<p>用于微信调试转发内网到外网能访问</p>\n<a id=\"more\"></a>\n<h3 id=\"node代码\"><a href=\"#node代码\" class=\"headerlink\" title=\"node代码\"></a>node代码</h3><p>app.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path=<span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\">server  = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>).Server(app);</span><br><span class=\"line\">app.set(<span class=\"string\">'views'</span>,__dirname);    <span class=\"comment\">// 设置视图</span></span><br><span class=\"line\">app.set(<span class=\"string\">'view engine'</span>, <span class=\"string\">'html'</span>);</span><br><span class=\"line\">app.engine( <span class=\"string\">'.html'</span>, <span class=\"built_in\">require</span>( <span class=\"string\">'ejs'</span> ).__express );</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./index'</span>)(app);      <span class=\"comment\">//路由配置文件</span></span><br><span class=\"line\">server.listen(<span class=\"number\">1234</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'App start,port 80.'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>index.js 回复消息 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sha1 = <span class=\"built_in\">require</span>(<span class=\"string\">\"sha1\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> xml = <span class=\"built_in\">require</span>(<span class=\"string\">\"node-xml\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  app.get(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.render(<span class=\"string\">\"test\"</span>, &#123; <span class=\"attr\">issuccess</span>: <span class=\"string\">\"success\"</span> &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  app.get(<span class=\"string\">\"/interface\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> token = <span class=\"string\">\"weixin\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> signature = req.query.signature;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timestamp = req.query.timestamp;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> echostr = req.query.echostr;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nonce = req.query.nonce;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> oriArray = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">    oriArray[<span class=\"number\">0</span>] = nonce;</span><br><span class=\"line\">    oriArray[<span class=\"number\">1</span>] = timestamp;</span><br><span class=\"line\">    oriArray[<span class=\"number\">2</span>] = token;</span><br><span class=\"line\">    oriArray.sort();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> original = oriArray.join(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> scyptoString = sha1(original);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (signature == scyptoString) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//验证成功</span></span><br><span class=\"line\">      res.send(echostr);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hah\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//验证失败</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"xixiix\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  app.post(<span class=\"string\">\"/interface\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> post_data = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    req.on(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">      post_data = data;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    req.on(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> xmlStr = post_data.toString(<span class=\"string\">\"utf-8\"</span>, <span class=\"number\">0</span>, post_data.length);</span><br><span class=\"line\">      <span class=\"comment\">//解析消息代码</span></span><br><span class=\"line\">      <span class=\"comment\">//回发消息代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 定义解析存储变量</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> ToUserName = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> FromUserName = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> CreateTime = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> MsgType = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> Content = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> tempName = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">      <span class=\"comment\">//开始解析消息</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> parse = <span class=\"keyword\">new</span> xml.SaxParser(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">        cb.onStartElementNS(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, attra, prefix, uri, namespaces</span>) </span>&#123;</span><br><span class=\"line\">          tempName = elem;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        cb.onCharacters(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chars</span>) </span>&#123;</span><br><span class=\"line\">          chars = chars.replace(<span class=\"regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (tempName == <span class=\"string\">\"CreateTime\"</span>) &#123;</span><br><span class=\"line\">            CreateTime = chars;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        cb.onCdata(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cdata</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (tempName == <span class=\"string\">\"ToUserName\"</span>) &#123;</span><br><span class=\"line\">            ToUserName = cdata;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tempName == <span class=\"string\">\"FromUserName\"</span>) &#123;</span><br><span class=\"line\">            FromUserName = cdata;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tempName == <span class=\"string\">\"MsgType\"</span>) &#123;</span><br><span class=\"line\">            MsgType = cdata;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tempName == <span class=\"string\">\"Content\"</span>) &#123;</span><br><span class=\"line\">            Content = cdata;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(tempName + <span class=\"string\">\":\"</span> + cdata);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        cb.onEndElementNS(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, prefix, uri</span>) </span>&#123;</span><br><span class=\"line\">          tempName = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        cb.onEndDocument(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//按收到的消息格式回复消息</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      parse.parseString(xmlStr);</span><br><span class=\"line\"></span><br><span class=\"line\">      CreateTime=<span class=\"built_in\">parseInt</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() / <span class=\"number\">1000</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> msg=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(MsgType==<span class=\"string\">\"text\"</span>)&#123;</span><br><span class=\"line\">         msg=<span class=\"string\">\"谢谢关注,你说的是:\"</span>+Content;</span><br><span class=\"line\">         <span class=\"comment\">//组织返回的数据包</span></span><br><span class=\"line\">         <span class=\"keyword\">var</span> sendMessage=<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">                 &lt;xml&gt;</span></span><br><span class=\"line\"><span class=\"string\">                  &lt;ToUserName&gt;&lt;![CDATA[<span class=\"subst\">$&#123;FromUserName&#125;</span>]]&gt;&lt;/ToUserName&gt;</span></span><br><span class=\"line\"><span class=\"string\">                  &lt;FromUserName&gt;&lt;![CDATA[<span class=\"subst\">$&#123;ToUserName&#125;</span>]]&gt;&lt;/FromUserName&gt;</span></span><br><span class=\"line\"><span class=\"string\">                  &lt;CreateTime&gt;<span class=\"subst\">$&#123;CreateTime&#125;</span>&lt;/CreateTime&gt;</span></span><br><span class=\"line\"><span class=\"string\">                  &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;</span></span><br><span class=\"line\"><span class=\"string\">                  &lt;Content&gt;&lt;![CDATA[<span class=\"subst\">$&#123;msg&#125;</span>]]&gt;&lt;/Content&gt;</span></span><br><span class=\"line\"><span class=\"string\">              &lt;/xml&gt;`</span>;</span><br><span class=\"line\">          res.send(sendMessage);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>test.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>汇智网<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=issuccess%</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>node app.js</p>\n","excerpt":"微信公众号官网 https://mp.weixin.qq.com/ ngrokngrok https://ngrok.com/ 用于微信调试转发内网到外网能访问","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"}]},{"title":"js常用工具","date":"2017-11-15T09:55:26.000Z","path":"2017/11/15/it-js-libraries/","text":"libraries目录 仿ECMAScript5中Object.create()函数 仿ECMAScript5中String.trim()函数 仿ECMAScript5中Array.reduce()函数 仿ECMAScript5中Object.keys()函数 仿ECMAScript5中Function.bind()函数 仿ECMAScript5中Array.map()函数 仿Math.max()方法实现 仿String.match()方法实现 仿HTML5的classList属性实现 仿Function.name属性实现 返回元素的第n层祖先元素 返回元素的第n个兄弟元素 返回元素的第n个子代元素 原生JS实现CSS动画之震动 原生JS实现CSS动画之隐藏 在数组中查找所有出现的元素方法 数据类型检测之特殊情况特殊处理 使用innerHTML实现outerHTML属性 插入节点 倒序排列子节点 查询窗口滚动条的位置 查询窗口的视口尺寸 表格的行排序 生成目录表 数组去重 冒泡排序 从URL解析参数 获取纯文本的元素内容 手写一个JSONP实现 查询纯文本形式的内容 查找元素的后代中节点中的所有Text节点 使用innerHTML实现insertAdjacentHTML 拖拽 仿ECMAScript5中Object.create()函数123456789function inherit(obj) &#123; if (obj === null) throw TypeError(); if (Object.create) return Object.create(obj); var t = typeof obj; if (t !== \"object\" &amp;&amp; t !== \"function\") throw TypeError(); function Fn() &#123;&#125;; Fn.prototype = obj; return new Fn();&#125; 仿ECMAScript5中String.trim()函数123456String.prototype.mytrim = function () &#123; String.prototype.trim || function () &#123; if (!this) return this; //空字符串不做处理 return this.replace(/^\\s+|\\s+$/g, \"\") //使用正则表达式经行空格替换 &#125;&#125; 仿ECMAScript5中Array.reduce()函数1234567891011121314151617181920212223242526272829303132var reduce = Array.prototype.reduce ? function (ary, fn, initial) &#123; if (arguments.length &gt; 2) &#123; //如果reduce()方法存在的话 return ary.reduce(fn, initial); //如果传入了一个初始值 &#125; else &#123; return ary.reduce(fn); //否则初始值 &#125;&#125; : function (ary, fn, initial) &#123; //以特定的初始值开始，否则第一个值取自ary var i = 0, len = ary.length, accumulator; if (arguments.length &gt; 2) &#123; accumulator = initial; &#125; else &#123; //找到数组中第一个已经定义的索引 if (len == 0) throw TypeError(); while (i &lt; len) &#123; if (i in ary) &#123; accumulator = ary[i++]; break; &#125; else &#123; i++; &#125; &#125; if (i == len) throw TypeError(); &#125; while (i &lt; len) &#123; //对于数组中剩下的元素依次调用fn if (i in ary) &#123; accumulator = fn.call(undefined, accumulator, ary[i], i, ary) &#125; i++; &#125; return accumulator;&#125; ⬆ back to top 在数组中查找所有出现的元素方法123456789101112function findAll(ary, ele) &#123; var results = [], len = a.length, pos = 0; while (pos &lt; len) &#123; pos = ary.indexOf(ele, pos); if (pos === -1) break; results.push(pos); pos++; &#125; return results;&#125; ⬆ back to top 数据类型检测，特殊情况特殊处理12345function classOf(obj) &#123; if (obj === null) return \"Null\"; if (obj === undefined) return 'Undefined'; return Object.prototype.toString.call(obj).slice(8, -1);&#125; ⬆ back to top 仿ECMAScript5中Object.keys()函数123456789101112function keys(obj) &#123; if (typeof obj !== \"object\") &#123; throw TypeError(); &#125; var result = []; for (var prop in obj) &#123; if (obj.hasOwnProperty(prop)) &#123; result.push(prop); &#125; &#125; return result;&#125; ⬆ back to top 仿Math.max方法（不定实参函数）1234567function max() &#123; var max = Number.NEGATIVE_INFINITY; for (var i = 0; i &lt; arguments.length; i++) &#123; if (arguments[i] &gt; max) max = arguments[i]; &#125; return max;&#125; ⬆ back to top 仿ECMAScript5中Function.bind()函数12345678910111213if (!Function.prototype.bind) &#123; Function.prototype.bind = function (obj) &#123; var self = this, boundArgs = arguments; return function () &#123; var args = [], i; for (i = 1; i &lt; boundArgs.length; i++) args.push(boundArgs[i]); for (i = 1; i &lt; arguments.length; i++) args.push(arguments[i]); return self.apply(obj, args); &#125; &#125;&#125; ⬆ back to top 仿ECMAScript5中Array.map()函数1234567891011var map = Array.prototype.map ? function (ary, fn) &#123; return ary.map(fn);&#125; : function (ary, fn) &#123; var results = []; for (var i = 0, len = ary.length; i &lt; len; i++) &#123; if (i in ary) &#123; results[i] = fn.call(null, ary[i], i, ary); &#125; &#125; return results;&#125; ⬆ back to top 数组去重123456789101112131415Array.prototype.unique = function unique() &#123; var obj = &#123;&#125;; for (var i = 0; i &lt; this.length; i++) &#123; var current = this[i]; if (obj[current] === current) &#123; current = this[this.length - 1]; this.length--; i--; continue; &#125; obj[current] = current &#125; obj = null; return this;&#125; ⬆ back to top 冒泡排序12345678910111213Array.prototype.bubbleSort = function bubbleSort() &#123; var temp = null; for (var i = 0; i &lt; this.length - 1; i++) &#123; for (var k = 0; k &lt; this.length - 1 - i; k++) &#123; if (this[k] &gt; this[k + 1]) &#123; temp = this[k]; this[k] = this[k + 1]; this[k + 1] = temp; &#125; &#125; &#125; return this;&#125; ⬆ back to top 仿String.match()方法实现123456789String.prototype.mymatch = function (reg) &#123; var ary = []; var res = reg.exec(this); while (res) &#123; ary.push(res[0]); res = reg.exec(this); &#125; return ary;&#125; ⬆ back to top 返回元素的第n层祖先元素1234567891011121314/***返回元素ele的第n层祖先元素，如果不存在此类祖先或祖先不是Element，*（例如Document或者DocumentFragment）则返回null*如果n为0，则返回e本身。如果n为1（或省略），则返回其父元素*如果n为2，则返回其祖父元素，依次类推*/function parent(ele, n) &#123; if (n === nudefined) n = 1; while (n-- &amp;&amp; ele) &#123; ele = ele.parentNode; &#125; if (!ele || ele.nodeTope !== 1) return null; return ele;&#125; ⬆ back to top 返回元素的第n个兄弟元素1234567891011121314151617181920212223242526/** *返回元素ele的第n个兄弟元素 *如果n为正，返回后续的第n个兄弟元素 *如果n为负，返回前面的第n个兄弟元素 *如果n为零，返回ele本身 */function sibling(ele, n) &#123; while (ele &amp;&amp; n !== 0) &#123; //如果ele未定义，即刻返回它 if (n &gt; 0) &#123; //查找后续的兄弟元素 if (ele.nextElementSibling) &#123; ele = ele.nextElementSibling; &#125; else &#123; for (ele = ele.nextSibling; ele &amp;&amp; ele.nodeType !== 1; ele = ele.nextSibling) /*空循环*/; &#125; n--; &#125; else &#123; //查找前面的兄弟元素 if (ele.previousElementSibing) &#123; ele = ele.previousElementSibling; &#125; else &#123; for (ele = ele.previousSibling; ele &amp;&amp; ele.nodeType !== 1; ele = ele.previousSibling) /*空循环*/; &#125; n++; &#125; &#125; return ele;&#125; ⬆ back to top 返回元素的第n个子代元素12345678910111213141516171819202122232425262728/** *返回元素ele的第n代子元素，如果不存在则为null *负值n代表从后往前计数。0表示第一个子元素，而-1代表最后一个，-2代表倒数第二个，依次类推 */function child(ele, n) &#123; if (ele.children) &#123; //如果children数组存在 if (n &lt; 0) n += ele.children.length; //转换负的n为数组索引 if (n &lt; 0) return null; //如果它仍然为负，说明没有子元素 return ele.children[n]; //返回指定的子元素 &#125; //如果e没有children数组，找到第一个子元素并向前数，或找到最后一个子元素并往回数 if (n &gt;= 0) &#123; //n非负：从第一个子元素向前数 //找到元素e的第一个子元素 if (ele.firstElementChild) &#123; ele = ele.firstElementChild; &#125; else &#123; for (ele = ele.firstChild; ele &amp;&amp; ele.nodeType !== 1; ele = ele.nextSibling) /*空循环*/; &#125; return sibling(ele, n); //返回第一个子元素的第n个兄弟元素 &#125; else &#123; //n为负：从最后一个子元素往回数 if (ele.lastElementChild) &#123; ele = ele.lastElementChild; &#125; else &#123; for (ele = ele.lastChild; ele &amp;&amp; ele.nodeType !== 1; ele = ele.previousSibling) /*空循环*/; &#125; return sibling(ele, n + 1); //+1来转化最后1个子元素为最后1个兄弟元素 &#125;&#125; ⬆ back to top 表格的行排序12345678910111213141516171819202122232425262728293031323334353637//根据指定表格每行第n个单元格的值，对第一个＜tbody＞中的行进行排序//如果存在comparator函数则使用它，否则按字母表顺序比较function sortrows(table, n, comparator) &#123; var tbody = table.tBodies[0]; //第一个＜tbody＞，可能是隐式创建的 var rows = tbody.getElementsByTagName(\"tr\"); //tbody中的所有行 rows = Array.prototype.slice.call(rows, 0); //真实数组中的快照 //基于第n个＜td＞元素的值对行排序 rows.sort(function (row1, row2) &#123; var cell1 = row1.getElementsByTagName(\"td\")[n]; //获得第n个单元格 var cell2 = row2.getElementsByTagName(\"td\")[n]; //两行都是 var val1 = cell1.textContent || cell1.innerText; //获得文本内容 var val2 = cell2.textContent || cell2.innerText; //两单元格都是 if (comparator) return comparator(val1, val2); //进行比较 if (val1 &lt; val2) &#123; return -1; &#125; else if (val1 &gt; val2) &#123; return 1; &#125; else &#123; return 0; &#125; &#125;); //在tbody中按它们的顺序把行添加到最后 //这将自动把它们从当前位置移走，故没必要预先删除它们 //如果＜tbody＞还包含了除了＜tr＞的任何其他元素，这些节点将会悬浮到顶部位置 for (var i = 0; i &lt; rows.length; i++) tbody.appendChild(rows[i]);&#125;//查找表格的＜th＞元素（假设只有一行），让它们可单击，//以便单击列标题，按该列对行排序function makeSortable(table) &#123; var headers = table.getElementsByTagName(\"th\"); for (var i = 0; i &lt; headers.length; i++) &#123; (function (n) &#123; //嵌套函数来创建本地作用域 headers[i].onclick = function () &#123; sortrows(table, n); &#125;; &#125;(i)); //将i的值赋给局部变量n &#125;&#125; ⬆ back to top 生成目录表12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879/** * *这个模块注册一个可在页面加载完成后自动运行的匿名函数。当执行这个函数时会去文档中查找 *id为\"TOC\"的元素。如果这个元素不存在，就创建一个元素 * *生成的TOC目录应当具有自己的CSS样式。整个目录区域的样式className设置为\"TOCEntry\" *同样我们为不同层级的目录标题定义不同的样式。＜h1＞标签生成的标题 *className为\"TOCLevel1\"，＜h2＞标签生成的标题className为\"TOCLevel2\"，以此类推 *段编号的样式为\"TOCSectNum\" * *完整的CSS样式代码如下: * *#TOC&#123;border:solid black 1px;margin:10px;padding:10px;&#125; *.TOCEntry&#123;font-family:sans-serif;&#125; *.TOCEntry a&#123;text-decoration:none;&#125; *.TOCLevel1&#123;font-size:16pt;font-weight:bold;&#125; *.TOCLevel2&#123;font-size:12pt;margin-left:.5in;&#125; *.TOCSectNum:after&#123;content:\":\";&#125; * *这段代码的最后一行表示每个段编号之后都有一个冒号和空格符。要想隐藏段编号， *请使用这行代码： *.TOCSectNum&#123;display:none&#125; * **/(function () &#123; //匿名函数定义了一个局部作用域 //查找TOC容器元素 //如果不存在，则在文档开头处创建一个 var toc = document.getElementById(\"TOC\"); if (!toc) &#123; toc = document.createElement(\"div\"); toc.id = \"TOC\"; document.body.insertBefore(toc, document.body.firstChild); &#125; //查找所有的标题元素 var headings; if (document.querySelectorAll) //我们是否能用这个简单的方法？ headings = document.querySelectorAll(\"h1,h2,h3,h4,h5,h6\"); else //否则，查找方法稍微麻烦一些 headings = findHeadings(document.body, []); //递归遍历document的body，查找标题元素 function findHeadings(root, sects) &#123; for (var c = root.firstChild; c != null; c = c.nextSibling) &#123; if (c.nodeType !== 1) continue; if (c.tagName.length == 2 &amp;&amp; c.tagName.charAt(0) == \"H\") sects.push(c); else findHeadings(c, sects); &#125; return sects; &#125; //初始化一个数组来保持跟踪章节号 var sectionNumbers = [0, 0, 0, 0, 0, 0]; //现在，循环已找到的标题元素 for (var h = 0; h &lt; headings.length; h++) &#123; var heading = headings[h]; //跳过在TOC容器中的标题元素 if (heading.parentNode == toc) continue; //判定标题的级别 var level = parseInt(heading.tagName.charAt(1)); if (isNaN(level) || level &lt; 1 || level &gt; 6) continue; //对于该标题级别增加sectionNumbers对应的数字 //重置所有标题比它级别低的数字为零 sectionNumbers[level - 1]++; for (var i = level; i &lt; 6; i++) sectionNumbers[i] = 0; //现在，将所有标题级别的章节号组合产生一个章节号， 如2 .3 .1 var sectionNumber = sectionNumbers.slice(0, level).join(\".\") //为标题级别增加章节号 //把数字放在＜span＞中，使得其可以用样式修饰 var span = document.createElement(\"span\"); span.className = \"TOCSectNum\"; span.innerHTML = sectionNumber; heading.insertBefore(span, heading.firstChild); //用命名的锚点将标题包起来，以便为它增加链接 var anchor = document.createElement(\"a\"); anchor.name = \"TOC\" + sectionNumber; heading.parentNode.insertBefore(anchor, heading); anchor.appendChild(heading); //现在为该节创建一个链接 var link = document.createElement(\"a\"); link.href = \"#TOC\" + sectionNumber; //链接的目标地址 link.innerHTML = heading.innerHTML; //链接文本与实际标题一致 //将链接放在一个div中，div用基于级别名字的样式修饰 var entry = document.createElement(\"div\"); entry.className = \"TOCEntry TOCLevel\" + level; entry.appendChild(link); //该div添加到TOC容器中 toc.appendChild(entry); &#125;&#125;()); ⬆ back to top 从URL解析参数1234567891011121314151617181920212223/* *这个函数用来解析来自URL的查询串中的name=value参数对 *它将name=value对存储在一个对象的属性中，并返回该对象 *这样来使用它 * *var args=urlArgs();//从URL中解析参数 *var q=args.q||\"\";//如果参数定义了的话就使用参数；否则使用一个默认值 *var n=args.n?parseInt(args.n):10; */function urlArgs() &#123; var args = &#123;&#125;; //定义一个空对象 var query = location.search.substring(1); //查找到查询串，并去掉'?' var pairs = query.split(\"&amp;\"); //根据\"&amp;\"符号将查询字符串分隔开 for (var i = 0; i &lt; pairs.length; i++) &#123; //对于每个片段 var pos = pairs[i].indexOf('='); //查找\"name=value\" if (pos == -1) continue; //如果没有找到的话，就跳过 var name = pairs[i].substring(0, pos); //提取name var value = pairs[i].substring(pos + 1); //提取value value = decodeURIComponent(value); //对value进行解码 args[name] = value; //存储为属性 &#125; return args; //返回解析后的参数&#125; ⬆ back to top 获取纯文本的元素内容1234567891011121314151617181920/** *一个参数，返回元素的textContent或innerText *两个参数，用value参数的值设置元素的textContent或innerText */function textContent(element, value) &#123; var content = element.textContent; //检测textContent是否有定义 if (value === undefined) &#123; //没传递value，因此返回当前文本 if (content !== undefined) &#123; return content; &#125; else &#123; return element.innerText; &#125; &#125; else &#123; //传递了value，因此设置文本 if (content !== undefined) &#123; element.textContent = value; &#125; else &#123; element.innerText = value; &#125; &#125;&#125; ⬆ back to top 手写一个JSONP实现123456789101112131415161718192021222324252627//根据指定的URL发送一个JSONP请求//然后把解析得到的响应数据传递给回调函数//在URL中添加一个名为jsonp的查询参数，用于指定该请求的回调函数的名称function getJSONP(url, callback) &#123; //为本次请求创建一个唯一的回调函数名称 var cbnum = \"cb\" + getJSONP.counter++; //每次自增计数器 var cbname = \"getJSONP.\" + cbnum; //作为JSONP函数的属性 //将回调函数名称以表单编码的形式添加到URL的查询部分中 //使用jsonp作为参数名，一些支持JSONP的服务 //可能使用其他的参数名，比如callback if (url.indexOf(\"?\") === -1) //URL没有查询部分 url += \"?jsonp=\" + cbname; //作为查询部分添加参数 else //否则 url += \"＆jsonp=\" + cbname; //作为新的参数添加它 //创建script元素用于发送请求 var script = document.createElement(\"script\"); //定义将被脚本执行的回调函数 getJSONP[cbnum] = function (response) &#123; try &#123; callback(response); //处理响应数据 &#125; finally &#123; //即使回调函数或响应抛出错误 delete getJSONP[cbnum]; //删除该函数 script.parentNode.removeChild(script); //移除script元素 &#125; &#125;; //立即触发HTTP请求 script.src = url; //设置脚本的URL document.body.appendChild(script); //把它添加到文档中&#125;getJSONP.counter = 0; //用于创建唯一回调函数名称的计数器 ⬆ back to top 插入节点12345678910//将child节点插入到parent中，使其成为第n个子节点function insertAt(parent, child, n) &#123; if (n &lt; 0 || n &gt; parent.childNodes.length) &#123; throw new Error(\"invalid index\"); &#125; else if (n == parent.childNodes.length) &#123; parent.appendChild(child); &#125; else &#123; parent.insertBefore(child, parent.childNodes[n]); &#125;&#125; ⬆ back to top 使用innerHTML实现outerHTML属性123456789101112131415161718192021222324252627282930313233//为那些不支持它的浏览器实现outerHTML属性//假设浏览器确实支持innerHTML，并有个可扩展的Element.prototype，//并且可以定义getter和setter(function () &#123; //如果outerHTML存在，则直接返回 if (document.createElement(\"div\").outerHTML) return; //返回this所引用元素的外部HTML function outerHTMLGetter() &#123; var container = document.createElement(\"div\"); //虚拟元素 container.appendChild(this.cloneNode(true)); //复制到该虚拟节点 return container.innerHTML; //返回虚拟节点的innerHTML &#125; //用指定的值设置元素的外部HTML function outerHTMLSetter(value) &#123; //创建一个虚拟元素，设置其内容为指定的值 var container = document.createElement(\"div\"); container.innerHTML = value; //将虚拟元素中的节点全部移动到文档中 while (container.firstChild) //循环，直到container没有子节点为止 this.parentNode.insertBefore(container.firstChild, this); //删除所被取代的节点 this.parentNode.removeChild(this); &#125; //现在使用这两个函数作为所有Element对象的outerHTML属性的getter和setter //如果它存在则使用ES5的Object.defineProperty()方法， //否则，退而求其次，使用__defineGetter__()和__defineSetter__() if (Object.defineProperty) &#123; Object.defineProperty(Element.prototype, \"outerHTML\", &#123; get: outerHTMLGetter, set: outerHTMLSetter, enumerable: false, configurable: true &#125;); &#125; else &#123; Element.prototype.__defineGetter__(\"outerHTML\", outerHTMLGetter); Element.prototype.__defineSetter__(\"outerHTML\", outerHTMLSetter); &#125;&#125;()); ⬆ back to top 倒序排列子节点12345678//倒序排列节点n的子节点function reverse(n) &#123; //创建一个DocumentFragment作为临时容器 var f = document.createDocumentFragment(); //从后至前循环子节点，将每一个子节点移动到文档片段中 //n的最后一个节点变成f的第一个节点，反之亦然 //注意，给f添加一个节点，该节点自动地会从n中删除 while (n.lastChild) f.appendChild(n.lastChild); //最后，把f的所有子节点一次性全部移回n中 n.appendChild(f);&#125; ⬆ back to top 查询窗口滚动条的位置123456789101112131415161718//以一个对象的x和y属性的方式返回滚动条的偏移量function getScrollOffsets(w) &#123; //使用指定的窗口，如果不带参数则使用当前窗口 w = w || window; //除了IE 8及更早的版本以外，其他浏览器都能用 if (w.pageXOffset != null) return &#123; x: w.pageXOffset, y: w.pageYOffset &#125;; //对标准模式下的IE（或任何浏览器） var d = w.document; if (document.compatMode == \"CSS1Compat\") return &#123; x: d.documentElement.scrollLeft, y: d.documentElement.scrollTop &#125;; //对怪异模式下的浏览器 return &#123; x: d.body.scrollLeft, y: d.body.scrollTop &#125;;&#125; ⬆ back to top 查询窗口的视口尺寸123456789101112131415161718//作为一个对象的w和h属性返回视口的尺寸function getViewportSize(w) &#123; //使用指定的窗口，如果不带参数则使用当前窗口 w = w || window; //除了IE 8及更早的版本以外，其他浏览器都能用 if (w.innerWidth != null) return &#123; w: w.innerWidth, h: w.innerHeight &#125;; //对标准模式下的IE（或任何浏览器） var d = w.document; if (document.compatMode == \"CSS1Compat\") return &#123; w: d.documentElement.clientWidth, h: d.documentElement.clientHeight &#125;; //对怪异模式下的浏览器 return &#123; w: d.body.clientWidth, h: d.body.clientWidth &#125;;&#125; ⬆ back to top 返回函数的名字123Function.prototype.getName = function () &#123; return this.name || this.toString().match(/function\\s*(\\w*)\\s*\\(/)[1];&#125; ⬆ back to top 原生JS实现CSS动画112345678910111213141516171819202122232425262728293031323334//将e转化为相对定位的元素，使之左右\"震动\"//第一个参数可以是元素对象或者元素的id//如果第二个参数是函数，以e为参数，它将在动画结束时调用//第三个参数指定e震动的距离，默认是5像素//第四个参数指定震动多久，默认是500毫秒function shake(e, oncomplete, distance, time) &#123; //句柄参数 if (typeof e === \"string\") e = document.getElementById(e); if (!time) time = 500; if (!distance) distance = 5; var originalStyle = e.style.cssText; //保存e的原始style e.style.position = \"relative\"; //使e相对定位 var start = (new Date()).getTime(); //注意，动画的开始时间 animate(); //动画开始 //函数检查消耗的时间，并更新e的位置 //如果动画完成，它将e还原为原始状态 //否则，它更新e的位置，安排它自身重新运行 function animate() &#123; var now = (new Date()).getTime(); //得到当前时间 var elapsed = now - start; //从开始以来消耗了多长时间？ var fraction = elapsed / time; //是总时间的几分之几？ if (fraction &lt; 1) &#123; //如果动画未完成 //作为动画完成比例的函数，计算e的x位置 //使用正弦函数将完成比例乘以4pi //所以，它来回往复两次 var x = distance * Math.sin(fraction * 4 * Math.PI); e.style.left = x + \"px\"; //在25毫秒后或在总时间的最后尝试再次运行函数 //目的是为了产生每秒40帧的动画 setTimeout(animate, Math.min(25, time - elapsed)); &#125; else &#123; //否则，动画完成 e.style.cssText = originalStyle //恢复原始样式 if (oncomplete) oncomplete(e); //调用完成后的回调函数 &#125; &#125;&#125; ⬆ back to top 原生JS实现CSS动画2123456789101112131415161718192021function fadeOut(e, oncomplete, time) &#123; if (typeof e === \"string\") e = document.getElementById(e); if (!time) time = 500; //使用Math.sqrt作为一个简单的“缓动函数”来创建动画 //精巧的非线性：一开始淡出得比较快，然后缓慢了一些 var ease = Math.sqrt; var start = (new Date()).getTime(); //注意：动画开始的时间 animate(); //动画开始 function animate() &#123; var elapsed = (new Date()).getTime() - start; //消耗的时间 var fraction = elapsed / time; //总时间的几分之几？ if (fraction &lt; 1) &#123; //如果动画未完成 var opacity = 1 - ease(fraction); //计算元素的不透明度 e.style.opacity = String(opacity); //设置在e上 setTimeout(animate, //调度下一帧 Math.min(25, time - elapsed)); &#125; else &#123; //否则，动画完成 e.style.opacity = \"0\"; //使e完全透明 if (oncomplete) oncomplete(e); //调用完成后的回调函数 &#125; &#125;&#125; ⬆ back to top 仿HTML5的classList属性123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354/* *如果e有classList属性则返回它。否则，返回一个为e模拟DOMTokenList API的对象 *返回的对象有contains()、add()、remove()、toggle()和toString()等方法 *来检测和修改元素e的类集合。如果classList属性是原生支持的， *返回的类数组对象有length和数组索引属性。模拟DOMTokenList不是类数组对象， *但是它有一个toArray()方法来返回一个含元素类名的纯数组快照 */function classList(e) &#123; if (e.classList) return e.classList; //如果e.classList存在，则返回它 else return new CSSClassList(e); //否则，就伪造一个&#125;//CSSClassList是一个模拟DOMTokenList的JavaScript类function CSSClassList(e) &#123; this.e = e;&#125; //如果e.className包含类名c则返回true否则返回falseCSSClassList.prototype.contains = function (c) &#123; //检查c是否是合法的类名 if (c.length === 0 || c.indexOf(\" \") != -1) throw new Error(\"Invalid class name:'\" + c + \"'\"); //首先是常规检查 var classes = this.e.className; if (!classes) return false; //e不含类名 if (classes === c) return true; //e有一个完全匹配的类名 //否则，把c自身看做一个单词，利用正则表达式搜索c //\\b在正则表达式里代表单词的边界 return classes.search(\"\\\\b\" + c + \"\\\\b\") != -1;&#125;; //如果c不存在，将c添加到e.className中CSSClassList.prototype.add = function (c) &#123; if (this.contains(c)) return; //如果存在，什么都不做 var classes = this.e.className; if (classes &amp;&amp; classes[classes.length - 1] != \"\") c = \"\" + c; //如果需要加一个空格 this.e.className += c; //将c添加到className中&#125;; //将在e.className中出现的所有c都删除CSSClassList.prototype.remove = function (c) &#123; //检查c是否是合法的类名 if (c.length === 0 || c.indexOf(\" \") != -1) throw new Error(\"Invalid class name:'\" + c + \"'\"); //将所有作为单词的c和多余的尾随空格全部删除 var pattern = new RegExp(\"\\\\b\" + c + \"\\\\b\\\\s*\", \"g\"); this.e.className = this.e.className.replace(pattern, \"\");&#125;; //如果c不存在，将c添加到e.className中，并返回true//否则，将在e.className中出现的所有c都删除，并返回falseCSSClassList.prototype.toggle = function (c) &#123; if (this.contains(c)) &#123; //如果e.className包含c this.remove(c); //删除它 return false; &#125; else &#123; //否则 this.add(c); //添加它 return true; &#125;&#125;; //返回e.className本身CSSClassList.prototype.toString = function () &#123; return this.e.className;&#125;; //返回在e.className中的类名CSSClassList.prototype.toArray = function () &#123; return this.e.className.match(/\\b\\w+\\b/g) || [];&#125;; ⬆ back to top 查询纯文本形式的内容1234567891011121314/** *一个参数，返回元素的textContent或innerText *两个参数，用value参数的值设置元素的textContent或innerText */function textContent(element, value) &#123; var content = element.textContent; //检测textContent是否有定义 if (value === undefined) &#123; //没传递value，因此返回当前文本 if (content !== undefined) return content; else return element.innerText; &#125; else &#123; //传递了value，因此设置文本 if (content !== undefined) element.textContent = value; else element.innerText = value; &#125;&#125; textContent属性在除了IE的所有当前的浏览器中都支持。在IE中，可以用Element的innerText属性来代替。⬆ back to top 查找元素的后代中节点中的所有Text节点12345678910111213//返回元素e的纯文本内容，递归进入其子元素//该方法的效果类似于textContent属性function textContent(e) &#123; var child, type, s = \"\"; //s保存所有子节点的文本 for (child = e.firstChild; child != null; child = child.nextSibling) &#123; type = child.nodeType; if (type === 3 || type === 4) //Text和CDATASection节点 s += child.nodeValue; else if (type === 1) //递归Element节点 s += textContent(child); &#125; return s;&#125; ⬆ back to top 使用innerHTML实现insertAdjacentHTML()12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061//本模块为不支持它的浏览器定义了Element.insertAdjacentHTML//还定义了一些可移植的HTML插入函数，它们的名字比insertAdjacentHTML更符合逻辑：//Insert.before()、Insert.after()、Insert.atStart()和Insert.atEnd()var Insert = (function () &#123; //如果元素有原生的insertAdjacentHTML， //在4个函数名更明了的HTML插入函数中使用它 if (document.createElement(\"div\").insertAdjacentHTML) &#123; return &#123; before: function (e, h) &#123; e.insertAdjacentHTML(\"beforebegin\", h); &#125;, after: function (e, h) &#123; e.insertAdjacentHTML(\"afterend\", h); &#125;, atStart: function (e, h) &#123; e.insertAdjacentHTML(\"afterbegin\", h); &#125;, atEnd: function (e, h) &#123; e.insertAdjacentHTML(\"beforeend\", h); &#125; &#125;; &#125; //否则，无原生的insertAdjacentHTML //实现同样的4个插入函数，并使用它们来定义insertAdjacentHTML //首先，定义一个工具函数，传入HTML字符串，返回一个DocumentFragment， //它包含了解析后的HTML的表示 function fragment(html) &#123; var elt = document.createElement(\"div\"); //创建空元素 var frag = document.createDocumentFragment(); //创建空文档片段 elt.innerHTML = html; //设置元素内容 while (elt.firstChild) //移动所有的节点 frag.appendChild(elt.firstChild); //从elt到frag return frag; //然后返回frag &#125; var Insert = &#123; before: function (elt, html) &#123; elt.parentNode.insertBefore(fragment(html), elt); &#125;, after: function (elt, html) &#123; elt.parentNode.insertBefore(fragment(html), elt.nextSibling); &#125;, atStart: function (elt, html) &#123; elt.insertBefore(fragment(html), elt.firstChild); &#125;, atEnd: function (elt, html) &#123; elt.appendChild(fragment(html)); &#125; &#125;; //基于以上函数实现insertAdjacentHTML Element.prototype.insertAdjacentHTML = function (pos, html) &#123; switch (pos.toLowerCase()) &#123; case \"beforebegin\": return Insert.before(this, html); case \"afterend\": return Insert.after(this, html); case \"afterbegin\": return Insert.atStart(this, html); case \"beforeend\": return Insert.atEnd(this, html); &#125; &#125;; return Insert; //最后返回4个插入函数&#125;()); ⬆ back to top 拖拽12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182/** *Drag.js：拖动绝对定位的HTML元素 * *这个模块定义了一个drag()函数，它用于mousedown事件处理程序的调用 *随后的mousemove事件将移动指定元素，mouseup事件将终止拖动 *这些实现能同标准和IE两种事件模型一起工作 * *参数： * *elementToDrag：接收mousedown事件的元素或某些包含元素 *它必须是定位的元素,元素的样式必须是行内样式 *它的style.left和style.top值将随着用户的拖动而改变 * *event：mousedown事件对象 **/function drag(elementToDrag, event) &#123; //初始鼠标位置，转换为文档坐标 var startX = event.clientX; var startY = event.clientY; //在文档坐标下，待拖动元素的初始位置 //因为elementToDrag是绝对定位的， //所以我们可以假设它的offsetParent就是文档的body元素 var origX = parseFloat(elementToDrag.style.left); var origY = parseFloat(elementToDrag.style.top); //计算mousedown事件和元素左上角之间的距离 //我们将它另存为鼠标移动的距离 if (document.addEventListener) &#123; //标准事件模型 //在document对象上注册捕获事件处理程序 document.addEventListener(\"mousemove\", moveHandler, true); document.addEventListener(\"mouseup\", upHandler, true); &#125; else if (document.attachEvent) &#123; //用于IE5～8的IE事件模型 //在IE事件模型中， //捕获事件是通过调用元素上的setCapture()捕获它们 elementToDrag.setCapture(); elementToDrag.attachEvent(\"onmousemove\", moveHandler); elementToDrag.attachEvent(\"onmouseup\", upHandler); //作为mouseup事件看待鼠标捕获的丢失 elementToDrag.attachEvent(\"onlosecapture\", upHandler); &#125; //我们处理了这个事件，不让任何其他元素看到它 if (event.stopPropagation) event.stopPropagation(); //标准模型 else event.cancelBubble = true; //IE //现在阻止任何默认操作 if (event.preventDefault) event.preventDefault(); //标准模型 else event.returnValue = false; //IE /** * 当元素正在被拖动时， 这就是捕获mousemove事件的处理程序 *它用于移动这个元素 **/ function moveHandler(e) &#123; if (!e) e = window.event; //IE事件模型 //移动这个元素到当前鼠标位置， //通过滚动条的位置和初始单击的偏移量来调整 var targetLeft = e.clientX - startX + origX; var targetTop = e.clientY - startY + origY; var minLeft = 0; var minTop = 0; var maxLeft = (document.documentElement.clientWidth || document.body.clientWidth) - elementToDrag.offsetWidth; var maxTop = (document.documentElement.clientHeight || document.body.clientHeight) - elementToDrag.offsetHeight; targetLeft = targetLeft &gt; maxLeft ? maxLeft : (targetLeft &lt; minLeft ? minLeft : targetLeft); targetTop = targetTop &gt; maxTop ? maxTop : (targetTop &lt; minTop ? minTop : targetTop); elementToDrag.style.left = targetLeft + \"px\"; elementToDrag.style.top = targetTop + \"px\"; if (e.stopPropagation) e.stopPropagation(); //标准 else e.cancelBubble = true; //IE &#125; /** *这是捕获在拖动结束时发生的最终mouseup事件的处理程序 **/ function upHandler(e) &#123; if (!e) e = window.event; //IE事件模型 //注销捕获事件处理程序 if (document.removeEventListener) &#123; //DOM事件模型 document.removeEventListener(\"mouseup\", upHandler, true); document.removeEventListener(\"mousemove\", moveHandler, true); &#125; else if (document.detachEvent) &#123; //IE 5+事件模型 elementToDrag.detachEvent(\"onlosecapture\", upHandler); elementToDrag.detachEvent(\"onmouseup\", upHandler); elementToDrag.detachEvent(\"onmousemove\", moveHandler); elementToDrag.releaseCapture(); &#125; //并且不让事件进一步传播 if (e.stopPropagation) e.stopPropagation(); //标准模型 else e.cancelBubble = true; //IE &#125;&#125; ⬆ back to top","content":"<h1 id=\"libraries\"><a href=\"#libraries\" class=\"headerlink\" title=\"libraries\"></a>libraries</h1><h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><a href=\"#仿ecmascript5中objectcreate函数\">仿ECMAScript5中Object.create()函数</a></li>\n<li><a href=\"#仿ecmascript5中stringtrim函数\">仿ECMAScript5中String.trim()函数</a></li>\n<li><a href=\"#仿ecmascript5中arrayreduce函数\">仿ECMAScript5中Array.reduce()函数</a></li>\n<li><a href=\"#仿ecmascript5中objectkeys函数\">仿ECMAScript5中Object.keys()函数</a></li>\n<li><a href=\"#仿ecmascript5中functionbind函数\">仿ECMAScript5中Function.bind()函数</a></li>\n<li><a href=\"#仿ecmascript5中arraymap函数\">仿ECMAScript5中Array.map()函数</a></li>\n<li><a href=\"#仿mathmax方法不定实参函数\">仿Math.max()方法实现</a></li>\n<li><a href=\"#仿stringmatch方法实现\">仿String.match()方法实现</a></li>\n<li><a href=\"#仿html5的classlist属性\">仿HTML5的classList属性实现</a></li>\n<li><a href=\"#返回函数的名字\">仿Function.name属性实现</a></li>\n<li><a href=\"#返回元素的第n层祖先元素\">返回元素的第n层祖先元素</a></li>\n<li><a href=\"#返回元素的第n个兄弟元素\">返回元素的第n个兄弟元素</a></li>\n<li><a href=\"#返回元素的第n个子代元素\">返回元素的第n个子代元素</a></li>\n<li><a href=\"#原生js实现css动画1\">原生JS实现CSS动画之震动</a></li>\n<li><a href=\"#原生js实现css动画2\">原生JS实现CSS动画之隐藏</a></li>\n<li><a href=\"#在数组中查找所有出现的元素方法\">在数组中查找所有出现的元素方法</a></li>\n<li><a href=\"#数据类型检测特殊情况特殊处理\">数据类型检测之特殊情况特殊处理</a></li>\n<li><a href=\"#使用innerhtml实现outerhtml属性\">使用innerHTML实现outerHTML属性</a></li>\n<li><a href=\"#插入节点\">插入节点</a></li>\n<li><a href=\"#倒序排列子节点\">倒序排列子节点</a></li>\n<li><a href=\"#查询窗口滚动条的位置\">查询窗口滚动条的位置</a></li>\n<li><a href=\"#查询窗口的视口尺寸\">查询窗口的视口尺寸</a></li>\n<li><a href=\"#表格的行排序\">表格的行排序</a></li>\n<li><a href=\"#生成目录表\">生成目录表</a></li>\n<li><a href=\"#数组去重\">数组去重</a></li>\n<li><a href=\"#冒泡排序\">冒泡排序</a></li>\n<li><a href=\"#从url解析参数\">从URL解析参数</a></li>\n<li><a href=\"#获取纯文本的元素内容\">获取纯文本的元素内容</a></li>\n<li><a href=\"#手写一个jsonp实现\">手写一个JSONP实现</a></li>\n<li><a href=\"#查询纯文本形式的内容\">查询纯文本形式的内容</a></li>\n<li><a href=\"#查找元素的后代中节点中的所有text节点\">查找元素的后代中节点中的所有Text节点</a></li>\n<li><a href=\"#使用innerhtml实现insertadjacenthtml\">使用innerHTML实现insertAdjacentHTML</a></li>\n<li><a href=\"#拖拽\">拖拽</a></li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"仿ECMAScript5中Object-create-函数\"><a href=\"#仿ECMAScript5中Object-create-函数\" class=\"headerlink\" title=\"仿ECMAScript5中Object.create()函数\"></a>仿ECMAScript5中Object.create()函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherit</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.create) <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.create(obj);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"keyword\">typeof</span> obj;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t !== <span class=\"string\">\"object\"</span> &amp;&amp; t !== <span class=\"string\">\"function\"</span>) <span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fn</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    Fn.prototype = obj;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Fn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"仿ECMAScript5中String-trim-函数\"><a href=\"#仿ECMAScript5中String-trim-函数\" class=\"headerlink\" title=\"仿ECMAScript5中String.trim()函数\"></a>仿ECMAScript5中String.trim()函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.mytrim = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">String</span>.prototype.trim || <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>; <span class=\"comment\">//空字符串不做处理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/^\\s+|\\s+$/g</span>, <span class=\"string\">\"\"</span>) <span class=\"comment\">//使用正则表达式经行空格替换</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"仿ECMAScript5中Array-reduce-函数\"><a href=\"#仿ECMAScript5中Array-reduce-函数\" class=\"headerlink\" title=\"仿ECMAScript5中Array.reduce()函数\"></a>仿ECMAScript5中Array.reduce()函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reduce = <span class=\"built_in\">Array</span>.prototype.reduce ? <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ary, fn, initial</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt; <span class=\"number\">2</span>) &#123; <span class=\"comment\">//如果reduce()方法存在的话</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ary.reduce(fn, initial); <span class=\"comment\">//如果传入了一个初始值</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ary.reduce(fn); <span class=\"comment\">//否则初始值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ary, fn, initial</span>) </span>&#123; <span class=\"comment\">//以特定的初始值开始，否则第一个值取自ary</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</span><br><span class=\"line\">        len = ary.length,</span><br><span class=\"line\">        accumulator;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        accumulator = initial;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//找到数组中第一个已经定义的索引</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> ary) &#123;</span><br><span class=\"line\">                accumulator = ary[i++];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == len) <span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; len) &#123; <span class=\"comment\">//对于数组中剩下的元素依次调用fn</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> ary) &#123;</span><br><span class=\"line\">            accumulator = fn.call(<span class=\"literal\">undefined</span>, accumulator, ary[i], i, ary)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accumulator;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"在数组中查找所有出现的元素方法\"><a href=\"#在数组中查找所有出现的元素方法\" class=\"headerlink\" title=\"在数组中查找所有出现的元素方法\"></a>在数组中查找所有出现的元素方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findAll</span>(<span class=\"params\">ary, ele</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> results = [],</span><br><span class=\"line\">        len = a.length,</span><br><span class=\"line\">        pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pos &lt; len) &#123;</span><br><span class=\"line\">        pos = ary.indexOf(ele, pos);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pos === <span class=\"number\">-1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        results.push(pos);</span><br><span class=\"line\">        pos++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"数据类型检测，特殊情况特殊处理\"><a href=\"#数据类型检测，特殊情况特殊处理\" class=\"headerlink\" title=\"数据类型检测，特殊情况特殊处理\"></a>数据类型检测，特殊情况特殊处理</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">classOf</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"Null\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"string\">'Undefined'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"仿ECMAScript5中Object-keys-函数\"><a href=\"#仿ECMAScript5中Object-keys-函数\" class=\"headerlink\" title=\"仿ECMAScript5中Object.keys()函数\"></a>仿ECMAScript5中Object.keys()函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">keys</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj.hasOwnProperty(prop)) &#123;</span><br><span class=\"line\">            result.push(prop);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"仿Math-max方法（不定实参函数）\"><a href=\"#仿Math-max方法（不定实参函数）\" class=\"headerlink\" title=\"仿Math.max方法（不定实参函数）\"></a>仿Math.max方法（不定实参函数）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">max</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max = <span class=\"built_in\">Number</span>.NEGATIVE_INFINITY;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>[i] &gt; max) max = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"仿ECMAScript5中Function-bind-函数\"><a href=\"#仿ECMAScript5中Function-bind-函数\" class=\"headerlink\" title=\"仿ECMAScript5中Function.bind()函数\"></a>仿ECMAScript5中Function.bind()函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Function</span>.prototype.bind) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">            boundArgs = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> args = [],</span><br><span class=\"line\">                i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; boundArgs.length; i++) args.push(boundArgs[i]);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) args.push(<span class=\"built_in\">arguments</span>[i]);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.apply(obj, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"仿ECMAScript5中Array-map-函数\"><a href=\"#仿ECMAScript5中Array-map-函数\" class=\"headerlink\" title=\"仿ECMAScript5中Array.map()函数\"></a>仿ECMAScript5中Array.map()函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"built_in\">Array</span>.prototype.map ? <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ary, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ary.map(fn);</span><br><span class=\"line\">&#125; : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ary, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> results = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = ary.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> ary) &#123;</span><br><span class=\"line\">            results[i] = fn.call(<span class=\"literal\">null</span>, ary[i], i, ary);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> current = <span class=\"keyword\">this</span>[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj[current] === current) &#123;</span><br><span class=\"line\">            current = <span class=\"keyword\">this</span>[<span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.length--;</span><br><span class=\"line\">            i--;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        obj[current] = current</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    obj = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.bubbleSort = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"keyword\">this</span>.length - <span class=\"number\">1</span> - i; k++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[k] &gt; <span class=\"keyword\">this</span>[k + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                temp = <span class=\"keyword\">this</span>[k];</span><br><span class=\"line\">                <span class=\"keyword\">this</span>[k] = <span class=\"keyword\">this</span>[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"keyword\">this</span>[k + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"仿String-match-方法实现\"><a href=\"#仿String-match-方法实现\" class=\"headerlink\" title=\"仿String.match()方法实现\"></a>仿String.match()方法实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.mymatch = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reg</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> ary = [];</span><br><span class=\"line\"> <span class=\"keyword\">var</span> res = reg.exec(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"> <span class=\"keyword\">while</span> (res) &#123;</span><br><span class=\"line\">    ary.push(res[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    res = reg.exec(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> ary;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"返回元素的第n层祖先元素\"><a href=\"#返回元素的第n层祖先元素\" class=\"headerlink\" title=\"返回元素的第n层祖先元素\"></a>返回元素的第n层祖先元素</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*返回元素ele的第n层祖先元素，如果不存在此类祖先或祖先不是Element，</span></span><br><span class=\"line\"><span class=\"comment\">*（例如Document或者DocumentFragment）则返回null</span></span><br><span class=\"line\"><span class=\"comment\">*如果n为0，则返回e本身。如果n为1（或省略），则返回其父元素</span></span><br><span class=\"line\"><span class=\"comment\">*如果n为2，则返回其祖父元素，依次类推</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parent</span>(<span class=\"params\">ele, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n === nudefined) n = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n-- &amp;&amp; ele) &#123;</span><br><span class=\"line\">        ele = ele.parentNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ele || ele.nodeTope !== <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"返回元素的第n个兄弟元素\"><a href=\"#返回元素的第n个兄弟元素\" class=\"headerlink\" title=\"返回元素的第n个兄弟元素\"></a>返回元素的第n个兄弟元素</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *返回元素ele的第n个兄弟元素</span></span><br><span class=\"line\"><span class=\"comment\"> *如果n为正，返回后续的第n个兄弟元素</span></span><br><span class=\"line\"><span class=\"comment\"> *如果n为负，返回前面的第n个兄弟元素</span></span><br><span class=\"line\"><span class=\"comment\"> *如果n为零，返回ele本身</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sibling</span>(<span class=\"params\">ele, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ele &amp;&amp; n !== <span class=\"number\">0</span>) &#123; <span class=\"comment\">//如果ele未定义，即刻返回它</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">//查找后续的兄弟元素</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ele.nextElementSibling) &#123;</span><br><span class=\"line\">                ele = ele.nextElementSibling;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (ele = ele.nextSibling; ele &amp;&amp; ele.nodeType !== <span class=\"number\">1</span>; ele = ele.nextSibling) <span class=\"comment\">/*空循环*/</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            n--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//查找前面的兄弟元素</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ele.previousElementSibing) &#123;</span><br><span class=\"line\">                ele = ele.previousElementSibling;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (ele = ele.previousSibling; ele &amp;&amp; ele.nodeType !== <span class=\"number\">1</span>; ele = ele.previousSibling) <span class=\"comment\">/*空循环*/</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            n++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"返回元素的第n个子代元素\"><a href=\"#返回元素的第n个子代元素\" class=\"headerlink\" title=\"返回元素的第n个子代元素\"></a>返回元素的第n个子代元素</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *返回元素ele的第n代子元素，如果不存在则为null</span></span><br><span class=\"line\"><span class=\"comment\"> *负值n代表从后往前计数。0表示第一个子元素，而-1代表最后一个，-2代表倒数第二个，依次类推</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">child</span>(<span class=\"params\">ele, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ele.children) &#123; <span class=\"comment\">//如果children数组存在</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>) n += ele.children.length; <span class=\"comment\">//转换负的n为数组索引</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; <span class=\"comment\">//如果它仍然为负，说明没有子元素</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ele.children[n]; <span class=\"comment\">//返回指定的子元素</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果e没有children数组，找到第一个子元素并向前数，或找到最后一个子元素并往回数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt;= <span class=\"number\">0</span>) &#123; <span class=\"comment\">//n非负：从第一个子元素向前数</span></span><br><span class=\"line\">        <span class=\"comment\">//找到元素e的第一个子元素</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ele.firstElementChild) &#123;</span><br><span class=\"line\">            ele = ele.firstElementChild;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (ele = ele.firstChild; ele &amp;&amp; ele.nodeType !== <span class=\"number\">1</span>; ele = ele.nextSibling) <span class=\"comment\">/*空循环*/</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sibling(ele, n); <span class=\"comment\">//返回第一个子元素的第n个兄弟元素</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//n为负：从最后一个子元素往回数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ele.lastElementChild) &#123;</span><br><span class=\"line\">            ele = ele.lastElementChild;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (ele = ele.lastChild; ele &amp;&amp; ele.nodeType !== <span class=\"number\">1</span>; ele = ele.previousSibling) <span class=\"comment\">/*空循环*/</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sibling(ele, n + <span class=\"number\">1</span>); <span class=\"comment\">//+1来转化最后1个子元素为最后1个兄弟元素</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"表格的行排序\"><a href=\"#表格的行排序\" class=\"headerlink\" title=\"表格的行排序\"></a>表格的行排序</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据指定表格每行第n个单元格的值，对第一个＜tbody＞中的行进行排序</span></span><br><span class=\"line\"><span class=\"comment\">//如果存在comparator函数则使用它，否则按字母表顺序比较</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortrows</span>(<span class=\"params\">table, n, comparator</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tbody = table.tBodies[<span class=\"number\">0</span>]; <span class=\"comment\">//第一个＜tbody＞，可能是隐式创建的</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> rows = tbody.getElementsByTagName(<span class=\"string\">\"tr\"</span>); <span class=\"comment\">//tbody中的所有行</span></span><br><span class=\"line\">    rows = <span class=\"built_in\">Array</span>.prototype.slice.call(rows, <span class=\"number\">0</span>); <span class=\"comment\">//真实数组中的快照</span></span><br><span class=\"line\">    <span class=\"comment\">//基于第n个＜td＞元素的值对行排序</span></span><br><span class=\"line\">    rows.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">row1, row2</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cell1 = row1.getElementsByTagName(<span class=\"string\">\"td\"</span>)[n]; <span class=\"comment\">//获得第n个单元格</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cell2 = row2.getElementsByTagName(<span class=\"string\">\"td\"</span>)[n]; <span class=\"comment\">//两行都是</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> val1 = cell1.textContent || cell1.innerText; <span class=\"comment\">//获得文本内容</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> val2 = cell2.textContent || cell2.innerText; <span class=\"comment\">//两单元格都是</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (comparator) <span class=\"keyword\">return</span> comparator(val1, val2); <span class=\"comment\">//进行比较</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val1 &lt; val2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (val1 &gt; val2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;); <span class=\"comment\">//在tbody中按它们的顺序把行添加到最后</span></span><br><span class=\"line\">    <span class=\"comment\">//这将自动把它们从当前位置移走，故没必要预先删除它们</span></span><br><span class=\"line\">    <span class=\"comment\">//如果＜tbody＞还包含了除了＜tr＞的任何其他元素，这些节点将会悬浮到顶部位置</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; rows.length; i++) tbody.appendChild(rows[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//查找表格的＜th＞元素（假设只有一行），让它们可单击，</span></span><br><span class=\"line\"><span class=\"comment\">//以便单击列标题，按该列对行排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeSortable</span>(<span class=\"params\">table</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> headers = table.getElementsByTagName(<span class=\"string\">\"th\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; headers.length; i++) &#123;</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123; <span class=\"comment\">//嵌套函数来创建本地作用域</span></span><br><span class=\"line\">            headers[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                sortrows(table, n);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;(i)); <span class=\"comment\">//将i的值赋给局部变量n</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"生成目录表\"><a href=\"#生成目录表\" class=\"headerlink\" title=\"生成目录表\"></a>生成目录表</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *这个模块注册一个可在页面加载完成后自动运行的匿名函数。当执行这个函数时会去文档中查找</span></span><br><span class=\"line\"><span class=\"comment\"> *id为\"TOC\"的元素。如果这个元素不存在，就创建一个元素</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *生成的TOC目录应当具有自己的CSS样式。整个目录区域的样式className设置为\"TOCEntry\"</span></span><br><span class=\"line\"><span class=\"comment\"> *同样我们为不同层级的目录标题定义不同的样式。＜h1＞标签生成的标题</span></span><br><span class=\"line\"><span class=\"comment\"> *className为\"TOCLevel1\"，＜h2＞标签生成的标题className为\"TOCLevel2\"，以此类推</span></span><br><span class=\"line\"><span class=\"comment\"> *段编号的样式为\"TOCSectNum\"</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *完整的CSS样式代码如下:</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *#TOC&#123;border:solid black 1px;margin:10px;padding:10px;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *.TOCEntry&#123;font-family:sans-serif;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *.TOCEntry a&#123;text-decoration:none;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *.TOCLevel1&#123;font-size:16pt;font-weight:bold;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *.TOCLevel2&#123;font-size:12pt;margin-left:.5in;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *.TOCSectNum:after&#123;content:\":\";&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *这段代码的最后一行表示每个段编号之后都有一个冒号和空格符。要想隐藏段编号，</span></span><br><span class=\"line\"><span class=\"comment\"> *请使用这行代码：</span></span><br><span class=\"line\"><span class=\"comment\"> *.TOCSectNum&#123;display:none&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//匿名函数定义了一个局部作用域</span></span><br><span class=\"line\">    <span class=\"comment\">//查找TOC容器元素</span></span><br><span class=\"line\">    <span class=\"comment\">//如果不存在，则在文档开头处创建一个</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> toc = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"TOC\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!toc) &#123;</span><br><span class=\"line\">        toc = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">        toc.id = <span class=\"string\">\"TOC\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.insertBefore(toc, <span class=\"built_in\">document</span>.body.firstChild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//查找所有的标题元素</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> headings;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.querySelectorAll) <span class=\"comment\">//我们是否能用这个简单的方法？</span></span><br><span class=\"line\">        headings = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"h1,h2,h3,h4,h5,h6\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"comment\">//否则，查找方法稍微麻烦一些</span></span><br><span class=\"line\">        headings = findHeadings(<span class=\"built_in\">document</span>.body, []); <span class=\"comment\">//递归遍历document的body，查找标题元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findHeadings</span>(<span class=\"params\">root, sects</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> c = root.firstChild; c != <span class=\"literal\">null</span>; c = c.nextSibling) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c.nodeType !== <span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c.tagName.length == <span class=\"number\">2</span> &amp;&amp; c.tagName.charAt(<span class=\"number\">0</span>) == <span class=\"string\">\"H\"</span>)</span><br><span class=\"line\">                sects.push(c);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                findHeadings(c, sects);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sects;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//初始化一个数组来保持跟踪章节号</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sectionNumbers = [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]; <span class=\"comment\">//现在，循环已找到的标题元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> h = <span class=\"number\">0</span>; h &lt; headings.length; h++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> heading = headings[h]; <span class=\"comment\">//跳过在TOC容器中的标题元素</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (heading.parentNode == toc) <span class=\"keyword\">continue</span>; <span class=\"comment\">//判定标题的级别</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> level = <span class=\"built_in\">parseInt</span>(heading.tagName.charAt(<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(level) || level &lt; <span class=\"number\">1</span> || level &gt; <span class=\"number\">6</span>) <span class=\"keyword\">continue</span>; <span class=\"comment\">//对于该标题级别增加sectionNumbers对应的数字</span></span><br><span class=\"line\">        <span class=\"comment\">//重置所有标题比它级别低的数字为零</span></span><br><span class=\"line\">        sectionNumbers[level - <span class=\"number\">1</span>]++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = level; i &lt; <span class=\"number\">6</span>; i++) sectionNumbers[i] = <span class=\"number\">0</span>; <span class=\"comment\">//现在，将所有标题级别的章节号组合产生一个章节号， 如2 .3 .1</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> sectionNumber = sectionNumbers.slice(<span class=\"number\">0</span>, level).join(<span class=\"string\">\".\"</span>) <span class=\"comment\">//为标题级别增加章节号</span></span><br><span class=\"line\">        <span class=\"comment\">//把数字放在＜span＞中，使得其可以用样式修饰</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> span = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"span\"</span>);</span><br><span class=\"line\">        span.className = <span class=\"string\">\"TOCSectNum\"</span>;</span><br><span class=\"line\">        span.innerHTML = sectionNumber;</span><br><span class=\"line\">        heading.insertBefore(span, heading.firstChild); <span class=\"comment\">//用命名的锚点将标题包起来，以便为它增加链接</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> anchor = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">        anchor.name = <span class=\"string\">\"TOC\"</span> + sectionNumber;</span><br><span class=\"line\">        heading.parentNode.insertBefore(anchor, heading);</span><br><span class=\"line\">        anchor.appendChild(heading); <span class=\"comment\">//现在为该节创建一个链接</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> link = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">        link.href = <span class=\"string\">\"#TOC\"</span> + sectionNumber; <span class=\"comment\">//链接的目标地址</span></span><br><span class=\"line\">        link.innerHTML = heading.innerHTML; <span class=\"comment\">//链接文本与实际标题一致</span></span><br><span class=\"line\">        <span class=\"comment\">//将链接放在一个div中，div用基于级别名字的样式修饰</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> entry = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">        entry.className = <span class=\"string\">\"TOCEntry TOCLevel\"</span> + level;</span><br><span class=\"line\">        entry.appendChild(link); <span class=\"comment\">//该div添加到TOC容器中</span></span><br><span class=\"line\">        toc.appendChild(entry);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"从URL解析参数\"><a href=\"#从URL解析参数\" class=\"headerlink\" title=\"从URL解析参数\"></a>从URL解析参数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *这个函数用来解析来自URL的查询串中的name=value参数对</span></span><br><span class=\"line\"><span class=\"comment\"> *它将name=value对存储在一个对象的属性中，并返回该对象</span></span><br><span class=\"line\"><span class=\"comment\"> *这样来使用它</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *var args=urlArgs();//从URL中解析参数</span></span><br><span class=\"line\"><span class=\"comment\"> *var q=args.q||\"\";//如果参数定义了的话就使用参数；否则使用一个默认值</span></span><br><span class=\"line\"><span class=\"comment\"> *var n=args.n?parseInt(args.n):10;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">urlArgs</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = &#123;&#125;; <span class=\"comment\">//定义一个空对象</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> query = location.search.substring(<span class=\"number\">1</span>); <span class=\"comment\">//查找到查询串，并去掉'?'</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pairs = query.split(<span class=\"string\">\"&amp;\"</span>); <span class=\"comment\">//根据\"&amp;\"符号将查询字符串分隔开</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; pairs.length; i++) &#123; <span class=\"comment\">//对于每个片段</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> pos = pairs[i].indexOf(<span class=\"string\">'='</span>); <span class=\"comment\">//查找\"name=value\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pos == <span class=\"number\">-1</span>) <span class=\"keyword\">continue</span>; <span class=\"comment\">//如果没有找到的话，就跳过</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> name = pairs[i].substring(<span class=\"number\">0</span>, pos); <span class=\"comment\">//提取name</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> value = pairs[i].substring(pos + <span class=\"number\">1</span>); <span class=\"comment\">//提取value</span></span><br><span class=\"line\">        value = <span class=\"built_in\">decodeURIComponent</span>(value); <span class=\"comment\">//对value进行解码</span></span><br><span class=\"line\">        args[name] = value; <span class=\"comment\">//存储为属性</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> args; <span class=\"comment\">//返回解析后的参数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"获取纯文本的元素内容\"><a href=\"#获取纯文本的元素内容\" class=\"headerlink\" title=\"获取纯文本的元素内容\"></a>获取纯文本的元素内容</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *一个参数，返回元素的textContent或innerText</span></span><br><span class=\"line\"><span class=\"comment\"> *两个参数，用value参数的值设置元素的textContent或innerText</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">textContent</span>(<span class=\"params\">element, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> content = element.textContent; <span class=\"comment\">//检测textContent是否有定义</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value === <span class=\"literal\">undefined</span>) &#123; <span class=\"comment\">//没传递value，因此返回当前文本</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (content !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> content;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> element.innerText;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//传递了value，因此设置文本</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (content !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">            element.textContent = value;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            element.innerText = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"手写一个JSONP实现\"><a href=\"#手写一个JSONP实现\" class=\"headerlink\" title=\"手写一个JSONP实现\"></a>手写一个JSONP实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据指定的URL发送一个JSONP请求</span></span><br><span class=\"line\"><span class=\"comment\">//然后把解析得到的响应数据传递给回调函数</span></span><br><span class=\"line\"><span class=\"comment\">//在URL中添加一个名为jsonp的查询参数，用于指定该请求的回调函数的名称</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getJSONP</span>(<span class=\"params\">url, callback</span>) </span>&#123; <span class=\"comment\">//为本次请求创建一个唯一的回调函数名称</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cbnum = <span class=\"string\">\"cb\"</span> + getJSONP.counter++; <span class=\"comment\">//每次自增计数器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cbname = <span class=\"string\">\"getJSONP.\"</span> + cbnum; <span class=\"comment\">//作为JSONP函数的属性</span></span><br><span class=\"line\">    <span class=\"comment\">//将回调函数名称以表单编码的形式添加到URL的查询部分中</span></span><br><span class=\"line\">    <span class=\"comment\">//使用jsonp作为参数名，一些支持JSONP的服务</span></span><br><span class=\"line\">    <span class=\"comment\">//可能使用其他的参数名，比如callback</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url.indexOf(<span class=\"string\">\"?\"</span>) === <span class=\"number\">-1</span>) <span class=\"comment\">//URL没有查询部分</span></span><br><span class=\"line\">        url += <span class=\"string\">\"?jsonp=\"</span> + cbname; <span class=\"comment\">//作为查询部分添加参数</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"comment\">//否则</span></span><br><span class=\"line\">        url += <span class=\"string\">\"＆jsonp=\"</span> + cbname; <span class=\"comment\">//作为新的参数添加它</span></span><br><span class=\"line\">    <span class=\"comment\">//创建script元素用于发送请求</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>); <span class=\"comment\">//定义将被脚本执行的回调函数</span></span><br><span class=\"line\">    getJSONP[cbnum] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            callback(response); <span class=\"comment\">//处理响应数据</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123; <span class=\"comment\">//即使回调函数或响应抛出错误</span></span><br><span class=\"line\">            <span class=\"keyword\">delete</span> getJSONP[cbnum]; <span class=\"comment\">//删除该函数</span></span><br><span class=\"line\">            script.parentNode.removeChild(script); <span class=\"comment\">//移除script元素</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;; <span class=\"comment\">//立即触发HTTP请求</span></span><br><span class=\"line\">    script.src = url; <span class=\"comment\">//设置脚本的URL</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(script); <span class=\"comment\">//把它添加到文档中</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getJSONP.counter = <span class=\"number\">0</span>; <span class=\"comment\">//用于创建唯一回调函数名称的计数器</span></span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"插入节点\"><a href=\"#插入节点\" class=\"headerlink\" title=\"插入节点\"></a>插入节点</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将child节点插入到parent中，使其成为第n个子节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertAt</span>(<span class=\"params\">parent, child, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span> || n &gt; parent.childNodes.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"invalid index\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == parent.childNodes.length) &#123;</span><br><span class=\"line\">        parent.appendChild(child);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        parent.insertBefore(child, parent.childNodes[n]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"使用innerHTML实现outerHTML属性\"><a href=\"#使用innerHTML实现outerHTML属性\" class=\"headerlink\" title=\"使用innerHTML实现outerHTML属性\"></a>使用innerHTML实现outerHTML属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//为那些不支持它的浏览器实现outerHTML属性</span></span><br><span class=\"line\"><span class=\"comment\">//假设浏览器确实支持innerHTML，并有个可扩展的Element.prototype，</span></span><br><span class=\"line\"><span class=\"comment\">//并且可以定义getter和setter</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//如果outerHTML存在，则直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>).outerHTML) <span class=\"keyword\">return</span>; <span class=\"comment\">//返回this所引用元素的外部HTML</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outerHTMLGetter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> container = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>); <span class=\"comment\">//虚拟元素</span></span><br><span class=\"line\">        container.appendChild(<span class=\"keyword\">this</span>.cloneNode(<span class=\"literal\">true</span>)); <span class=\"comment\">//复制到该虚拟节点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> container.innerHTML; <span class=\"comment\">//返回虚拟节点的innerHTML</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//用指定的值设置元素的外部HTML</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outerHTMLSetter</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"comment\">//创建一个虚拟元素，设置其内容为指定的值</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> container = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">        container.innerHTML = value; <span class=\"comment\">//将虚拟元素中的节点全部移动到文档中</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (container.firstChild) <span class=\"comment\">//循环，直到container没有子节点为止</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.parentNode.insertBefore(container.firstChild, <span class=\"keyword\">this</span>); <span class=\"comment\">//删除所被取代的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.parentNode.removeChild(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//现在使用这两个函数作为所有Element对象的outerHTML属性的getter和setter</span></span><br><span class=\"line\">    <span class=\"comment\">//如果它存在则使用ES5的Object.defineProperty()方法，</span></span><br><span class=\"line\">    <span class=\"comment\">//否则，退而求其次，使用__defineGetter__()和__defineSetter__()</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.defineProperty) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.defineProperty(Element.prototype, <span class=\"string\">\"outerHTML\"</span>, &#123;</span><br><span class=\"line\">            get: outerHTMLGetter,</span><br><span class=\"line\">            set: outerHTMLSetter,</span><br><span class=\"line\">            enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Element.prototype.__defineGetter__(<span class=\"string\">\"outerHTML\"</span>, outerHTMLGetter);</span><br><span class=\"line\">        Element.prototype.__defineSetter__(<span class=\"string\">\"outerHTML\"</span>, outerHTMLSetter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"倒序排列子节点\"><a href=\"#倒序排列子节点\" class=\"headerlink\" title=\"倒序排列子节点\"></a>倒序排列子节点</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//倒序排列节点n的子节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverse</span>(<span class=\"params\">n</span>) </span>&#123; <span class=\"comment\">//创建一个DocumentFragment作为临时容器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> f = <span class=\"built_in\">document</span>.createDocumentFragment(); <span class=\"comment\">//从后至前循环子节点，将每一个子节点移动到文档片段中</span></span><br><span class=\"line\">    <span class=\"comment\">//n的最后一个节点变成f的第一个节点，反之亦然</span></span><br><span class=\"line\">    <span class=\"comment\">//注意，给f添加一个节点，该节点自动地会从n中删除</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n.lastChild) f.appendChild(n.lastChild); <span class=\"comment\">//最后，把f的所有子节点一次性全部移回n中</span></span><br><span class=\"line\">    n.appendChild(f);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"查询窗口滚动条的位置\"><a href=\"#查询窗口滚动条的位置\" class=\"headerlink\" title=\"查询窗口滚动条的位置\"></a>查询窗口滚动条的位置</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以一个对象的x和y属性的方式返回滚动条的偏移量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getScrollOffsets</span>(<span class=\"params\">w</span>) </span>&#123; <span class=\"comment\">//使用指定的窗口，如果不带参数则使用当前窗口</span></span><br><span class=\"line\">    w = w || <span class=\"built_in\">window</span>; <span class=\"comment\">//除了IE 8及更早的版本以外，其他浏览器都能用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (w.pageXOffset != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        x: w.pageXOffset,</span><br><span class=\"line\">        y: w.pageYOffset</span><br><span class=\"line\">    &#125;; <span class=\"comment\">//对标准模式下的IE（或任何浏览器）</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = w.document;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.compatMode == <span class=\"string\">\"CSS1Compat\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            x: d.documentElement.scrollLeft,</span><br><span class=\"line\">            y: d.documentElement.scrollTop</span><br><span class=\"line\">        &#125;; <span class=\"comment\">//对怪异模式下的浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        x: d.body.scrollLeft,</span><br><span class=\"line\">        y: d.body.scrollTop</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"查询窗口的视口尺寸\"><a href=\"#查询窗口的视口尺寸\" class=\"headerlink\" title=\"查询窗口的视口尺寸\"></a>查询窗口的视口尺寸</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//作为一个对象的w和h属性返回视口的尺寸</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getViewportSize</span>(<span class=\"params\">w</span>) </span>&#123; <span class=\"comment\">//使用指定的窗口，如果不带参数则使用当前窗口</span></span><br><span class=\"line\">    w = w || <span class=\"built_in\">window</span>; <span class=\"comment\">//除了IE 8及更早的版本以外，其他浏览器都能用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (w.innerWidth != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        w: w.innerWidth,</span><br><span class=\"line\">        h: w.innerHeight</span><br><span class=\"line\">    &#125;; <span class=\"comment\">//对标准模式下的IE（或任何浏览器）</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = w.document;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.compatMode == <span class=\"string\">\"CSS1Compat\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            w: d.documentElement.clientWidth,</span><br><span class=\"line\">            h: d.documentElement.clientHeight</span><br><span class=\"line\">        &#125;; <span class=\"comment\">//对怪异模式下的浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        w: d.body.clientWidth,</span><br><span class=\"line\">        h: d.body.clientWidth</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"返回函数的名字\"><a href=\"#返回函数的名字\" class=\"headerlink\" title=\"返回函数的名字\"></a>返回函数的名字</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name || <span class=\"keyword\">this</span>.toString().match(<span class=\"regexp\">/function\\s*(\\w*)\\s*\\(/</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"原生JS实现CSS动画1\"><a href=\"#原生JS实现CSS动画1\" class=\"headerlink\" title=\"原生JS实现CSS动画1\"></a>原生JS实现CSS动画1</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将e转化为相对定位的元素，使之左右\"震动\"</span></span><br><span class=\"line\"><span class=\"comment\">//第一个参数可以是元素对象或者元素的id</span></span><br><span class=\"line\"><span class=\"comment\">//如果第二个参数是函数，以e为参数，它将在动画结束时调用</span></span><br><span class=\"line\"><span class=\"comment\">//第三个参数指定e震动的距离，默认是5像素</span></span><br><span class=\"line\"><span class=\"comment\">//第四个参数指定震动多久，默认是500毫秒</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shake</span>(<span class=\"params\">e, oncomplete, distance, time</span>) </span>&#123; <span class=\"comment\">//句柄参数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> e === <span class=\"string\">\"string\"</span>) e = <span class=\"built_in\">document</span>.getElementById(e);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!time) time = <span class=\"number\">500</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!distance) distance = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> originalStyle = e.style.cssText; <span class=\"comment\">//保存e的原始style</span></span><br><span class=\"line\">    e.style.position = <span class=\"string\">\"relative\"</span>; <span class=\"comment\">//使e相对定位</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).getTime(); <span class=\"comment\">//注意，动画的开始时间</span></span><br><span class=\"line\">    animate(); <span class=\"comment\">//动画开始</span></span><br><span class=\"line\">    <span class=\"comment\">//函数检查消耗的时间，并更新e的位置</span></span><br><span class=\"line\">    <span class=\"comment\">//如果动画完成，它将e还原为原始状态</span></span><br><span class=\"line\">    <span class=\"comment\">//否则，它更新e的位置，安排它自身重新运行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animate</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> now = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).getTime(); <span class=\"comment\">//得到当前时间</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> elapsed = now - start; <span class=\"comment\">//从开始以来消耗了多长时间？</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> fraction = elapsed / time; <span class=\"comment\">//是总时间的几分之几？</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fraction &lt; <span class=\"number\">1</span>) &#123; <span class=\"comment\">//如果动画未完成</span></span><br><span class=\"line\">            <span class=\"comment\">//作为动画完成比例的函数，计算e的x位置</span></span><br><span class=\"line\">            <span class=\"comment\">//使用正弦函数将完成比例乘以4pi</span></span><br><span class=\"line\">            <span class=\"comment\">//所以，它来回往复两次</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> x = distance * <span class=\"built_in\">Math</span>.sin(fraction * <span class=\"number\">4</span> * <span class=\"built_in\">Math</span>.PI);</span><br><span class=\"line\">            e.style.left = x + <span class=\"string\">\"px\"</span>; <span class=\"comment\">//在25毫秒后或在总时间的最后尝试再次运行函数</span></span><br><span class=\"line\">            <span class=\"comment\">//目的是为了产生每秒40帧的动画</span></span><br><span class=\"line\">            setTimeout(animate, <span class=\"built_in\">Math</span>.min(<span class=\"number\">25</span>, time - elapsed));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//否则，动画完成</span></span><br><span class=\"line\">            e.style.cssText = originalStyle <span class=\"comment\">//恢复原始样式</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (oncomplete) oncomplete(e); <span class=\"comment\">//调用完成后的回调函数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"原生JS实现CSS动画2\"><a href=\"#原生JS实现CSS动画2\" class=\"headerlink\" title=\"原生JS实现CSS动画2\"></a>原生JS实现CSS动画2</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fadeOut</span>(<span class=\"params\">e, oncomplete, time</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> e === <span class=\"string\">\"string\"</span>) e = <span class=\"built_in\">document</span>.getElementById(e);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!time) time = <span class=\"number\">500</span>; <span class=\"comment\">//使用Math.sqrt作为一个简单的“缓动函数”来创建动画</span></span><br><span class=\"line\">    <span class=\"comment\">//精巧的非线性：一开始淡出得比较快，然后缓慢了一些</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ease = <span class=\"built_in\">Math</span>.sqrt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).getTime(); <span class=\"comment\">//注意：动画开始的时间</span></span><br><span class=\"line\">    animate(); <span class=\"comment\">//动画开始</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animate</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> elapsed = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).getTime() - start; <span class=\"comment\">//消耗的时间</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> fraction = elapsed / time; <span class=\"comment\">//总时间的几分之几？</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fraction &lt; <span class=\"number\">1</span>) &#123; <span class=\"comment\">//如果动画未完成</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> opacity = <span class=\"number\">1</span> - ease(fraction); <span class=\"comment\">//计算元素的不透明度</span></span><br><span class=\"line\">            e.style.opacity = <span class=\"built_in\">String</span>(opacity); <span class=\"comment\">//设置在e上</span></span><br><span class=\"line\">            setTimeout(animate, <span class=\"comment\">//调度下一帧</span></span><br><span class=\"line\">                <span class=\"built_in\">Math</span>.min(<span class=\"number\">25</span>, time - elapsed));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//否则，动画完成</span></span><br><span class=\"line\">            e.style.opacity = <span class=\"string\">\"0\"</span>; <span class=\"comment\">//使e完全透明</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (oncomplete) oncomplete(e); <span class=\"comment\">//调用完成后的回调函数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"仿HTML5的classList属性\"><a href=\"#仿HTML5的classList属性\" class=\"headerlink\" title=\"仿HTML5的classList属性\"></a>仿HTML5的classList属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *如果e有classList属性则返回它。否则，返回一个为e模拟DOMTokenList API的对象</span></span><br><span class=\"line\"><span class=\"comment\"> *返回的对象有contains()、add()、remove()、toggle()和toString()等方法</span></span><br><span class=\"line\"><span class=\"comment\"> *来检测和修改元素e的类集合。如果classList属性是原生支持的，</span></span><br><span class=\"line\"><span class=\"comment\"> *返回的类数组对象有length和数组索引属性。模拟DOMTokenList不是类数组对象，</span></span><br><span class=\"line\"><span class=\"comment\"> *但是它有一个toArray()方法来返回一个含元素类名的纯数组快照</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">classList</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.classList) <span class=\"keyword\">return</span> e.classList; <span class=\"comment\">//如果e.classList存在，则返回它</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CSSClassList(e); <span class=\"comment\">//否则，就伪造一个</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//CSSClassList是一个模拟DOMTokenList的JavaScript类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CSSClassList</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.e = e;</span><br><span class=\"line\">&#125; <span class=\"comment\">//如果e.className包含类名c则返回true否则返回false</span></span><br><span class=\"line\">CSSClassList.prototype.contains = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">c</span>) </span>&#123; <span class=\"comment\">//检查c是否是合法的类名</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c.length === <span class=\"number\">0</span> || c.indexOf(<span class=\"string\">\" \"</span>) != <span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Invalid class name:'\"</span> + c + <span class=\"string\">\"'\"</span>); <span class=\"comment\">//首先是常规检查</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> classes = <span class=\"keyword\">this</span>.e.className;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!classes) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//e不含类名</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (classes === c) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">//e有一个完全匹配的类名</span></span><br><span class=\"line\">    <span class=\"comment\">//否则，把c自身看做一个单词，利用正则表达式搜索c</span></span><br><span class=\"line\">    <span class=\"comment\">//\\b在正则表达式里代表单词的边界</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> classes.search(<span class=\"string\">\"\\\\b\"</span> + c + <span class=\"string\">\"\\\\b\"</span>) != <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;; <span class=\"comment\">//如果c不存在，将c添加到e.className中</span></span><br><span class=\"line\">CSSClassList.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">c</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.contains(c)) <span class=\"keyword\">return</span>; <span class=\"comment\">//如果存在，什么都不做</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> classes = <span class=\"keyword\">this</span>.e.className;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (classes &amp;&amp; classes[classes.length - <span class=\"number\">1</span>] != <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">        c = <span class=\"string\">\"\"</span> + c; <span class=\"comment\">//如果需要加一个空格</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.e.className += c; <span class=\"comment\">//将c添加到className中</span></span><br><span class=\"line\">&#125;; <span class=\"comment\">//将在e.className中出现的所有c都删除</span></span><br><span class=\"line\">CSSClassList.prototype.remove = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">c</span>) </span>&#123; <span class=\"comment\">//检查c是否是合法的类名</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c.length === <span class=\"number\">0</span> || c.indexOf(<span class=\"string\">\" \"</span>) != <span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Invalid class name:'\"</span> + c + <span class=\"string\">\"'\"</span>); <span class=\"comment\">//将所有作为单词的c和多余的尾随空格全部删除</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pattern = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"\\\\b\"</span> + c + <span class=\"string\">\"\\\\b\\\\s*\"</span>, <span class=\"string\">\"g\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.e.className = <span class=\"keyword\">this</span>.e.className.replace(pattern, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">&#125;; <span class=\"comment\">//如果c不存在，将c添加到e.className中，并返回true</span></span><br><span class=\"line\"><span class=\"comment\">//否则，将在e.className中出现的所有c都删除，并返回false</span></span><br><span class=\"line\">CSSClassList.prototype.toggle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">c</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.contains(c)) &#123; <span class=\"comment\">//如果e.className包含c</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.remove(c); <span class=\"comment\">//删除它</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//否则</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.add(c); <span class=\"comment\">//添加它</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;; <span class=\"comment\">//返回e.className本身</span></span><br><span class=\"line\">CSSClassList.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.e.className;</span><br><span class=\"line\">&#125;; <span class=\"comment\">//返回在e.className中的类名</span></span><br><span class=\"line\">CSSClassList.prototype.toArray = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.e.className.match(<span class=\"regexp\">/\\b\\w+\\b/g</span>) || [];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"查询纯文本形式的内容\"><a href=\"#查询纯文本形式的内容\" class=\"headerlink\" title=\"查询纯文本形式的内容\"></a>查询纯文本形式的内容</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *一个参数，返回元素的textContent或innerText</span></span><br><span class=\"line\"><span class=\"comment\"> *两个参数，用value参数的值设置元素的textContent或innerText</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">textContent</span>(<span class=\"params\">element, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> content = element.textContent; <span class=\"comment\">//检测textContent是否有定义</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value === <span class=\"literal\">undefined</span>) &#123; <span class=\"comment\">//没传递value，因此返回当前文本</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (content !== <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> content;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> element.innerText;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//传递了value，因此设置文本</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (content !== <span class=\"literal\">undefined</span>) element.textContent = value;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> element.innerText = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>textContent属性在除了IE的所有当前的浏览器中都支持。在IE中，可以用Element的innerText属性来代替。<br><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"查找元素的后代中节点中的所有Text节点\"><a href=\"#查找元素的后代中节点中的所有Text节点\" class=\"headerlink\" title=\"查找元素的后代中节点中的所有Text节点\"></a>查找元素的后代中节点中的所有Text节点</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回元素e的纯文本内容，递归进入其子元素</span></span><br><span class=\"line\"><span class=\"comment\">//该方法的效果类似于textContent属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">textContent</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> child, type, s = <span class=\"string\">\"\"</span>; <span class=\"comment\">//s保存所有子节点的文本</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (child = e.firstChild; child != <span class=\"literal\">null</span>; child = child.nextSibling) &#123;</span><br><span class=\"line\">        type = child.nodeType;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type === <span class=\"number\">3</span> || type === <span class=\"number\">4</span>) <span class=\"comment\">//Text和CDATASection节点</span></span><br><span class=\"line\">            s += child.nodeValue;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type === <span class=\"number\">1</span>) <span class=\"comment\">//递归Element节点</span></span><br><span class=\"line\">            s += textContent(child);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"使用innerHTML实现insertAdjacentHTML\"><a href=\"#使用innerHTML实现insertAdjacentHTML\" class=\"headerlink\" title=\"使用innerHTML实现insertAdjacentHTML()\"></a>使用innerHTML实现insertAdjacentHTML()</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//本模块为不支持它的浏览器定义了Element.insertAdjacentHTML</span></span><br><span class=\"line\"><span class=\"comment\">//还定义了一些可移植的HTML插入函数，它们的名字比insertAdjacentHTML更符合逻辑：</span></span><br><span class=\"line\"><span class=\"comment\">//Insert.before()、Insert.after()、Insert.atStart()和Insert.atEnd()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Insert = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//如果元素有原生的insertAdjacentHTML，</span></span><br><span class=\"line\">    <span class=\"comment\">//在4个函数名更明了的HTML插入函数中使用它</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>).insertAdjacentHTML) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            before: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e, h</span>) </span>&#123;</span><br><span class=\"line\">                e.insertAdjacentHTML(<span class=\"string\">\"beforebegin\"</span>, h);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            after: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e, h</span>) </span>&#123;</span><br><span class=\"line\">                e.insertAdjacentHTML(<span class=\"string\">\"afterend\"</span>, h);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            atStart: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e, h</span>) </span>&#123;</span><br><span class=\"line\">                e.insertAdjacentHTML(<span class=\"string\">\"afterbegin\"</span>, h);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            atEnd: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e, h</span>) </span>&#123;</span><br><span class=\"line\">                e.insertAdjacentHTML(<span class=\"string\">\"beforeend\"</span>, h);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//否则，无原生的insertAdjacentHTML</span></span><br><span class=\"line\">    <span class=\"comment\">//实现同样的4个插入函数，并使用它们来定义insertAdjacentHTML</span></span><br><span class=\"line\">    <span class=\"comment\">//首先，定义一个工具函数，传入HTML字符串，返回一个DocumentFragment，</span></span><br><span class=\"line\">    <span class=\"comment\">//它包含了解析后的HTML的表示</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fragment</span>(<span class=\"params\">html</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> elt = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>); <span class=\"comment\">//创建空元素</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> frag = <span class=\"built_in\">document</span>.createDocumentFragment(); <span class=\"comment\">//创建空文档片段</span></span><br><span class=\"line\">        elt.innerHTML = html; <span class=\"comment\">//设置元素内容</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (elt.firstChild) <span class=\"comment\">//移动所有的节点</span></span><br><span class=\"line\">            frag.appendChild(elt.firstChild); <span class=\"comment\">//从elt到frag</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> frag; <span class=\"comment\">//然后返回frag</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Insert = &#123;</span><br><span class=\"line\">        before: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">elt, html</span>) </span>&#123;</span><br><span class=\"line\">            elt.parentNode.insertBefore(fragment(html), elt);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        after: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">elt, html</span>) </span>&#123;</span><br><span class=\"line\">            elt.parentNode.insertBefore(fragment(html), elt.nextSibling);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        atStart: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">elt, html</span>) </span>&#123;</span><br><span class=\"line\">            elt.insertBefore(fragment(html), elt.firstChild);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        atEnd: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">elt, html</span>) </span>&#123;</span><br><span class=\"line\">            elt.appendChild(fragment(html));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;; <span class=\"comment\">//基于以上函数实现insertAdjacentHTML</span></span><br><span class=\"line\">    Element.prototype.insertAdjacentHTML = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pos, html</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (pos.toLowerCase()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"beforebegin\"</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Insert.before(<span class=\"keyword\">this</span>, html);</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"afterend\"</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Insert.after(<span class=\"keyword\">this</span>, html);</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"afterbegin\"</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Insert.atStart(<span class=\"keyword\">this</span>, html);</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"beforeend\"</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Insert.atEnd(<span class=\"keyword\">this</span>, html);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Insert; <span class=\"comment\">//最后返回4个插入函数</span></span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n<h2 id=\"拖拽\"><a href=\"#拖拽\" class=\"headerlink\" title=\"拖拽\"></a>拖拽</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *Drag.js：拖动绝对定位的HTML元素</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *这个模块定义了一个drag()函数，它用于mousedown事件处理程序的调用</span></span><br><span class=\"line\"><span class=\"comment\"> *随后的mousemove事件将移动指定元素，mouseup事件将终止拖动</span></span><br><span class=\"line\"><span class=\"comment\"> *这些实现能同标准和IE两种事件模型一起工作</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *参数：</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *elementToDrag：接收mousedown事件的元素或某些包含元素</span></span><br><span class=\"line\"><span class=\"comment\"> *它必须是定位的元素,元素的样式必须是行内样式</span></span><br><span class=\"line\"><span class=\"comment\"> *它的style.left和style.top值将随着用户的拖动而改变</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *event：mousedown事件对象</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drag</span>(<span class=\"params\">elementToDrag, event</span>) </span>&#123; <span class=\"comment\">//初始鼠标位置，转换为文档坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> startX = event.clientX;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> startY = event.clientY; <span class=\"comment\">//在文档坐标下，待拖动元素的初始位置</span></span><br><span class=\"line\">    <span class=\"comment\">//因为elementToDrag是绝对定位的，</span></span><br><span class=\"line\">    <span class=\"comment\">//所以我们可以假设它的offsetParent就是文档的body元素</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> origX = <span class=\"built_in\">parseFloat</span>(elementToDrag.style.left);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> origY = <span class=\"built_in\">parseFloat</span>(elementToDrag.style.top); <span class=\"comment\">//计算mousedown事件和元素左上角之间的距离</span></span><br><span class=\"line\">    <span class=\"comment\">//我们将它另存为鼠标移动的距离</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.addEventListener) &#123; <span class=\"comment\">//标准事件模型</span></span><br><span class=\"line\">        <span class=\"comment\">//在document对象上注册捕获事件处理程序</span></span><br><span class=\"line\">        <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mousemove\"</span>, moveHandler, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mouseup\"</span>, upHandler, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.attachEvent) &#123; <span class=\"comment\">//用于IE5～8的IE事件模型</span></span><br><span class=\"line\">        <span class=\"comment\">//在IE事件模型中，</span></span><br><span class=\"line\">        <span class=\"comment\">//捕获事件是通过调用元素上的setCapture()捕获它们</span></span><br><span class=\"line\">        elementToDrag.setCapture();</span><br><span class=\"line\">        elementToDrag.attachEvent(<span class=\"string\">\"onmousemove\"</span>, moveHandler);</span><br><span class=\"line\">        elementToDrag.attachEvent(<span class=\"string\">\"onmouseup\"</span>, upHandler); <span class=\"comment\">//作为mouseup事件看待鼠标捕获的丢失</span></span><br><span class=\"line\">        elementToDrag.attachEvent(<span class=\"string\">\"onlosecapture\"</span>, upHandler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//我们处理了这个事件，不让任何其他元素看到它</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event.stopPropagation) event.stopPropagation(); <span class=\"comment\">//标准模型</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> event.cancelBubble = <span class=\"literal\">true</span>; <span class=\"comment\">//IE</span></span><br><span class=\"line\">    <span class=\"comment\">//现在阻止任何默认操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event.preventDefault) event.preventDefault(); <span class=\"comment\">//标准模型</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> event.returnValue = <span class=\"literal\">false</span>; <span class=\"comment\">//IE</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当元素正在被拖动时， 这就是捕获mousemove事件的处理程序</span></span><br><span class=\"line\"><span class=\"comment\">     *它用于移动这个元素 </span></span><br><span class=\"line\"><span class=\"comment\">     **/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moveHandler</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!e) e = <span class=\"built_in\">window</span>.event; <span class=\"comment\">//IE事件模型</span></span><br><span class=\"line\">        <span class=\"comment\">//移动这个元素到当前鼠标位置，</span></span><br><span class=\"line\">        <span class=\"comment\">//通过滚动条的位置和初始单击的偏移量来调整</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> targetLeft = e.clientX - startX + origX;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> targetTop = e.clientY - startY + origY;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> minLeft = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> minTop = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> maxLeft = (<span class=\"built_in\">document</span>.documentElement.clientWidth || <span class=\"built_in\">document</span>.body.clientWidth) - elementToDrag.offsetWidth;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> maxTop = (<span class=\"built_in\">document</span>.documentElement.clientHeight || <span class=\"built_in\">document</span>.body.clientHeight) - elementToDrag.offsetHeight;</span><br><span class=\"line\">        targetLeft = targetLeft &gt; maxLeft ? maxLeft : (targetLeft &lt; minLeft ? minLeft : targetLeft);</span><br><span class=\"line\">        targetTop = targetTop &gt; maxTop ? maxTop : (targetTop &lt; minTop ? minTop : targetTop);</span><br><span class=\"line\">        elementToDrag.style.left = targetLeft + <span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">        elementToDrag.style.top = targetTop + <span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.stopPropagation) e.stopPropagation(); <span class=\"comment\">//标准</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> e.cancelBubble = <span class=\"literal\">true</span>; <span class=\"comment\">//IE</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *这是捕获在拖动结束时发生的最终mouseup事件的处理程序</span></span><br><span class=\"line\"><span class=\"comment\">     **/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upHandler</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!e) e = <span class=\"built_in\">window</span>.event; <span class=\"comment\">//IE事件模型</span></span><br><span class=\"line\">        <span class=\"comment\">//注销捕获事件处理程序</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.removeEventListener) &#123; <span class=\"comment\">//DOM事件模型</span></span><br><span class=\"line\">            <span class=\"built_in\">document</span>.removeEventListener(<span class=\"string\">\"mouseup\"</span>, upHandler, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.removeEventListener(<span class=\"string\">\"mousemove\"</span>, moveHandler, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.detachEvent) &#123; <span class=\"comment\">//IE 5+事件模型</span></span><br><span class=\"line\">            elementToDrag.detachEvent(<span class=\"string\">\"onlosecapture\"</span>, upHandler);</span><br><span class=\"line\">            elementToDrag.detachEvent(<span class=\"string\">\"onmouseup\"</span>, upHandler);</span><br><span class=\"line\">            elementToDrag.detachEvent(<span class=\"string\">\"onmousemove\"</span>, moveHandler);</span><br><span class=\"line\">            elementToDrag.releaseCapture();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//并且不让事件进一步传播</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.stopPropagation) e.stopPropagation(); <span class=\"comment\">//标准模型</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> e.cancelBubble = <span class=\"literal\">true</span>; <span class=\"comment\">//IE</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#readme\">⬆ back to top</a></strong></p>\n","excerpt":"libraries目录 仿ECMAScript5中Object.create()函数 仿ECMAScript5中String.trim()函数 仿ECMAScript5中Array.reduce()函数 仿ECMAScript5中Object.keys()函数 仿ECMAScript5中Function.bind()函数 仿ECMAScript5中Array.map()函数 仿Math.max()方法实现 仿String.match()方法实现 仿HTML5的classList属性实现 仿Function.name属性实现 返回元素的第n层祖先元素 返回元素的第n个兄弟元素 返回元素的第n个子代元素 原生JS实现CSS动画之震动 原生JS实现CSS动画之隐藏 在数组中查找所有出现的元素方法 数据类型检测之特殊情况特殊处理 使用innerHTML实现outerHTML属性 插入节点 倒序排列子节点 查询窗口滚动条的位置 查询窗口的视口尺寸 表格的行排序 生成目录表 数组去重 冒泡排序 从URL解析参数 获取纯文本的元素内容 手写一个JSONP实现 查询纯文本形式的内容 查找元素的后代中节点中的所有Text节点 使用innerHTML实现insertAdjacentHTML 拖拽","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"拍摄模特技巧","date":"2017-11-15T09:24:52.000Z","path":"2017/11/15/photography-01/","text":"1、伸出手遮阳光2、靠墙上，从侧面拍，一般冲着镜头伸出一只胳膊，看与不看镜头，镜头就在那儿。3、捂住一只眼睛4、装惊讶捂住嘴5、竖着的食指挡住嘟着的嘴6、一只手手背放在额上，抬头眯眼作防晒状。7、站在空阔的地方，掐腰，叉腿，摆淘宝POSE。8、闭上眼，闻花，闻草，闻气场。9、蹲着，屈膝伸出大腿，仰角拍，突出高跟鞋。 10、站立，背对镜头，扭过来，掐腰，仰角拍，突出长腿。11、室内照，躺床上，身体L形，两条大腿靠墙上。对胸小的模特这么拍很悲剧。12、拿气球，拿风车，拿雨伞，拿水果，拿毛绒玩具，拿煤油灯，拿小花，拿小叶，拿乐器，拿皮箱，拿神马。13、俯下身子，面对低角度镜头，手里结V字，结桃心儿，结眼镜儿。14、甩头发，没风的时候甩，风大的时候抡。15、跳跃，对着镜头，W腿形，表情多狰狞都没事儿，跳毛，为毛跳，忽略。16、俩手按在头两边，歪头，或者直头，表情一般都困惑，迷茫，咬下嘴唇效果更佳。17、浴室定律1一定把衣服淋湿了。18、浴室定律2 一定要扶浴室的玻璃，隔着玻璃拍19、浴室定律3 一定要蜷缩在喷头下的角落里，头发湿的，乱的，人，被抛弃的。20、浴室定律4-一定要坐马桶，短裤，白衬衣，叼香烟，有木有！21、浴室定律5一定要躺浴缸，一样的浴缸，不一样的躺，分玫瑰花瓣躺，纯水躺，泡沫躺，着衣躺，不着衣躺以及无水干躺。22、浴室定律6一定坐在盥洗台上，盥洗台一定有镜子，一定白衬衣，腿，光…且长。23、站着，蹲着，靠着，拍，换场景； 站着，蹲着，靠着，拍，再换场景； 再站着，再蹲着，再靠着，再拍…24、手机党，玩手机中，发短信中，接电话中，手机自拍中，手机放桌子上，主人公背景虚化中…25、双手握一起，靠近下巴，祈祷状，陶醉状，迷惑状，寒冷状。26、靠树、靠车、靠家具、靠墙，一脸迷茫27、一指禅，指天，指地，指花，指阿猫阿狗，指字，指牌子，指画，指别人，指自己，指不拉不拉28、在门框类结构里做“因”字造型。29、贴玻璃上拍里面的倒影。30、坐汽车前机盖子上拍照31、草坪控，绿底儿白人，拍成头冲下。32、永远大头，永远半身。33、室内照，永远有打哈欠，伸懒腰。34、室内照，永远坐床头挡板上35、拿叶子挡脸，拿花挡脸，拿围巾挡脸，拿头发挡脸，拿门挡脸，挡脸或挡眼，挡眼挡一只，挡脸挡一半。36、趴在餐厅，路边摊，酒吧，咖啡厅，教室的各种桌子上，一种姿势，各种美。37、找一特破楼栋子，站那儿，嘛也不解释。38、找一特破楼梯，坐那儿，嘛也不解释39、找一特大墙，蹲那儿，嘛也不解释40、不管天多热，戴一耳朵帽儿，升级版本再配个耳机线，一手抚脸侧，表示有声儿。41、坐驾驶位，开门，把脚撂地上，必须高跟鞋。42、黑衣服、黑裤，站黑影里，黑你黑到你伤不起。43、被拍的永远 看镜头 看镜头 看镜头 看镜头44、婚纱照永远坐栏杆上，河边上，桥边上，俩人永远面朝天空，永远笑逐颜开。45、婚纱照永远有一张飞头纱，有一张飞裙角，有一张飞花束。46、婚纱照男猪脚永远手插裤兜酷，女猪脚永远身靠后背甜。47、永远有个小胶片相机，摆弄摆，摆弄摆，摆弄摆。48、双手起，身体十字形，仰望天空，闭眼，无比陶醉幸福状。49、扬落叶、扬落花、扬雪花、扬水花50、一拍铁轨就抱一吉他，一拍花园就抱一提琴，一拍婚纱就抱一花，一拍校园就抱一书，一拍私房就抱一毛绒，一拍酒吧就抱一瓶子，一拍浴室就抱一喷头，一拍休闲就抱一咖啡杯… 早些时候写得，放在自己的不老歌里，没想到在网上传的蛮快，发在这里确定下源头 2017年精选整理最新网红摄影课程 我自己很久的收藏！都很了解，零基础小白或进阶学习的摄影师做提升寻找风格都适合！不懂得可以问我，我可以帮你们推荐学习！欢迎随时交流学习 我自己也在不断提升丰富当中，有新入的我会补到你们手中！风格包含 小清新 古风 情绪 旅拍 日系 文艺 风景人像 产品 复古 室内 胶片……几乎所有风格……有哪些全网红私教李小蕾 ，疯子 ，林初寒，蝈蝈小姐，宇峰小蔡 ，梁景红后期 ，阿牧摄影 ，段岳衡，无限tx ，柔七 ，微澜，Tang，七七姑凉，ARIES教程 ，天颜，19组阿满，阿刘摄影后期 ，李涛摄影后期 ，刘杨高手后期 ，老飘飘lr基础，安超，亲切第一，傲秀课程，半岛雪人，HANBOWEN人像后期 ，云浮木 ，素小裹，张小翼 ，小醒 ，歪猫 ，黑色契约 ，becho后期，亲切，phoGirl，酷熊，灵动商业修图，流光画影，云浮木，，东边糖糖云，翼小君，李默默，大纵摄影，陈卡卡，歪猫，易思昂德商业修图私教…………","content":"<p>1、伸出手遮阳光<br>2、靠墙上，从侧面拍，一般冲着镜头伸出一只胳膊，看与不看镜头，镜头就在那儿。<br>3、捂住一只眼睛<br>4、装惊讶捂住嘴<br>5、竖着的食指挡住嘟着的嘴<br>6、一只手手背放在额上，抬头眯眼作防晒状。<br>7、站在空阔的地方，掐腰，叉腿，摆淘宝POSE。<br>8、闭上眼，闻花，闻草，闻气场。<br>9、蹲着，屈膝伸出大腿，仰角拍，突出高跟鞋。</p>\n<a id=\"more\"></a>\n<p>10、站立，背对镜头，扭过来，掐腰，仰角拍，突出长腿。<br>11、室内照，躺床上，身体L形，两条大腿靠墙上。对胸小的模特这么拍很悲剧。<br>12、拿气球，拿风车，拿雨伞，拿水果，拿毛绒玩具，拿煤油灯，拿小花，拿小叶，拿乐器，拿皮箱，拿神马。<br>13、俯下身子，面对低角度镜头，手里结V字，结桃心儿，结眼镜儿。<br>14、甩头发，没风的时候甩，风大的时候抡。<br>15、跳跃，对着镜头，W腿形，表情多狰狞都没事儿，跳毛，为毛跳，忽略。<br>16、俩手按在头两边，歪头，或者直头，表情一般都困惑，迷茫，咬下嘴唇效果更佳。<br>17、浴室定律1一定把衣服淋湿了。<br>18、浴室定律2 一定要扶浴室的玻璃，隔着玻璃拍<br>19、浴室定律3 一定要蜷缩在喷头下的角落里，头发湿的，乱的，人，被抛弃的。<br>20、浴室定律4-一定要坐马桶，短裤，白衬衣，叼香烟，有木有！<br>21、浴室定律5一定要躺浴缸，一样的浴缸，不一样的躺，分玫瑰花瓣躺，纯水躺，泡沫躺，着衣躺，不着衣躺以及无水干躺。<br>22、浴室定律6一定坐在盥洗台上，盥洗台一定有镜子，一定白衬衣，腿，光…且长。<br>23、站着，蹲着，靠着，拍，换场景； 站着，蹲着，靠着，拍，再换场景； 再站着，再蹲着，再靠着，再拍…<br>24、手机党，玩手机中，发短信中，接电话中，手机自拍中，手机放桌子上，主人公背景虚化中…<br>25、双手握一起，靠近下巴，祈祷状，陶醉状，迷惑状，寒冷状。<br>26、靠树、靠车、靠家具、靠墙，一脸迷茫<br>27、一指禅，指天，指地，指花，指阿猫阿狗，指字，指牌子，指画，指别人，指自己，指不拉不拉<br>28、在门框类结构里做“因”字造型。<br>29、贴玻璃上拍里面的倒影。<br>30、坐汽车前机盖子上拍照<br>31、草坪控，绿底儿白人，拍成头冲下。<br>32、永远大头，永远半身。<br>33、室内照，永远有打哈欠，伸懒腰。<br>34、室内照，永远坐床头挡板上<br>35、拿叶子挡脸，拿花挡脸，拿围巾挡脸，拿头发挡脸，拿门挡脸，挡脸或挡眼，挡眼挡一只，挡脸挡一半。<br>36、趴在餐厅，路边摊，酒吧，咖啡厅，教室的各种桌子上，一种姿势，各种美。<br>37、找一特破楼栋子，站那儿，嘛也不解释。<br>38、找一特破楼梯，坐那儿，嘛也不解释<br>39、找一特大墙，蹲那儿，嘛也不解释<br>40、不管天多热，戴一耳朵帽儿，升级版本再配个耳机线，一手抚脸侧，表示有声儿。<br>41、坐驾驶位，开门，把脚撂地上，必须高跟鞋。<br>42、黑衣服、黑裤，站黑影里，黑你黑到你伤不起。<br>43、被拍的永远 看镜头 看镜头 看镜头 看镜头<br>44、婚纱照永远坐栏杆上，河边上，桥边上，俩人永远面朝天空，永远笑逐颜开。<br>45、婚纱照永远有一张飞头纱，有一张飞裙角，有一张飞花束。<br>46、婚纱照男猪脚永远手插裤兜酷，女猪脚永远身靠后背甜。<br>47、永远有个小胶片相机，摆弄摆，摆弄摆，摆弄摆。<br>48、双手起，身体十字形，仰望天空，闭眼，无比陶醉幸福状。<br>49、扬落叶、扬落花、扬雪花、扬水花<br>50、一拍铁轨就抱一吉他，一拍花园就抱一提琴，一拍婚纱就抱一花，一拍校园就抱一书，一拍私房就抱一毛绒，一拍酒吧就抱一瓶子，一拍浴室就抱一喷头，一拍休闲就抱一咖啡杯…</p>\n<p>早些时候写得，放在自己的不老歌里，没想到在网上传的蛮快，发在这里确定下源头</p>\n<p>2017年精选整理最新网红摄影课程</p>\n<p>我自己很久的收藏！都很了解，零基础小白或进阶学习的摄影师做提升寻找风格都适合！不懂得可以问我，我可以帮你们推荐学习！欢迎随时交流学习</p>\n<p>我自己也在不断提升丰富当中，有新入的我会补到你们手中！<br>风格包含  小清新  古风  情绪  旅拍 日系 文艺 风景人像 产品 复古 室内  胶片……几乎所有风格……<br>有哪些全网红私教<br>李小蕾 ，疯子 ，林初寒，蝈蝈小姐，宇峰小蔡 ，梁景红后期 ，阿牧摄影 ，段岳衡，无限tx ，柔七 ，微澜，Tang，七七姑凉，ARIES教程 ，天颜，19组阿满，阿刘摄影后期 ，李涛摄影后期 ，刘杨高手后期 ，老飘飘lr基础，安超，亲切第一，傲秀课程，半岛雪人，HANBOWEN人像后期 ，云浮木 ，素小裹，张小翼 ，小醒 ，歪猫 ，黑色契约 ，becho后期，亲切，phoGirl，酷熊，灵动商业修图，流光画影，云浮木，，东边糖糖云，翼小君，李默默，大纵摄影，陈卡卡，歪猫，易思昂德商业修图私教…………</p>\n","excerpt":"1、伸出手遮阳光2、靠墙上，从侧面拍，一般冲着镜头伸出一只胳膊，看与不看镜头，镜头就在那儿。3、捂住一只眼睛4、装惊讶捂住嘴5、竖着的食指挡住嘟着的嘴6、一只手手背放在额上，抬头眯眼作防晒状。7、站在空阔的地方，掐腰，叉腿，摆淘宝POSE。8、闭上眼，闻花，闻草，闻气场。9、蹲着，屈膝伸出大腿，仰角拍，突出高跟鞋。","categories":[],"tags":[{"name":"摄影","slug":"摄影","permalink":"http://www.ding1996.cn/tags/摄影/"}]},{"title":"es6-module笔记","date":"2017-11-01T06:46:52.000Z","path":"2017/11/01/it-js-es6-module/","text":"http://es6.ruanyifeng.com/#docs/module 12345678910// export.jsvar lastname = 'sheng'var firstname = 'ding'export &#123;lastname,firstname&#125;// orexport var lastname = 'sheng'export var firstname = 'ding' 123456789// import.jsimport &#123;lastname,firstname&#125; from ./export.js// 使用console.log(lastname) \u0010// 导出全部 import * as all from ./export // 使用all.lastname","content":"<p><a href=\"http://es6.ruanyifeng.com/#docs/module\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/module</a> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lastname = <span class=\"string\">'sheng'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstname = <span class=\"string\">'ding'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;lastname,firstname&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> lastname = <span class=\"string\">'sheng'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> firstname = <span class=\"string\">'ding'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// import.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;lastname,firstname&#125; <span class=\"keyword\">from</span> ./<span class=\"keyword\">export</span>.js</span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lastname)</span><br><span class=\"line\"> \u0010<span class=\"comment\">// 导出全部</span></span><br><span class=\"line\"> <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> all <span class=\"keyword\">from</span> ./<span class=\"keyword\">export</span> </span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\">all.lastname</span><br></pre></td></tr></table></figure>\n","excerpt":"","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"sublime个性化设置","date":"2017-11-01T06:46:52.000Z","path":"2017/11/01/it-tools-sublime01/","text":"推荐使用主题 Material Theme http://equinsuocha.io/material-theme/ 安装好后在sublime设置下 推荐字体 Comic Sans MS 12345678910&#123; \"color_scheme\": \"Packages/Material Theme/schemes/Material-Theme.tmTheme\", \"font_face\": \"Comic Sans MS\", \"font_size\": 16, \"ignored_packages\": [ \"Vintage\" ], \"theme\": \"Material-Theme.sublime-theme\"&#125; sublime自带的格式化 在快捷键里面设置下 1234567[&#123; \"keys\": [\"ctrl+z\"], \"command\": \"reindent\", \"args\": &#123; \"single_line\": false &#125;&#125;]","content":"<p>推荐使用主题 Material Theme  <a href=\"http://equinsuocha.io/material-theme/\" target=\"_blank\" rel=\"noopener\">http://equinsuocha.io/material-theme/</a>  </p>\n<p>安装好后在sublime设置下</p>\n<p>推荐字体 Comic Sans MS</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"color_scheme\"</span>: <span class=\"string\">\"Packages/Material Theme/schemes/Material-Theme.tmTheme\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"font_face\"</span>: <span class=\"string\">\"Comic Sans MS\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"font_size\"</span>: <span class=\"number\">16</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"ignored_packages\"</span>:</span><br><span class=\"line\">\t[</span><br><span class=\"line\">\t\t<span class=\"string\">\"Vintage\"</span></span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"attr\">\"theme\"</span>: <span class=\"string\">\"Material-Theme.sublime-theme\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>sublime自带的格式化 在快捷键里面设置下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"ctrl+z\"</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"reindent\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"args\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"single_line\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n","excerpt":"推荐使用主题 Material Theme http://equinsuocha.io/material-theme/ 安装好后在sublime设置下 推荐字体 Comic Sans MS 12345678910&#123; \"color_scheme\": \"Packages/Material Theme/schemes/Material-Theme.tmTheme\", \"font_face\": \"Comic Sans MS\", \"font_size\": 16, \"ignored_packages\": [ \"Vintage\" ], \"theme\": \"Material-Theme.sublime-theme\"&#125;","categories":[],"tags":[{"name":"编辑器","slug":"编辑器","permalink":"http://www.ding1996.cn/tags/编辑器/"}]},{"title":"flexible.js移动端应用","date":"2017-10-30T06:31:20.000Z","path":"2017/10/30/it-css-layout/","text":"flexible.js 手淘出的一款处理移动端响应式的js工具 下载地址https://github.com/amfe/lib-flexible githubhttps://github.com/amfe/article/issues/17 作者详解 概略框架整体模仿jquery,为一个立即执行函数，并对外暴露lib对象，提供rem =&gt; px，和px =&gt; rem的转化方法。当在调整窗口尺寸的时候可以重置document.documentElement的fontSize的大小。 基本原理通过设置meta标签的content中 initial-scale,maximum-scale,minimum-scale,的值，其值根据屏幕像素比控制，在dpr越大，屏幕渲染的画布越大。 框架步骤1、判断是否存在meta[name=”viewport”];2、存在直接设置，不存在自动生成，推荐不使用;3、通过window.devicePixelRatio获取屏幕的屏幕像素比;4、根据屏幕的尺寸，通过document.documentElement.getBoundingClientRect().width获取屏幕宽度;5、设置document.documentElement.style.fontSize值; 6、设置document.body.style.fontSize ;7、提供一些方法; 重要方法解读123456789101112131415161718192021222324// 自定义页面元素的fontsize，方便rem的配置function refreshRem()&#123; var width = docEl.getBoundingClientRect().width; //屏幕信息，屏幕宽度，bound：绑定；rect：矩形 if (width / dpr &gt; 640) &#123; width = 640 * dpr; &#125; var rem = width / 10; docEl.style.fontSize = rem + 'px'; flexible.rem = win.rem = rem;&#125; /** * 对于设计稿为320px的，根元素fontsize = 32px; * 对于设计稿为1080px的，根元素fontsize = 108px; * 设屏幕的宽度为w(rem*10),设计稿尺寸为w,那么有比例关系w:rem*10 = x:1 ; * ==&gt; x= w/(rem*10);（单位） * 那么任意设计稿尺寸 L 转化为相应的尺寸就为：L/x = (L*rem*10)/w; * 由于rem设置给根元素了，那么所有的尺寸均可以用rem单位来操作; * xrem = (L*rem*10)/w*fontsize = (L*10)/w; * 那么在设计稿中量取 L长度的，在编辑器中就为(L*10/w) rem; * 如此便完成了rem的自动适配 */ 换成rem公式100*100 div 在320的设计稿 100/320*10 = 3.125 rem","content":"<blockquote>\n<p>flexible.js 手淘出的一款处理移动端响应式的js工具</p>\n</blockquote>\n<h3 id=\"下载地址\"><a href=\"#下载地址\" class=\"headerlink\" title=\"下载地址\"></a>下载地址</h3><p><a href=\"https://github.com/amfe/lib-flexible\" target=\"_blank\" rel=\"noopener\">https://github.com/amfe/lib-flexible</a> github<br><a href=\"https://github.com/amfe/article/issues/17\" target=\"_blank\" rel=\"noopener\">https://github.com/amfe/article/issues/17</a> 作者详解</p>\n<h3 id=\"概略\"><a href=\"#概略\" class=\"headerlink\" title=\"概略\"></a>概略</h3><p>框架整体模仿jquery,为一个立即执行函数，并对外暴露lib对象，提供rem =&gt; px，和px =&gt; rem的转化方法。当在调整窗口尺寸的时候可以重置document.documentElement的fontSize的大小。</p>\n<a id=\"more\"></a>\n<h3 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h3><p>通过设置meta标签的content中 initial-scale,maximum-scale,minimum-scale,的值，其值根据屏幕像素比控制，在dpr越大，屏幕渲染的画布越大。</p>\n<h3 id=\"框架步骤\"><a href=\"#框架步骤\" class=\"headerlink\" title=\"框架步骤\"></a>框架步骤</h3><p>1、判断是否存在meta[name=”viewport”];<br>2、存在直接设置，不存在自动生成，推荐不使用;<br>3、通过window.devicePixelRatio获取屏幕的屏幕像素比;<br>4、根据屏幕的尺寸，通过document.documentElement.getBoundingClientRect().width获取屏幕宽度;<br>5、设置document.documentElement.style.fontSize值; 6、设置document.body.style.fontSize ;<br>7、提供一些方法;</p>\n<h3 id=\"重要方法解读\"><a href=\"#重要方法解读\" class=\"headerlink\" title=\"重要方法解读\"></a>重要方法解读</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义页面元素的fontsize，方便rem的配置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refreshRem</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width = docEl.getBoundingClientRect().width;</span><br><span class=\"line\">    <span class=\"comment\">//屏幕信息，屏幕宽度，bound：绑定；rect：矩形</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (width / dpr &gt; <span class=\"number\">640</span>) &#123;</span><br><span class=\"line\">        width = <span class=\"number\">640</span> * dpr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rem = width / <span class=\"number\">10</span>;</span><br><span class=\"line\">    docEl.style.fontSize = rem + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">    flexible.rem = win.rem = rem;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于设计稿为320px的，根元素fontsize = 32px;</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于设计稿为1080px的，根元素fontsize = 108px;</span></span><br><span class=\"line\"><span class=\"comment\"> * 设屏幕的宽度为w(rem*10),设计稿尺寸为w,那么有比例关系w:rem*10 = x:1 ;</span></span><br><span class=\"line\"><span class=\"comment\"> * ==&gt; x= w/(rem*10);（单位）</span></span><br><span class=\"line\"><span class=\"comment\"> * 那么任意设计稿尺寸 L 转化为相应的尺寸就为：L/x = (L*rem*10)/w;</span></span><br><span class=\"line\"><span class=\"comment\"> * 由于rem设置给根元素了，那么所有的尺寸均可以用rem单位来操作;</span></span><br><span class=\"line\"><span class=\"comment\"> * xrem = (L*rem*10)/w*fontsize = (L*10)/w;</span></span><br><span class=\"line\"><span class=\"comment\"> * 那么在设计稿中量取 L长度的，在编辑器中就为(L*10/w) rem;</span></span><br><span class=\"line\"><span class=\"comment\"> * 如此便完成了rem的自动适配</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"换成rem公式\"><a href=\"#换成rem公式\" class=\"headerlink\" title=\"换成rem公式\"></a>换成rem公式</h3><p>100*100 div 在320的设计稿</p>\n<p>100/320*10 = 3.125 rem</p>\n","excerpt":"flexible.js 手淘出的一款处理移动端响应式的js工具 下载地址https://github.com/amfe/lib-flexible githubhttps://github.com/amfe/article/issues/17 作者详解 概略框架整体模仿jquery,为一个立即执行函数，并对外暴露lib对象，提供rem =&gt; px，和px =&gt; rem的转化方法。当在调整窗口尺寸的时候可以重置document.documentElement的fontSize的大小。","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"},{"name":"css","slug":"css","permalink":"http://www.ding1996.cn/tags/css/"}]},{"title":"CSS3 3D笔记","date":"2017-10-30T06:31:20.000Z","path":"2017/10/30/it-css-3d-basic/","text":"http://www.zhangxinxu.com/wordpress/2012/09/css3-3d-transform-perspective-animate-transition/ 了解更多请查看这篇文章 首先了解下在css中3d中比2D多了一个Z轴 Z轴在css3中的属性是 transform: translateZ(100px); 如何做个3D的正方体 首先需要舞台和元素 舞台就是父元素 需要添加3D属性 transform-style: preserve-3d; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt; css高级正方体 &lt;/title&gt;&lt;/meta&gt;&lt;/head&gt;&lt;style&gt;.container&#123; width: 200px; height: 200px; border:1px solid red; margin: 200px auto; position: relative; /*perspective: 600px;*/ transform-style: preserve-3d; animation: haha 10s;&#125;.container div&#123; width: 200px; height: 200px; opacity: .8; position: absolute; color: #fff; line-height: 200px; text-align: center; font-size: 64px;&#125;.container div:nth-child(1)&#123; transform: translateZ(100px); background: green;&#125;.container div:nth-child(2)&#123; transform: rotateX(90deg) translateZ(-100px); background: yellow;&#125;.container div:nth-child(3)&#123; transform: rotateX(90deg) translateZ(100px); background: blue;&#125;.container div:nth-child(4)&#123; transform: rotateY(90deg) translateZ(100px); rotateY(90deg) translateZ(100px) background: red;&#125;.container div:nth-child(5)&#123; transform: rotateY(90deg) translateZ(-100px); background: black;&#125;.container div:nth-child(6)&#123; background: orange; transform: translateZ(-100px) rotateY(180deg);&#125;@keyframes haha&#123; 10% &#123; transform: rotateY(0deg) rotateX(0deg); &#125; 50%&#123; transform: rotateY(360deg) rotateX(0deg); &#125; 100%&#123; transform: rotateY(360deg) rotateX(360deg); &#125; &#125;&lt;/style&gt;&lt;body&gt; &lt;div class=\"container\"&gt; &lt;div&gt;1&lt;/div&gt; &lt;div&gt;2&lt;/div&gt; &lt;div&gt;3&lt;/div&gt; &lt;div&gt;4&lt;/div&gt; &lt;div&gt;5&lt;/div&gt; &lt;div&gt;6&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/215275-c07f7f3effbc8810.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><a href=\"http://www.zhangxinxu.com/wordpress/2012/09/css3-3d-transform-perspective-animate-transition/\" target=\"_blank\" rel=\"noopener\">http://www.zhangxinxu.com/wordpress/2012/09/css3-3d-transform-perspective-animate-transition/</a> 了解更多请查看这篇文章</p>\n<p>首先了解下在css中3d中比2D多了一个Z轴</p>\n<p>Z轴在css3中的属性是 transform: translateZ(100px);</p>\n<p>如何做个3D的正方体 </p>\n<p>首先需要舞台和元素 </p>\n<p>舞台就是父元素 需要添加3D属性 transform-style: preserve-3d;</p>\n<a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\tcss高级正方体</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">meta</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\twidth: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">\theight: 200px;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-tag\">border</span><span class=\"selector-pseudo\">:1px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">red</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\tmargin: 200px  auto;</span></span><br><span class=\"line\"><span class=\"undefined\">\tposition: relative;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"comment\">/*perspective: 600px;*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">\ttransform-style: preserve-3d;</span></span><br><span class=\"line\"><span class=\"undefined\">\tanimation: haha 10s;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\twidth: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">\theight: 200px;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-tag\">opacity</span>: <span class=\"selector-class\">.8</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\tposition: absolute;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\tline-height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">\ttext-align: center;</span></span><br><span class=\"line\"><span class=\"undefined\">\tfont-size: 64px;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:nth-child(1)</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\ttransform: translateZ(100px);</span></span><br><span class=\"line\"><span class=\"undefined\">\tbackground: green;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\ttransform: rotateX(90deg) translateZ(-100px);</span></span><br><span class=\"line\"><span class=\"undefined\">\tbackground: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:nth-child(3)</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\ttransform: rotateX(90deg) translateZ(100px);</span></span><br><span class=\"line\"><span class=\"undefined\">\tbackground: blue;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:nth-child(4)</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\ttransform: rotateY(90deg) translateZ(100px);</span></span><br><span class=\"line\"><span class=\"undefined\">\trotateY(90deg) translateZ(100px)</span></span><br><span class=\"line\"><span class=\"undefined\">\tbackground: red;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:nth-child(5)</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\ttransform: rotateY(90deg) translateZ(-100px);</span></span><br><span class=\"line\"><span class=\"undefined\">\tbackground: black;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:nth-child(6)</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\tbackground: orange;</span></span><br><span class=\"line\"><span class=\"undefined\">\ttransform: translateZ(-100px) rotateY(180deg);</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">@<span class=\"keyword\">keyframes</span> haha</span></span><br><span class=\"line\"><span class=\"undefined\">&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t10% &#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">\t\ttransform: rotateY(0deg)  rotateX(0deg);</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t50%&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\ttransform: rotateY(360deg) rotateX(0deg);</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t100%&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\ttransform: rotateY(360deg) rotateX(360deg);</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","excerpt":"http://www.zhangxinxu.com/wordpress/2012/09/css3-3d-transform-perspective-animate-transition/ 了解更多请查看这篇文章 首先了解下在css中3d中比2D多了一个Z轴 Z轴在css3中的属性是 transform: translateZ(100px); 如何做个3D的正方体 首先需要舞台和元素 舞台就是父元素 需要添加3D属性 transform-style: preserve-3d;","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://www.ding1996.cn/tags/css/"}]},{"title":"react-router4.x 常用api","date":"2017-10-16T06:31:20.000Z","path":"2017/10/16/it-js-react-router4/","text":"路由容器组件 BrowserRouter: 浏览器自带的API，restful风格（需要后台做相应的调整）； HashRouter: 使用hash方式进行路由； MemoryRouter: 在内存中管理history，地址栏不会变化。在reactNative中使用。 Route标签 该标签有三种渲染方式component、render、children（绝大多数情况使用component组件就好了）； 三种渲染方式都会得到三个属性match、history、location； 渲染组件时，route props跟着一起渲染； children方式渲染会不管地址栏是否匹配都渲染一些内容，在这里加动画一时很常见的做法。 Link标签 to: 后面可以接字符串，也可以跟对象（对象可以是动态地添加搜索的信息）； replace: 当设置为true时，点击链接后将使用新地址替换掉访问历史记录里面的原地址。 NavLink标签 是的一个特定版本, 会在匹配上当前URL的时候会给已经渲染的元素添加样式参数； activeClassName，当地址匹配时添加相应class； activeStyle，当地址匹配时添加相应style； exact，当地址完全匹配时，才生效； isActive，添加额外逻辑判断是否生效。 Prompt标签 when: when的属性值为true时启用防止转换； message: 后面可以跟简单的提示语，也可以跟函数，函数是有默认参数的。 Redirect标签 可以写在的render属性里面，也可以跟平级； to: 依旧是可以跟字符串或对象； push: 添加该属性时，地址不会被覆盖，而是添加一条新纪录； from: 重定向，与平级时。 match params: 通过解析URL中动态的部分获得的键值对； isExact: 当为true时，整个URL都需要匹配； path: 在需要嵌套的时候用到； url: 在需要嵌套的时候会用到； 获取方式: 以this.props.match方式。 12345678import &#123; BrowserRouter as Router, // 或者是HashRouter、MemoryRouter Route, // 这是基本的路由块 Link, // 这是a标签 Switch // 这是监听空路由的 Redirect // 这是重定向 Prompt // 防止转换 &#125; from 'react-router-dom' 转载地址 https://yesixuan.github.io/2017/06/19/JS-reactRouter4/","content":"<p><strong>路由容器组件</strong></p>\n<ul>\n<li>BrowserRouter: 浏览器自带的API，restful风格（需要后台做相应的调整）；</li>\n<li>HashRouter: 使用hash方式进行路由；</li>\n<li>MemoryRouter: 在内存中管理history，地址栏不会变化。在reactNative中使用。</li>\n</ul>\n<a id=\"more\"></a>\n<p><strong>Route标签</strong></p>\n<ul>\n<li>该标签有三种渲染方式component、render、children（绝大多数情况使用component组件就好了）；</li>\n<li>三种渲染方式都会得到三个属性match、history、location；</li>\n<li>渲染组件时，route props跟着一起渲染；</li>\n<li>children方式渲染会不管地址栏是否匹配都渲染一些内容，在这里加动画一时很常见的做法。</li>\n</ul>\n<p><strong>Link标签</strong></p>\n<ul>\n<li>to: 后面可以接字符串，也可以跟对象（对象可以是动态地添加搜索的信息）；</li>\n<li>replace: 当设置为true时，点击链接后将使用新地址替换掉访问历史记录里面的原地址。</li>\n</ul>\n<p><strong>NavLink标签</strong></p>\n<ul>\n<li>是的一个特定版本, 会在匹配上当前URL的时候会给已经渲染的元素添加样式参数；</li>\n<li>activeClassName，当地址匹配时添加相应class；</li>\n<li>activeStyle，当地址匹配时添加相应style；</li>\n<li>exact，当地址完全匹配时，才生效；</li>\n<li>isActive，添加额外逻辑判断是否生效。</li>\n</ul>\n<p><strong>Prompt标签</strong></p>\n<ul>\n<li>when: when的属性值为true时启用防止转换；</li>\n<li>message: 后面可以跟简单的提示语，也可以跟函数，函数是有默认参数的。</li>\n</ul>\n<p><strong>Redirect标签</strong></p>\n<ul>\n<li>可以写在的render属性里面，也可以跟平级；</li>\n<li>to: 依旧是可以跟字符串或对象；</li>\n<li>push: 添加该属性时，地址不会被覆盖，而是添加一条新纪录；</li>\n<li>from: 重定向，与平级时。</li>\n</ul>\n<p><strong>match</strong></p>\n<ul>\n<li>params: 通过解析URL中动态的部分获得的键值对；</li>\n<li>isExact: 当为true时，整个URL都需要匹配；</li>\n<li>path: 在需要嵌套的时候用到；</li>\n<li>url: 在需要嵌套的时候会用到；</li>\n<li>获取方式: 以this.props.match方式。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  BrowserRouter <span class=\"keyword\">as</span> Router, <span class=\"comment\">// 或者是HashRouter、MemoryRouter</span></span><br><span class=\"line\">  Route,   <span class=\"comment\">// 这是基本的路由块</span></span><br><span class=\"line\">  Link,    <span class=\"comment\">// 这是a标签</span></span><br><span class=\"line\">  Switch   <span class=\"comment\">// 这是监听空路由的</span></span><br><span class=\"line\">  Redirect <span class=\"comment\">// 这是重定向</span></span><br><span class=\"line\">  Prompt   <span class=\"comment\">// 防止转换  </span></span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span></span><br></pre></td></tr></table></figure>\n<p> 转载地址 <a href=\"https://yesixuan.github.io/2017/06/19/JS-reactRouter4/\" target=\"_blank\" rel=\"noopener\">https://yesixuan.github.io/2017/06/19/JS-reactRouter4/</a></p>\n","excerpt":"路由容器组件 BrowserRouter: 浏览器自带的API，restful风格（需要后台做相应的调整）； HashRouter: 使用hash方式进行路由； MemoryRouter: 在内存中管理history，地址栏不会变化。在reactNative中使用。","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://www.ding1996.cn/tags/react/"}]},{"title":"redux学习笔记","date":"2017-10-16T06:31:20.000Z","path":"2017/10/16/it-js-redux/","text":"react-redux学习demo https://github.com/BestDingSheng/react-redux-demo redux 学习资料可以参考阮一峰老师的 http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html","content":"<p>react-redux学习demo  <a href=\"https://github.com/BestDingSheng/react-redux-demo\" target=\"_blank\" rel=\"noopener\">https://github.com/BestDingSheng/react-redux-demo</a></p>\n<p>redux 学习资料可以参考阮一峰老师的</p>\n<p> <a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html</a></p>\n","excerpt":"","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://www.ding1996.cn/tags/react/"}]},{"title":"React系列学习教程","date":"2017-10-11T06:31:20.000Z","path":"2017/10/11/it-js-react/","text":"最近在开始学习React 看到好的 github 和 学习资料会放在这里 https://segmentfault.com/blog/zhangyatao?page=2 https://github.com/mqyqingfeng/Blog github https://github.com/jasonslyvia github https://github.com/kenberkeley github","content":"<blockquote>\n<p>最近在开始学习React 看到好的 github 和 学习资料会放在这里</p>\n</blockquote>\n<p><a href=\"https://segmentfault.com/blog/zhangyatao?page=2\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/blog/zhangyatao?page=2</a></p>\n<p><a href=\"https://github.com/mqyqingfeng/Blog\" target=\"_blank\" rel=\"noopener\">https://github.com/mqyqingfeng/Blog</a>  github</p>\n<p><a href=\"https://github.com/jasonslyvia\" target=\"_blank\" rel=\"noopener\">https://github.com/jasonslyvia</a> github</p>\n<p><a href=\"https://github.com/kenberkeley\" target=\"_blank\" rel=\"noopener\">https://github.com/kenberkeley</a> github</p>\n","excerpt":"","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://www.ding1996.cn/tags/react/"}]},{"title":"js作用域和原型链","date":"2017-10-10T06:31:20.000Z","path":"2017/10/10/it-js-lilun/","text":"什么是作用域链，什么是原型链，它们的区别，在js中它们具体指什么？作用域是针对变量的，比如我们创建了一个函数，函数里面又包含了一个函数，那么现在就有三个作用域 全局作用域= =&gt; 函数1作用域= =&gt; 函数2作用域作用域的特点就是，先在自己的变量范围中查找，如果找不到，就会沿着作用域往上找。如： 12345678910var a = 1;function b()&#123; var a = 2; function c()&#123; var a = 3; console.log(a); &#125; c();&#125;b(); 最后打印出来的是3，因为执行函数c（）的时候它在自己的范围内找到了变量a所以就不会越上继续查找，如果在函数c()中没有找到则会继续向上找，一直会找到全局变量a，这个查找的过程就叫作用域链。 不知道你有没有疑问，函数c为什么可以在函数b中查找变量a，因为函数c是在函数b中创建的，也就是说函数c的作用域包括了函数b的作用域，当然也包括了全局作用域，但是函数b不能向函数c中查找变量，因为作用域只会向上查找。 那么什么是原型链呢？ 原型链是针对构造函数的，比如我先创建了一个函数，然后通过一个变量new了这个函数，那么这个被new出来的函数就会继承创建出来的那个函数的属性，然后如果我访问new出来的这个函数的某个属性，但是我并没有在这个new出来的函数中定义这个变量，那么它就会往上（向创建出它的函数中）查找，这个查找的过程就叫做原型链。 Object = =&gt; 构造函数1 = =&gt; 构造函数2 就和css中的继承一样，如果自身没有定义就会继承父元素的样式。 1234function a()&#123;&#125;;a.prototype.name = \"追梦子\";var b = new a();console.log(b.name); //追梦子 转载原文 http://www.cnblogs.com/pssp/p/6978617.html#1","content":"<p><strong>什么是作用域链，什么是原型链，它们的区别，在js中它们具体指什么？</strong><br>作用域是针对变量的，比如我们创建了一个函数，函数里面又包含了一个函数，那么现在就有三个作用域</p>\n<p>全局作用域= =&gt; 函数1作用域= =&gt; 函数2作用域<br>作用域的特点就是，先在自己的变量范围中查找，如果找不到，就会沿着作用域往上找。<br>如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    c();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b();</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>最后打印出来的是3，因为执行函数c（）的时候它在自己的范围内找到了变量a所以就不会越上继续查找，如果在函数c()中没有找到则会继续向上找，一直会找到全局变量a，这个查找的过程就叫作用域链。</p>\n<p>不知道你有没有疑问，函数c为什么可以在函数b中查找变量a，因为函数c是在函数b中创建的，也就是说函数c的作用域包括了函数b的作用域，当然也包括了全局作用域，但是函数b不能向函数c中查找变量，因为作用域只会向上查找。</p>\n<p><strong>那么什么是原型链呢？</strong></p>\n<p>原型链是针对构造函数的，比如我先创建了一个函数，然后通过一个变量new了这个函数，那么这个被new出来的函数就会继承创建出来的那个函数的属性，然后如果我访问new出来的这个函数的某个属性，但是我并没有在这个new出来的函数中定义这个变量，那么它就会往上（向创建出它的函数中）查找，这个查找的过程就叫做原型链。</p>\n<p>Object = =&gt; 构造函数1 = =&gt; 构造函数2</p>\n<p>就和css中的继承一样，如果自身没有定义就会继承父元素的样式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">a.prototype.name = <span class=\"string\">\"追梦子\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> a();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.name); <span class=\"comment\">//追梦子</span></span><br></pre></td></tr></table></figure>\n<p>转载原文 <a href=\"http://www.cnblogs.com/pssp/p/6978617.html#1\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/pssp/p/6978617.html#1</a></p>\n","excerpt":"什么是作用域链，什么是原型链，它们的区别，在js中它们具体指什么？作用域是针对变量的，比如我们创建了一个函数，函数里面又包含了一个函数，那么现在就有三个作用域 全局作用域= =&gt; 函数1作用域= =&gt; 函数2作用域作用域的特点就是，先在自己的变量范围中查找，如果找不到，就会沿着作用域往上找。如： 12345678910var a = 1;function b()&#123; var a = 2; function c()&#123; var a = 3; console.log(a); &#125; c();&#125;b();","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"Koa2 简单上手体验","date":"2017-09-20T06:31:20.000Z","path":"2017/09/20/it-koa2-01/","text":"Koa2 是由 Express 团队打造的下一代 Node.js Web 框架，基于 ES7 的 async/await 实现。由于 Node.js v7.6.0 开始完全支持 async/await，所以需要 Node.js 版本在 7.6.0 以上才能正常使用 Koa2。 Koa2 只封装了 context、request、response 以及最核心的中间件处理流程，所以很多功能，比如路由等都需要自行编写或从 npm 安装中间件来实现。本文仅对 Koa2 做一个简单的体验，使用一些常用的中间件，使用 yarn 作为包管理工具。 Hello World 首先安装 Koa2： 1234# 初始化 package.jsonyarn init# 安装 Koa2yarn add koa 按照惯例，先来个 Hello World，新建一个 app.js 文件： 123456const Koa = require('koa');const app = new Koa();app.use(ctx =&gt; &#123; ctx.body = 'Hello World';&#125;);app.listen(3000); 启动上面的 Hello World： 1node app.js 浏览器访问 localhost:3000 就可以看到 Hello World 了！ 路由 Koa2 本身并没有封装路由，但是可以通过判断 ctx.request.url 来定制所需的路由。但是这样做比较繁琐，本文就不做赘述，我们直接使用路由中间件 koa-router 。 首先安装 koa-router： 1yarn add koa-router@next 然后在上文的基础上修改 app.js 文件 12345678910111213const Koa = require('koa');const Router = require('koa-router');const app = new Koa();const router = new Router();router .get('/', ctx =&gt; &#123; ctx.body = 'Home Page' &#125;) .get('/user', ctx =&gt; &#123; ctx.body = 'User Page' &#125;)app.use(router.routes()).use(router.allowedMethods());app.listen(3000); 用浏览器分别访问 localhost:3000 和 localhost:3000/user 就可以看到效果了！ 除了 GET 方法外，koa-router 支持 POST、PUT 等多种 HTTP 方法，本文不再详细讲述，更多用法请参考 koa-router 文档。 获取 GET 请求数据 获取 GET 请求数据是通过 request 对象中的 query 方法或 querystring 方法，query 方法返回格式化的参数对象，querystring 返回的是请求字符串，例如下面的路由： 1234router.get('/query', ctx =&gt; &#123; console.log(ctx.query); console.log(ctx.querystring);&#125;) 访问 localhost:3000/query?a=1&amp;b=2，ctx.query 的值为 { a: ‘1’, b: ‘2’ }，ctx.querystring 的值为 a=1&amp;b=2。 获取 POST 请求数据 Koa2 中没有封装获取 POST 请求中参数的方法，需要解析 ctx.req 对象获取数据，ctx.req 为原生 Node.js 请求对象。本文不对其进行详细解析，我们直接使用 koa-bodyparser 中间件将数据解析到 ctx.request.body 中。首先安装 koa-bodyparser 中间件： 1yarn add koa-bodyparser 然后在 app.js 中使用该中间件： 12const bodyParser = require('koa-bodyparser');app.use(bodyParser()); 然后再添加一个 POST 请求的路由： 123router.post('/query', ctx =&gt; &#123; ctx.body = ctx.request.body&#125;) 使用 Postman 提交一个带参数的 POST 请求，就可以看到效果了！ 模板引擎 在 Koa2 中使用模板引擎，首先要安装 koa-views 中间件，该中间件支持 ejs、jade、pug、swig、react 等大多数模板引擎，然后再安装你想要使用模板引擎，本文以 ejs 为例： 1yarn add koa-views ejs 在 app.js 中引入中间件并配置模板引擎： 12345const views = require('koa-views');// 配置模板文件目录和后缀名app.use(views(__dirname + '/views', &#123; extension: 'ejs'&#125;)) 新建模板文件 views/index.ejs： 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt; &lt;p&gt;Welcome to Koa2&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 然后添加一个路由： 1234router.get('/ejs', async (ctx) =&gt; &#123; let title = 'Hello Koa2' await ctx.render('index', &#123; title &#125;)&#125;) 使用浏览器访问 localhost:3000/ejs 就可以看到效果了！ Cookie Koa2 提供了从上下文中直接读取和写入 cookie 的方法 ctx.cookies.get(name, [options]) 和 ctx.cookies.set(name, value, [options])。 由于 Koa2 的 cookies 操作是使用的 cookies 模块，所以参数和用法都与其一致。 https://pengtikui.cn/koa2-get-started/","content":"<blockquote>\n<p>Koa2 是由 Express 团队打造的下一代 Node.js Web 框架，基于 ES7 的 async/await 实现。由于 Node.js v7.6.0 开始完全支持 async/await，所以需要 Node.js 版本在 7.6.0 以上才能正常使用 Koa2。</p>\n</blockquote>\n<blockquote>\n<p>Koa2 只封装了 context、request、response 以及最核心的中间件处理流程，所以很多功能，比如路由等都需要自行编写或从 npm 安装中间件来实现。本文仅对 Koa2 做一个简单的体验，使用一些常用的中间件，使用 yarn 作为包管理工具。</p>\n</blockquote>\n<p><strong>Hello World</strong></p>\n<p>首先安装 Koa2：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 初始化 package.json</span></span><br><span class=\"line\">yarn init</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装 Koa2</span></span><br><span class=\"line\">yarn add koa</span><br></pre></td></tr></table></figure>\n<p>按照惯例，先来个 Hello World，新建一个 app.js 文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"params\">ctx</span> =&gt;</span> &#123;</span><br><span class=\"line\">  ctx.body = <span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>启动上面的 Hello World：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">node</span> <span class=\"title\">app</span>.js</span><br></pre></td></tr></table></figure>\n<p>浏览器访问 localhost:3000 就可以看到 Hello World 了！</p>\n<p><strong>路由</strong></p>\n<p>Koa2 本身并没有封装路由，但是可以通过判断 ctx.request.url 来定制所需的路由。但是这样做比较繁琐，本文就不做赘述，我们直接使用路由中间件 koa-router 。</p>\n<p>首先安装 koa-router：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn <span class=\"keyword\">add</span><span class=\"bash\"> koa-router@next</span></span><br></pre></td></tr></table></figure>\n<p>然后在上文的基础上修改 app.js 文件</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"keyword\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"keyword\">require</span>(<span class=\"string\">'koa-router'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\">router</span><br><span class=\"line\">  .get(<span class=\"string\">'/'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = <span class=\"string\">'Home Page'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .get(<span class=\"string\">'/user'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = <span class=\"string\">'User Page'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">app.<span class=\"keyword\">use</span>(router.routes()).<span class=\"keyword\">use</span>(router.allowedMethods());</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>用浏览器分别访问 localhost:3000 和 localhost:3000/user 就可以看到效果了！</p>\n<p>除了 GET 方法外，koa-router 支持 POST、PUT 等多种 HTTP 方法，本文不再详细讲述，更多用法请参考 koa-router 文档。</p>\n<p><strong>获取 GET 请求数据</strong></p>\n<p>获取 GET 请求数据是通过 request 对象中的 query 方法或 querystring 方法，query 方法返回格式化的参数对象，querystring 返回的是请求字符串，例如下面的路由：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.<span class=\"built_in\">get</span>('/<span class=\"keyword\">query</span>', ctx =&gt; &#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(ctx.<span class=\"keyword\">query</span>);</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(ctx.querystring);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>访问 localhost:3000/query?a=1&amp;b=2，ctx.query 的值为 { a: ‘1’, b: ‘2’ }，ctx.querystring 的值为 a=1&amp;b=2。</p>\n<p><strong>获取 POST 请求数据</strong></p>\n<p>Koa2 中没有封装获取 POST 请求中参数的方法，需要解析 ctx.req 对象获取数据，ctx.req 为原生 Node.js 请求对象。本文不对其进行详细解析，我们直接使用 koa-bodyparser 中间件将数据解析到 ctx.request.body 中。首先安装 koa-bodyparser 中间件：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn <span class=\"keyword\">add</span><span class=\"bash\"> koa-bodyparser</span></span><br></pre></td></tr></table></figure>\n<p>然后在 app.js 中使用该中间件：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"keyword\">require</span>(<span class=\"string\">'koa-bodyparser'</span>);</span><br><span class=\"line\">app.<span class=\"keyword\">use</span>(bodyParser());</span><br></pre></td></tr></table></figure>\n<p>然后再添加一个 POST 请求的路由：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/query'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">  ctx<span class=\"selector-class\">.body</span> = ctx<span class=\"selector-class\">.request</span><span class=\"selector-class\">.body</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>使用 Postman 提交一个带参数的 POST 请求，就可以看到效果了！</p>\n<p><strong>模板引擎</strong></p>\n<p>在 Koa2 中使用模板引擎，首先要安装 koa-views 中间件，该中间件支持 ejs、jade、pug、swig、react 等大多数模板引擎，然后再安装你想要使用模板引擎，本文以 ejs 为例：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn <span class=\"keyword\">add</span><span class=\"bash\"> koa-views ejs</span></span><br></pre></td></tr></table></figure>\n<p>在 app.js 中引入中间件并配置模板引擎：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> views = <span class=\"keyword\">require</span>(<span class=\"string\">'koa-views'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 配置模板文件目录和后缀名</span></span><br><span class=\"line\">app.<span class=\"keyword\">use</span>(views(__dirname + <span class=\"string\">'/views'</span>, &#123;</span><br><span class=\"line\">  extension: <span class=\"string\">'ejs'</span></span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n<p>新建模板文件 views/index.ejs：</p>\n<figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span></span></span><span class=\"ruby\"> title </span><span class=\"xml\"><span class=\"tag\">%&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span></span></span><span class=\"ruby\"> title </span><span class=\"xml\"><span class=\"tag\">%&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Welcome to Koa2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>然后添加一个路由：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.<span class=\"keyword\">get</span>(<span class=\"string\">'/ejs'</span>, <span class=\"keyword\">async</span> (ctx) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> title = <span class=\"string\">'Hello Koa2'</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'index'</span>, &#123; title &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>使用浏览器访问 localhost:3000/ejs 就可以看到效果了！</p>\n<p><strong>Cookie</strong></p>\n<p>Koa2 提供了从上下文中直接读取和写入 cookie 的方法 ctx.cookies.get(name, [options]) 和 ctx.cookies.set(name, value, [options])。</p>\n<p>由于 Koa2 的 cookies 操作是使用的 cookies 模块，所以参数和用法都与其一致。</p>\n<p><a href=\"https://pengtikui.cn/koa2-get-started/\" target=\"_blank\" rel=\"noopener\">https://pengtikui.cn/koa2-get-started/</a></p>\n","excerpt":"Koa2 是由 Express 团队打造的下一代 Node.js Web 框架，基于 ES7 的 async/await 实现。由于 Node.js v7.6.0 开始完全支持 async/await，所以需要 Node.js 版本在 7.6.0 以上才能正常使用 Koa2。 Koa2 只封装了 context、request、response 以及最核心的中间件处理流程，所以很多功能，比如路由等都需要自行编写或从 npm 安装中间件来实现。本文仅对 Koa2 做一个简单的体验，使用一些常用的中间件，使用 yarn 作为包管理工具。 Hello World 首先安装 Koa2： 1234# 初始化 package.jsonyarn init# 安装 Koa2yarn add koa 按照惯例，先来个 Hello World，新建一个 app.js 文件： 123456const Koa = require('koa');const app = new Koa();app.use(ctx =&gt; &#123; ctx.body = 'Hello World';&#125;);app.listen(3000);","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"},{"name":"后台","slug":"后台","permalink":"http://www.ding1996.cn/tags/后台/"}]},{"title":"git常用命令","date":"2017-09-19T06:31:20.000Z","path":"2017/09/19/it-git-img/","text":"","content":"<p><img src=\"https://user-gold-cdn.xitu.io/2017/9/16/67c2e89eabbf80ebcef2c50926848205?imageView2/0/w/1280/h/960\" alt=\"\"></p>\n","excerpt":"","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://www.ding1996.cn/tags/git/"}]},{"title":"CentOS 7 用 yum 安装 Mysql","date":"2017-09-16T06:20:18.000Z","path":"2017/09/16/it-linux-install-mysql/","text":"Step1: 检测系统是否自带安装mysql 1# yum list installed | grep mysql Step2: 删除系统自带的mysql及其依赖命令： 1# yum -y remove mysql-libs.x86_64 Step3: 给CentOS添加rpm源，并且选择较新的源命令： 1234567# wget dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm# yum localinstall mysql-community-release-el6-5.noarch.rpm# yum repolist all | grep mysql# yum-config-manager --disable mysql55-community# yum-config-manager --disable mysql56-community# yum-config-manager --enable mysql57-community-dmr# yum repolist enabled | grep mysql Step4:安装mysql 服务器命令： 1# yum install mysql-community-server Step5: 启动mysql命令: 1# service mysqld start Step6: 查看mysql是否自启动,并且设置开启自启动命令: 12# chkconfig --list | grep mysqld# chkconfig mysqld on Step7: mysql安全设置命令： 1# mysql_secure_installation 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<p>Step1: 检测系统是否自带安装mysql</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum list installed | grep mysql</span></span><br></pre></td></tr></table></figure>\n<p>Step2: 删除系统自带的mysql及其依赖<br>命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y remove mysql-libs.x86_64</span></span><br></pre></td></tr></table></figure>\n<p>Step3: 给CentOS添加rpm源，并且选择较新的源<br>命令：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum localinstall mysql-community-release-el6-5.noarch.rpm</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum repolist all | grep mysql</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum-config-manager --<span class=\"built_in\">disable</span> mysql55-community</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum-config-manager --<span class=\"built_in\">disable</span> mysql56-community</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum-config-manager --<span class=\"built_in\">enable</span> mysql57-community-dmr</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum repolist enabled | grep mysql</span></span><br></pre></td></tr></table></figure>\n<p>Step4:安装mysql 服务器<br>命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum install mysql-community-server</span></span><br></pre></td></tr></table></figure>\n<p>Step5: 启动mysql<br>命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> service mysqld start</span></span><br></pre></td></tr></table></figure>\n<p>Step6: 查看mysql是否自启动,并且设置开启自启动<br>命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> chkconfig --list | grep mysqld</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> chkconfig mysqld on</span></span><br></pre></td></tr></table></figure>\n<p>Step7: mysql安全设置<br>命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mysql_secure_installation</span></span><br></pre></td></tr></table></figure>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n","excerpt":"Step1: 检测系统是否自带安装mysql 1# yum list installed | grep mysql Step2: 删除系统自带的mysql及其依赖命令： 1# yum -y remove mysql-libs.x86_64 Step3: 给CentOS添加rpm源，并且选择较新的源命令：","categories":[],"tags":[{"name":"后台","slug":"后台","permalink":"http://www.ding1996.cn/tags/后台/"},{"name":"linux","slug":"linux","permalink":"http://www.ding1996.cn/tags/linux/"}]},{"title":"CentOS 7 用 yum 安装 Nginx","date":"2017-09-15T06:20:18.000Z","path":"2017/09/15/it-linux-install-ngix/","text":"在 CentOS 7 中，直接使用 yum 安装 Nignx 会提示无下载源。因此，需要添加 Nginx 的下载源到 yum： 1sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm 指定了下载源后，就可以使用 yum 命令来安装 Nginx 了： 1sudo yum install -y nginx 安装完成的 Nginx 并不会立刻启动，需要我们手动执行命令来开启它: 1sudo systemctl start nginx.service 还可以输入以下命令，让 Nginx 可以随系统自动启动： 1sudo systemctl enable nginx 接下来打开浏览器，访问本地地址 http://localhost 就可以看到 Nginx 的欢迎页面了~ 也可以在服务器上输入下面的命令，来查看 Nginx 所在服务器的公共IP地址，然后在客户端浏览器上输入 IP 也是可以访问的: 1ip addr 相关补充： 12345678# 开启 Nginxservice nginx start# 停止 Nginxservice nginx stop# 重启 Nginxservice nginx restart# 查看 Nginx 状态service nginx status Nginx 的默认站点根目录为 1/usr/share/nginx/html/ 默认站点配置在 1/etc/nginx/conf.d/default.conf Nginx 主配置如下 1/etc/nginx/nginx.conf 在这个配置文件里，会用到include指令，其它地方的配置文件会包含到这个主要的配置文件里，用这种方法可以让配置文件更有条理，也更容易维护。 原文地址 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<p>在 CentOS 7 中，直接使用 yum 安装 Nignx 会提示无下载源。因此，需要添加 Nginx 的下载源到 yum：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rpm -Uvh http:<span class=\"regexp\">//</span>nginx.org<span class=\"regexp\">/packages/</span>centos<span class=\"regexp\">/7/</span>noarch<span class=\"regexp\">/RPMS/</span>nginx-release-centos-<span class=\"number\">7</span>-<span class=\"number\">0</span>.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p>指定了下载源后，就可以使用 yum 命令来安装 Nginx 了：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum <span class=\"keyword\">install</span> -y nginx</span><br></pre></td></tr></table></figure>\n<p>安装完成的 Nginx 并不会立刻启动，需要我们手动执行命令来开启它:</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"literal\">start</span> nginx.service</span><br></pre></td></tr></table></figure>\n<p>还可以输入以下命令，让 Nginx 可以随系统自动启动：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"builtin-name\">enable</span> nginx</span><br></pre></td></tr></table></figure>\n<p>接下来打开浏览器，访问本地地址 <a href=\"http://localhost\" target=\"_blank\" rel=\"noopener\">http://localhost</a> 就可以看到 Nginx 的欢迎页面了~</p>\n<p><img src=\"http://chaishiwei.com/blog/wp-content/uploads/2017/05/201705091.png\" alt=\"\"></p>\n<p>也可以在服务器上输入下面的命令，来查看 Nginx 所在服务器的公共IP地址，然后在客户端浏览器上输入 IP 也是可以访问的:</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ip addr</span></span><br></pre></td></tr></table></figure>\n<p>相关补充：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 开启 Nginx</span></span><br><span class=\"line\">service nginx start</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止 Nginx</span></span><br><span class=\"line\">service nginx stop</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启 Nginx</span></span><br><span class=\"line\">service nginx restart</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 Nginx 状态</span></span><br><span class=\"line\">service nginx status</span><br></pre></td></tr></table></figure>\n<p>Nginx 的默认站点根目录为</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/nginx/</span>html<span class=\"regexp\">/</span></span><br></pre></td></tr></table></figure>\n<p>默认站点配置在</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/etc/</span>nginx<span class=\"regexp\">/conf.d/</span><span class=\"keyword\">default</span>.conf</span><br></pre></td></tr></table></figure>\n<p>Nginx 主配置如下</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/etc/</span>nginx<span class=\"regexp\">/nginx.conf</span></span><br></pre></td></tr></table></figure>\n<p>在这个配置文件里，会用到include指令，其它地方的配置文件会包含到这个主要的配置文件里，用这种方法可以让配置文件更有条理，也更容易维护。</p>\n<p><a href=\"http://chaishiwei.com/blog/1281.html\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n","excerpt":"在 CentOS 7 中，直接使用 yum 安装 Nignx 会提示无下载源。因此，需要添加 Nginx 的下载源到 yum： 1sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm 指定了下载源后，就可以使用 yum 命令来安装 Nginx 了： 1sudo yum install -y nginx 安装完成的 Nginx 并不会立刻启动，需要我们手动执行命令来开启它: 1sudo systemctl start nginx.service 还可以输入以下命令，让 Nginx 可以随系统自动启动：","categories":[],"tags":[{"name":"后台","slug":"后台","permalink":"http://www.ding1996.cn/tags/后台/"},{"name":"linux","slug":"linux","permalink":"http://www.ding1996.cn/tags/linux/"}]},{"title":"axios封装","date":"2017-09-12T06:31:20.000Z","path":"2017/09/12/it-axios-fengzhuang/","text":"原文地址 前言不推荐完全copy过去,可以看看我是如何针对我这边业务;做的一个axios的封装及实现的思路 需求及实现 统一捕获接口报错 弹窗提示 报错重定向 基础鉴权 表单序列化 实现的功能 统一捕获接口报错 : 用的axios内置的拦截器 弹窗提示: 引入 Element UI的Message组件 报错重定向: 路由钩子 基础鉴权: 服务端过期时间戳和token,还有借助路由的钩子 表单序列化: 我这边直接用qs(npm模块),你有时间也可以自己写 效果图坑都已经爬过,现在复现那些错误有点麻烦..所以没法录制动态图 用法及封装用法 1234// 服务层 , import默认会找该目录下index.js的文件,这个可能有小伙伴不知道// 可以去了解npm的引入和es6引入的理论概念import axiosPlugin from \"./server\"; Vue.use(axiosPlugin); 对axios的封装(AXIOS:index.js) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124import axios from \"axios\";import qs from \"qs\";import &#123; Message &#125; from \"element-ui\";import router from \"../router\";const Axios = axios.create(&#123; baseURL: \"/\", // 因为我本地做了反向代理 timeout: 10000, responseType: \"json\", withCredentials: true, // 是否允许带cookie这些 headers: &#123; \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\" &#125;&#125;);//POST传参序列化(添加请求拦截器)Axios.interceptors.request.use( config =&gt; &#123; // 在发送请求之前做某件事 if ( config.method === \"post\" || config.method === \"put\" || config.method === \"delete\" ) &#123; // 序列化 config.data = qs.stringify(config.data); &#125; // 若是有做鉴权token , 就给头部带上token if (localStorage.token) &#123; config.headers.Authorization = localStorage.token; &#125; return config; &#125;, error =&gt; &#123; Message(&#123; // 饿了么的消息弹窗组件,类似toast showClose: true, message: error, type: \"error.data.error.message\" &#125;); return Promise.reject(error.data.error.message); &#125;);//返回状态判断(添加响应拦截器)Axios.interceptors.response.use( res =&gt; &#123; //对响应数据做些事 if (res.data &amp;&amp; !res.data.success) &#123; Message(&#123; // 饿了么的消息弹窗组件,类似toast showClose: true, message: res.data.error.message.message ? res.data.error.message.message : res.data.error.message, type: \"error\" &#125;); return Promise.reject(res.data.error.message); &#125; return res; &#125;, error =&gt; &#123; // 用户登录的时候会拿到一个基础信息,比如用户名,token,过期时间戳 // 直接丢localStorage或者sessionStorage if (!window.localStorage.getItem(\"loginUserBaseInfo\")) &#123; // 若是接口访问的时候没有发现有鉴权的基础信息,直接返回登录页 router.push(&#123; path: \"/login\" &#125;); &#125; else &#123; // 若是有基础信息的情况下,判断时间戳和当前的时间,若是当前的时间大于服务器过期的时间 // 乖乖的返回去登录页重新登录 let lifeTime = JSON.parse(window.localStorage.getItem(\"loginUserBaseInfo\")).lifeTime * 1000; let nowTime = new Date().getTime(); // 当前时间的时间戳 console.log(nowTime, lifeTime); console.log(nowTime &gt; lifeTime); if (nowTime &gt; lifeTime) &#123; Message(&#123; showClose: true, message: \"登录状态信息过期,请重新登录\", type: \"error\" &#125;); router.push(&#123; path: \"/login\" &#125;); &#125; else &#123; // 下面是接口回调的satus ,因为我做了一些错误页面,所以都会指向对应的报错页面 if (error.response.status === 403) &#123; router.push(&#123; path: \"/error/403\" &#125;); &#125; if (error.response.status === 500) &#123; router.push(&#123; path: \"/error/500\" &#125;); &#125; if (error.response.status === 502) &#123; router.push(&#123; path: \"/error/502\" &#125;); &#125; if (error.response.status === 404) &#123; router.push(&#123; path: \"/error/404\" &#125;); &#125; &#125; &#125; // 返回 response 里的错误信息 let errorInfo = error.data.error ? error.data.error.message : error.data; return Promise.reject(errorInfo); &#125;);// 对axios的实例重新封装成一个plugin ,方便 Vue.use(xxxx)export default &#123; install: function(Vue, Option) &#123; Object.defineProperty(Vue.prototype, \"$http\", &#123; value: Axios &#125;); &#125;&#125;; 路由钩子的调整(Router:index.js) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677import Vue from \"vue\";import Router from \"vue-router\";import layout from \"@/components/layout/layout\";// 版块有点多,版块独立路由管理,里面都是懒加载引入import customerManage from \"./customerManage\"; // 客户管理import account from \"./account\"; //登录import adManage from \"./adManage\"; // 广告管理import dataStat from \"./dataStat\"; // 数据统计import logger from \"./logger\"; // 日志import manager from \"./manager\"; // 管理者import putonManage from \"./putonManage\"; // 投放管理import error from \"./error\"; // 服务端错误import &#123; Message &#125; from \"element-ui\";Vue.use(Router);// 请跳过这一段,看下面的const router = new Router(&#123; hashbang: false, mode: \"history\", routes: [ &#123; path: \"/\", redirect: \"/adver\", component: layout, children: [ ...customerManage, ...adManage, ...dataStat, ...putonManage, ...manager, ...logger ] &#125;, ...account, ...error ]&#125;);// 路由拦截// 差点忘了说明,不是所有版块都需要鉴权的// 所以需要鉴权,我都会在路由meta添加添加一个字段requireLogin,设置为true的时候// 这货就必须走鉴权,像登录页这些不要,是可以直接访问的!!!router.beforeEach((to, from, next) =&gt; &#123; if (to.matched.some(res =&gt; res.meta.requireLogin)) &#123; // 判断是否需要登录权限 if (window.localStorage.getItem(\"loginUserBaseInfo\")) &#123; // 判断是否登录 let lifeTime = JSON.parse(window.localStorage.getItem(\"loginUserBaseInfo\")).lifeTime * 1000; let nowTime = (new Date()).getTime(); // 当前时间的时间戳 if (nowTime &lt; lifeTime) &#123; next(); &#125; else &#123; Message(&#123; showClose: true, message: \"登录状态信息过期,请重新登录\", type: \"error\" &#125;); next(&#123; path: \"/login\" &#125;); &#125; &#125; else &#123; // 没登录则跳转到登录界面 next(&#123; path: \"/login\" &#125;); &#125; &#125; else &#123; next(); &#125;&#125;);export default router; axios可配置的一些选项,其他的具体看官网说明哈 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364export default &#123; // 请求地址 url: \"/user\", // 请求类型 method: \"get\", // 请根路径 baseURL: \"http://www.mt.com/api\", // 请求前的数据处理 transformRequest: [function(data) &#123;&#125;], // 请求后的数据处理 transformResponse: [function(data) &#123;&#125;], // 自定义的请求头 headers: &#123; \"x-Requested-With\": \"XMLHttpRequest\" &#125;, // URL查询对象 params: &#123; id: 12 &#125;, // 查询对象序列化函数 paramsSerializer: function(params) &#123;&#125;, // request body data: &#123; key: \"aa\" &#125;, // 超时设置s timeout: 1000, // 跨域是否带Token withCredentials: false, // 自定义请求处理 adapter: function(resolve, reject, config) &#123;&#125;, // 身份验证信息 auth: &#123; uname: \"\", pwd: \"12\" &#125;, // 响应的数据格式 json / blob /document /arraybuffer / text / stream responseType: \"json\", // xsrf 设置 xsrfCookieName: \"XSRF-TOKEN\", xsrfHeaderName: \"X-XSRF-TOKEN\", // 下传和下载进度回调 onUploadProgress: function(progressEvent) &#123; Math.round(progressEvent.loaded * 100 / progressEvent.total); &#125;, onDownloadProgress: function(progressEvent) &#123;&#125;, // 最多转发数，用于node.js maxRedirects: 5, // 最大响应数据大小 maxContentLength: 2000, // 自定义错误状态码范围 validateStatus: function(status) &#123; return status &gt;= 200 &amp;&amp; status &lt; 300; &#125;, // 用于node.js httpAgent: new http.Agent(&#123; keepAlive: true &#125;), httpsAgent: new https.Agent(&#123; keepAlive: true &#125;), // 用于设置跨域请求代理 proxy: &#123; host: \"127.0.0.1\", port: 8080, auth: &#123; username: \"aa\", password: \"2123\" &#125; &#125;, // 用于取消请求 cancelToken: new CancelToken(function(cancel) &#123;&#125;)&#125;;","content":"<p><a href=\"https://juejin.im/post/59a22e71518825242c422604\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>不推荐完全copy过去,可以看看我是如何针对我这边业务;<br>做的一个axios的封装及实现的思路</p>\n<h3 id=\"需求及实现\"><a href=\"#需求及实现\" class=\"headerlink\" title=\"需求及实现\"></a>需求及实现</h3><ul>\n<li>统一捕获接口报错</li>\n<li>弹窗提示</li>\n<li>报错重定向</li>\n<li>基础鉴权</li>\n<li>表单序列化</li>\n</ul>\n<h3 id=\"实现的功能\"><a href=\"#实现的功能\" class=\"headerlink\" title=\"实现的功能\"></a>实现的功能</h3><ul>\n<li>统一捕获接口报错 : 用的axios内置的拦截器</li>\n<li>弹窗提示: 引入 Element UI的Message组件</li>\n<li>报错重定向: 路由钩子</li>\n<li>基础鉴权: 服务端过期时间戳和token,还有借助路由的钩子</li>\n<li>表单序列化: 我这边直接用qs(npm模块),你有时间也可以自己写</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><p>坑都已经爬过,现在复现那些错误有点麻烦..所以没法录制动态图</p>\n<h3 id=\"用法及封装\"><a href=\"#用法及封装\" class=\"headerlink\" title=\"用法及封装\"></a>用法及封装</h3><p>用法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 服务层 , import默认会找该目录下index.js的文件,这个可能有小伙伴不知道</span></span><br><span class=\"line\"><span class=\"comment\">// 可以去了解npm的引入和es6引入的理论概念</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axiosPlugin <span class=\"keyword\">from</span> <span class=\"string\">\"./server\"</span>; </span><br><span class=\"line\">Vue.use(axiosPlugin);</span><br></pre></td></tr></table></figure>\n<p>对axios的封装(AXIOS:index.js)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">\"qs\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Message &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"element-ui\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">\"../router\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Axios = axios.create(&#123;</span><br><span class=\"line\">  baseURL: <span class=\"string\">\"/\"</span>, <span class=\"comment\">// 因为我本地做了反向代理</span></span><br><span class=\"line\">  timeout: <span class=\"number\">10000</span>,</span><br><span class=\"line\">  responseType: <span class=\"string\">\"json\"</span>,</span><br><span class=\"line\">  withCredentials: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否允许带cookie这些</span></span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/x-www-form-urlencoded;charset=utf-8\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//POST传参序列化(添加请求拦截器)</span></span><br><span class=\"line\">Axios.interceptors.request.use(</span><br><span class=\"line\">  config =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在发送请求之前做某件事</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      config.method === <span class=\"string\">\"post\"</span> ||</span><br><span class=\"line\">      config.method === <span class=\"string\">\"put\"</span> ||</span><br><span class=\"line\">      config.method === <span class=\"string\">\"delete\"</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 序列化</span></span><br><span class=\"line\">      config.data = qs.stringify(config.data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 若是有做鉴权token , 就给头部带上token</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (localStorage.token) &#123;</span><br><span class=\"line\">      config.headers.Authorization = localStorage.token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error =&gt; &#123;</span><br><span class=\"line\">    Message(&#123;</span><br><span class=\"line\">      <span class=\"comment\">//  饿了么的消息弹窗组件,类似toast</span></span><br><span class=\"line\">      showClose: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      message: error,</span><br><span class=\"line\">      type: <span class=\"string\">\"error.data.error.message\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error.data.error.message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回状态判断(添加响应拦截器)</span></span><br><span class=\"line\">Axios.interceptors.response.use(</span><br><span class=\"line\">  res =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//对响应数据做些事</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.data &amp;&amp; !res.data.success) &#123;</span><br><span class=\"line\">      Message(&#123;</span><br><span class=\"line\">        <span class=\"comment\">//  饿了么的消息弹窗组件,类似toast</span></span><br><span class=\"line\">        showClose: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        message: res.data.error.message.message</span><br><span class=\"line\">          ? res.data.error.message.message</span><br><span class=\"line\">          : res.data.error.message,</span><br><span class=\"line\">        type: <span class=\"string\">\"error\"</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(res.data.error.message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用户登录的时候会拿到一个基础信息,比如用户名,token,过期时间戳</span></span><br><span class=\"line\">    <span class=\"comment\">// 直接丢localStorage或者sessionStorage</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">window</span>.localStorage.getItem(<span class=\"string\">\"loginUserBaseInfo\"</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 若是接口访问的时候没有发现有鉴权的基础信息,直接返回登录页</span></span><br><span class=\"line\">      router.push(&#123;</span><br><span class=\"line\">        path: <span class=\"string\">\"/login\"</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 若是有基础信息的情况下,判断时间戳和当前的时间,若是当前的时间大于服务器过期的时间</span></span><br><span class=\"line\">      <span class=\"comment\">// 乖乖的返回去登录页重新登录</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> lifeTime =</span><br><span class=\"line\">        <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">window</span>.localStorage.getItem(<span class=\"string\">\"loginUserBaseInfo\"</span>)).lifeTime *</span><br><span class=\"line\">        <span class=\"number\">1000</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> nowTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime(); <span class=\"comment\">// 当前时间的时间戳</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(nowTime, lifeTime);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(nowTime &gt; lifeTime);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nowTime &gt; lifeTime) &#123;</span><br><span class=\"line\">        Message(&#123;</span><br><span class=\"line\">          showClose: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          message: <span class=\"string\">\"登录状态信息过期,请重新登录\"</span>,</span><br><span class=\"line\">          type: <span class=\"string\">\"error\"</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        router.push(&#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/login\"</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 下面是接口回调的satus ,因为我做了一些错误页面,所以都会指向对应的报错页面</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error.response.status === <span class=\"number\">403</span>) &#123;</span><br><span class=\"line\">          router.push(&#123;</span><br><span class=\"line\">            path: <span class=\"string\">\"/error/403\"</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error.response.status === <span class=\"number\">500</span>) &#123;</span><br><span class=\"line\">          router.push(&#123;</span><br><span class=\"line\">            path: <span class=\"string\">\"/error/500\"</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error.response.status === <span class=\"number\">502</span>) &#123;</span><br><span class=\"line\">          router.push(&#123;</span><br><span class=\"line\">            path: <span class=\"string\">\"/error/502\"</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error.response.status === <span class=\"number\">404</span>) &#123;</span><br><span class=\"line\">          router.push(&#123;</span><br><span class=\"line\">            path: <span class=\"string\">\"/error/404\"</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 返回 response 里的错误信息</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> errorInfo =  error.data.error ? error.data.error.message : error.data;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(errorInfo);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对axios的实例重新封装成一个plugin ,方便 Vue.use(xxxx)</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  install: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Vue, Option</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(Vue.prototype, <span class=\"string\">\"$http\"</span>, &#123; <span class=\"attr\">value</span>: Axios &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>路由钩子的调整(Router:index.js)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">\"vue-router\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> layout <span class=\"keyword\">from</span> <span class=\"string\">\"@/components/layout/layout\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 版块有点多,版块独立路由管理,里面都是懒加载引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> customerManage <span class=\"keyword\">from</span> <span class=\"string\">\"./customerManage\"</span>; <span class=\"comment\">// 客户管理</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> account <span class=\"keyword\">from</span> <span class=\"string\">\"./account\"</span>; <span class=\"comment\">//登录</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> adManage <span class=\"keyword\">from</span> <span class=\"string\">\"./adManage\"</span>; <span class=\"comment\">// 广告管理</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> dataStat <span class=\"keyword\">from</span> <span class=\"string\">\"./dataStat\"</span>; <span class=\"comment\">// 数据统计</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> logger <span class=\"keyword\">from</span> <span class=\"string\">\"./logger\"</span>; <span class=\"comment\">// 日志</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> manager <span class=\"keyword\">from</span> <span class=\"string\">\"./manager\"</span>; <span class=\"comment\">// 管理者</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> putonManage <span class=\"keyword\">from</span> <span class=\"string\">\"./putonManage\"</span>; <span class=\"comment\">// 投放管理</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> error <span class=\"keyword\">from</span> <span class=\"string\">\"./error\"</span>; <span class=\"comment\">// 服务端错误</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Message &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"element-ui\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Router);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请跳过这一段,看下面的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  hashbang: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  mode: <span class=\"string\">\"history\"</span>,</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">      redirect: <span class=\"string\">\"/adver\"</span>,</span><br><span class=\"line\">      component: layout,</span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        ...customerManage,</span><br><span class=\"line\">        ...adManage,</span><br><span class=\"line\">        ...dataStat,</span><br><span class=\"line\">        ...putonManage,</span><br><span class=\"line\">        ...manager,</span><br><span class=\"line\">        ...logger</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...account,</span><br><span class=\"line\">    ...error</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 路由拦截</span></span><br><span class=\"line\"><span class=\"comment\">// 差点忘了说明,不是所有版块都需要鉴权的</span></span><br><span class=\"line\"><span class=\"comment\">// 所以需要鉴权,我都会在路由meta添加添加一个字段requireLogin,设置为true的时候</span></span><br><span class=\"line\"><span class=\"comment\">// 这货就必须走鉴权,像登录页这些不要,是可以直接访问的!!!</span></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (to.matched.some(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.meta.requireLogin)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否需要登录权限</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.localStorage.getItem(<span class=\"string\">\"loginUserBaseInfo\"</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 判断是否登录</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> lifeTime =</span><br><span class=\"line\">        <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">window</span>.localStorage.getItem(<span class=\"string\">\"loginUserBaseInfo\"</span>)).lifeTime *</span><br><span class=\"line\">        <span class=\"number\">1000</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> nowTime = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).getTime(); <span class=\"comment\">// 当前时间的时间戳</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nowTime &lt; lifeTime) &#123;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Message(&#123;</span><br><span class=\"line\">          showClose: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          message: <span class=\"string\">\"登录状态信息过期,请重新登录\"</span>,</span><br><span class=\"line\">          type: <span class=\"string\">\"error\"</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        next(&#123;</span><br><span class=\"line\">          path: <span class=\"string\">\"/login\"</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 没登录则跳转到登录界面</span></span><br><span class=\"line\">      next(&#123;</span><br><span class=\"line\">        path: <span class=\"string\">\"/login\"</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router;</span><br></pre></td></tr></table></figure>\n<p>axios可配置的一些选项,其他的具体看官网说明哈</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 请求地址</span></span><br><span class=\"line\">  url: <span class=\"string\">\"/user\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 请求类型</span></span><br><span class=\"line\">  method: <span class=\"string\">\"get\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 请根路径</span></span><br><span class=\"line\">  baseURL: <span class=\"string\">\"http://www.mt.com/api\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 请求前的数据处理</span></span><br><span class=\"line\">  transformRequest: [<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;&#125;],</span><br><span class=\"line\">  <span class=\"comment\">// 请求后的数据处理</span></span><br><span class=\"line\">  transformResponse: [<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;&#125;],</span><br><span class=\"line\">  <span class=\"comment\">// 自定义的请求头</span></span><br><span class=\"line\">  headers: &#123; <span class=\"string\">\"x-Requested-With\"</span>: <span class=\"string\">\"XMLHttpRequest\"</span> &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// URL查询对象</span></span><br><span class=\"line\">  params: &#123; <span class=\"attr\">id</span>: <span class=\"number\">12</span> &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 查询对象序列化函数</span></span><br><span class=\"line\">  paramsSerializer: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// request body</span></span><br><span class=\"line\">  data: &#123; <span class=\"attr\">key</span>: <span class=\"string\">\"aa\"</span> &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 超时设置s</span></span><br><span class=\"line\">  timeout: <span class=\"number\">1000</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 跨域是否带Token</span></span><br><span class=\"line\">  withCredentials: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 自定义请求处理</span></span><br><span class=\"line\">  adapter: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject, config</span>) </span>&#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 身份验证信息</span></span><br><span class=\"line\">  auth: &#123; <span class=\"attr\">uname</span>: <span class=\"string\">\"\"</span>, <span class=\"attr\">pwd</span>: <span class=\"string\">\"12\"</span> &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 响应的数据格式 json / blob /document /arraybuffer / text / stream</span></span><br><span class=\"line\">  responseType: <span class=\"string\">\"json\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// xsrf 设置</span></span><br><span class=\"line\">  xsrfCookieName: <span class=\"string\">\"XSRF-TOKEN\"</span>,</span><br><span class=\"line\">  xsrfHeaderName: <span class=\"string\">\"X-XSRF-TOKEN\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 下传和下载进度回调</span></span><br><span class=\"line\">  onUploadProgress: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">progressEvent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Math</span>.round(progressEvent.loaded * <span class=\"number\">100</span> / progressEvent.total);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onDownloadProgress: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">progressEvent</span>) </span>&#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 最多转发数，用于node.js</span></span><br><span class=\"line\">  maxRedirects: <span class=\"number\">5</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 最大响应数据大小</span></span><br><span class=\"line\">  maxContentLength: <span class=\"number\">2000</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 自定义错误状态码范围</span></span><br><span class=\"line\">  validateStatus: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">status</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status &gt;= <span class=\"number\">200</span> &amp;&amp; status &lt; <span class=\"number\">300</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 用于node.js</span></span><br><span class=\"line\">  httpAgent: <span class=\"keyword\">new</span> http.Agent(&#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\">  httpsAgent: <span class=\"keyword\">new</span> https.Agent(&#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用于设置跨域请求代理</span></span><br><span class=\"line\">  proxy: &#123;</span><br><span class=\"line\">    host: <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">    port: <span class=\"number\">8080</span>,</span><br><span class=\"line\">    auth: &#123;</span><br><span class=\"line\">      username: <span class=\"string\">\"aa\"</span>,</span><br><span class=\"line\">      password: <span class=\"string\">\"2123\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 用于取消请求</span></span><br><span class=\"line\">  cancelToken: <span class=\"keyword\">new</span> CancelToken(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cancel</span>) </span>&#123;&#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","excerpt":"原文地址 前言不推荐完全copy过去,可以看看我是如何针对我这边业务;做的一个axios的封装及实现的思路 需求及实现 统一捕获接口报错 弹窗提示 报错重定向 基础鉴权 表单序列化 实现的功能 统一捕获接口报错 : 用的axios内置的拦截器 弹窗提示: 引入 Element UI的Message组件 报错重定向: 路由钩子 基础鉴权: 服务端过期时间戳和token,还有借助路由的钩子 表单序列化: 我这边直接用qs(npm模块),你有时间也可以自己写","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://www.ding1996.cn/tags/vue/"}]},{"title":"Express中如何使用模板引擎","date":"2017-09-11T08:38:00.000Z","path":"2017/09/11/it-express-tmp-engine/","text":"先来看看官网介绍 和 Express 兼容的模板引擎，比如 Jade，通过 res.render() 调用其导出方法 __express(filePath, options, callback) 渲染模板。 有一些模板引擎不遵循这种约定，Consolidate.js 能将 Node 中所有流行的模板引擎映射为这种约定，这样就可以和 Express 无缝衔接。 在这里我们使用官网推荐的Consolidate.js 在根目录下有个views文件里面专门放需要编译的模板引擎 1234567891011&lt;!--1.ejs--&gt;&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; 我的名字叫：&lt;%= name %&gt; &lt;/body&gt;&lt;/html&gt; 重点在下面 1234567891011121314151617181920const express = require('express');const consolidate=require('consolidate');let server = express();//输出什么东西server.set('view engine', 'html');//模板文件放在哪儿server.set('views', './views');//哪种模板引擎server.engine('html', consolidate.ejs);//接收用户请求server.get('/index', function (req, res)&#123; res.render('1.ejs', &#123;name: 'blue'&#125;);&#125;);server.listen(9090);","content":"<p><a href=\"http://www.expressjs.com.cn/guide/using-template-engines.html\" target=\"_blank\" rel=\"noopener\">先来看看官网介绍</a></p>\n<blockquote>\n<p>和 Express 兼容的模板引擎，比如 Jade，通过 res.render() 调用其导出方法 __express(filePath, options, callback) 渲染模板。</p>\n</blockquote>\n<blockquote>\n<p>有一些模板引擎不遵循这种约定，Consolidate.js 能将 Node 中所有流行的模板引擎映射为这种约定，这样就可以和 Express 无缝衔接。</p>\n</blockquote>\n<p>在这里我们使用官网推荐的Consolidate.js</p>\n<p>在根目录下有个views文件里面专门放需要编译的模板引擎</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--1.ejs--&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    我的名字叫：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">name</span> %&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>重点在下面 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> consolidate=<span class=\"built_in\">require</span>(<span class=\"string\">'consolidate'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> server = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出什么东西</span></span><br><span class=\"line\">server.set(<span class=\"string\">'view engine'</span>, <span class=\"string\">'html'</span>);</span><br><span class=\"line\"><span class=\"comment\">//模板文件放在哪儿</span></span><br><span class=\"line\">server.set(<span class=\"string\">'views'</span>, <span class=\"string\">'./views'</span>);</span><br><span class=\"line\"><span class=\"comment\">//哪种模板引擎</span></span><br><span class=\"line\">server.engine(<span class=\"string\">'html'</span>, consolidate.ejs);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接收用户请求</span></span><br><span class=\"line\">server.get(<span class=\"string\">'/index'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'1.ejs'</span>, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'blue'</span>&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">9090</span>);</span><br></pre></td></tr></table></figure>\n","excerpt":"先来看看官网介绍 和 Express 兼容的模板引擎，比如 Jade，通过 res.render() 调用其导出方法 __express(filePath, options, callback) 渲染模板。 有一些模板引擎不遵循这种约定，Consolidate.js 能将 Node 中所有流行的模板引擎映射为这种约定，这样就可以和 Express 无缝衔接。 在这里我们使用官网推荐的Consolidate.js 在根目录下有个views文件里面专门放需要编译的模板引擎 1234567891011&lt;!--1.ejs--&gt;&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; 我的名字叫：&lt;%= name %&gt; &lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"},{"name":"后台","slug":"后台","permalink":"http://www.ding1996.cn/tags/后台/"}]},{"title":"Express中如何上传文件","date":"2017-09-11T08:09:13.000Z","path":"2017/09/11/it-express-upload/","text":"在Express中我们上传图片使用Multer中间件 下面直接展示代码 前端直接使用form表单上传 需要注意的是 在上传文件的时候，表单需要加上 enctype=”multipart/form-data” 属性 不加默认的话只能上传文件名 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;上传文件&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form class=\"\" action=\"http://localhost:9090/upload\" method=\"post\" enctype=\"multipart/form-data\"&gt; &lt;input type=\"file\" name=\"file\" value=\"\"&gt; &lt;input type=\"submit\" name=\"\" value=\"上传文件\"&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 下面是后台nodejs代码, multer详细API请看文档 123456789101112131415161718192021222324const express = require('express');let app =express();let multer = require('multer');let upload = multer(&#123; dest: 'uploads/' &#125;);let fs = require('fs');app.listen(9090);app.post('/upload',upload.any(),function(req,res)&#123; let result =req.files[0].destination + req.files[0].originalname; let pathLib = req.files[0].path; fs.rename(pathLib,result,function(err)&#123; if(err)&#123; res.send('上传失败'); res.end(); &#125;else&#123; res.send('上传成功'); res.end(); &#125; &#125;)&#125;)","content":"<p>在Express中我们上传图片使用<a href=\"https://github.com/expressjs/multer\" target=\"_blank\" rel=\"noopener\">Multer</a>中间件</p>\n<p>下面直接展示代码</p>\n<p>前端直接使用form表单上传 需要注意的是 在上传文件的时候，表单需要加上 enctype=”multipart/form-data” 属性 不加默认的话只能上传文件名</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>上传文件<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://localhost:9090/upload\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"上传文件\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>下面是后台nodejs代码, multer详细API请看文档 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> app =express();</span><br><span class=\"line\"><span class=\"keyword\">let</span> multer  = <span class=\"built_in\">require</span>(<span class=\"string\">'multer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> upload = multer(&#123; <span class=\"attr\">dest</span>: <span class=\"string\">'uploads/'</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\">app.listen(<span class=\"number\">9090</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(<span class=\"string\">'/upload'</span>,upload.any(),<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result =req.files[<span class=\"number\">0</span>].destination + req.files[<span class=\"number\">0</span>].originalname;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> pathLib = req.files[<span class=\"number\">0</span>].path;</span><br><span class=\"line\">  fs.rename(pathLib,result,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        res.send(<span class=\"string\">'上传失败'</span>);</span><br><span class=\"line\">        res.end();</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        res.send(<span class=\"string\">'上传成功'</span>);</span><br><span class=\"line\">        res.end();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","excerpt":"在Express中我们上传图片使用Multer中间件 下面直接展示代码 前端直接使用form表单上传 需要注意的是 在上传文件的时候，表单需要加上 enctype=”multipart/form-data” 属性 不加默认的话只能上传文件名 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;上传文件&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form class=\"\" action=\"http://localhost:9090/upload\" method=\"post\" enctype=\"multipart/form-data\"&gt; &lt;input type=\"file\" name=\"file\" value=\"\"&gt; &lt;input type=\"submit\" name=\"\" value=\"上传文件\"&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"},{"name":"后台","slug":"后台","permalink":"http://www.ding1996.cn/tags/后台/"}]},{"title":"Vue非父子组件通信方法","date":"2017-09-06T11:16:13.000Z","path":"2017/09/06/it-vue-bus/","text":"一提到两个非父子组件通信方法，有经验的 coder 肯定会说用 Vuex 啊，我个人建议不要为了用 Vuex 而用 Vuex，除非你的项目很大，耦合度很高，需要大量的储存一些 data，组件之间通信频繁。当然还是要根据自己的业务场景的来决定，总之还是那句话，不要为了用 Vuex 而用 Vuex！ Vue 官网介绍了非父子组件通信方法： 不过官网说的太简单了，新手看完估计还是一脸懵逼。还有这个空的 Vue 实例放到哪里合适也值得商榷。 这篇文章的目的就是用一个简单的例子让你明白如何用 Bus 🚌 来进行通信：假设 bb 组件里面有个按钮，点击按钮，把 123 传递给 aa 组件 12345678910// 根组件（this.$root)new Vue(&#123; el: '#app', router, render: h =&gt; h(App), data: &#123; // 空的实例放到根组件下，所有的子组件都能调用 Bus: new Vue() &#125;&#125;) bb 组件内调用事件触发↓ 12345678&lt;button @click=\"submit\"&gt;提交&lt;button&gt;methods: &#123; submit() &#123; // 事件名字自定义，用不同的名字区别事件 this.$root.Bus.$emit('eventName', 123) &#125; &#125; aa 组件内调用事件接收↓ 1234567891011121314151617// 当前实例创建完成就监听这个事件created()&#123; this.$root.Bus.$on('eventName', value =&gt; &#123; this.print(value) &#125;)&#125;,methods: &#123; print(value) &#123; console.log(value) &#125;&#125;,// 在组件销毁时别忘了解除事件绑定beforeDestroy() &#123; this.$root.Bus.$off('eventName')&#125;, 这样就可以了，是不是很简单？","content":"<blockquote>\n<p>一提到两个非父子组件通信方法，有经验的 coder 肯定会说用 Vuex 啊，我个人建议不要为了用 Vuex 而用 Vuex，除非你的项目很大，耦合度很高，需要大量的储存一些 data，组件之间通信频繁。当然还是要根据自己的业务场景的来决定，总之还是那句话，不要为了用 Vuex 而用 Vuex！</p>\n</blockquote>\n<p> Vue 官网介绍了非父子组件通信方法：<br> <img src=\"http://upload-images.jianshu.io/upload_images/1430985-11f7e296be088d3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600\" alt=\"\"><br> 不过官网说的太简单了，新手看完估计还是一脸懵逼。还有这个空的 Vue 实例放到哪里合适也值得商榷。</p>\n<a id=\"more\"></a>\n<hr>\n<p>这篇文章的目的就是用一个简单的例子让你明白如何用 Bus 🚌 来进行通信：<br><img src=\"http://upload-images.jianshu.io/upload_images/1430985-6f49976b34d4e44f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300\" alt=\"\"><br>假设 bb 组件里面有个按钮，点击按钮，把 123 传递给 aa 组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根组件（this.$root)</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 空的实例放到根组件下，所有的子组件都能调用</span></span><br><span class=\"line\">    Bus: <span class=\"keyword\">new</span> Vue()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>bb 组件内调用事件触发↓</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button @click=<span class=\"string\">\"submit\"</span>&gt;提交&lt;button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">   submit() &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 事件名字自定义，用不同的名字区别事件</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$root.Bus.$emit(<span class=\"string\">'eventName'</span>, <span class=\"number\">123</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>aa 组件内调用事件接收↓</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当前实例创建完成就监听这个事件</span></span><br><span class=\"line\">created()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$root.Bus.$on(<span class=\"string\">'eventName'</span>, value =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.print(value)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  print(value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在组件销毁时别忘了解除事件绑定</span></span><br><span class=\"line\">beforeDestroy() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.$root.Bus.$off(<span class=\"string\">'eventName'</span>)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>这样就可以了，是不是很简单？</p>\n","excerpt":"一提到两个非父子组件通信方法，有经验的 coder 肯定会说用 Vuex 啊，我个人建议不要为了用 Vuex 而用 Vuex，除非你的项目很大，耦合度很高，需要大量的储存一些 data，组件之间通信频繁。当然还是要根据自己的业务场景的来决定，总之还是那句话，不要为了用 Vuex 而用 Vuex！ Vue 官网介绍了非父子组件通信方法： 不过官网说的太简单了，新手看完估计还是一脸懵逼。还有这个空的 Vue 实例放到哪里合适也值得商榷。","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://www.ding1996.cn/tags/vue/"}]},{"title":"Vue框架引入JS库的正确姿势","date":"2017-09-06T01:16:13.000Z","path":"2017/09/06/it-vue-importjs/","text":"关于本文： 原文地址 翻译地址 译者：野草 在Vue.js应用中，可能需要引入Lodash，Moment，Axios，Async等非常好用的JavaScript库。当项目变得复杂庞大，通常会将代码进行模块化拆分。可能还需要跑在不同的环境下，比如浏览器，服务端。 如何在各个模块和组件文件中引入需要的库呢？ 找到一种简单靠谱的方式，可以省去很多的麻烦。 错误示范全局变量法最不靠谱的方式就是将导入的库挂在全部变量window对象下： entry.js window._ = require(&apos;lodash&apos;); MyComponent.vue export default { created() { console.log(_.isEmpty() ? &apos;Lodash everywhere!&apos; : &apos;Uh oh..&apos;); } } 这种方式的缺点有很多，我们只说其中一个关键的点：不支持服务端渲染。当应用跑在服务端时，window对象不存在，当然试图去访问window下的属性会抛出错误。 处处引入法另外一个不太优雅的方式就是在需要的每个文件中都引入对应的库： MyComponent.vue import _ from &apos;lodash&apos;; export default { created() { console.log(_.isEmpty() ? &apos;Lodash is available here!&apos; : &apos;Uh oh..&apos;); } } 虽然这方法是可行的，但是太不简洁。你必须在每个文件中都记得引入， 而且如果不需要了，又得重新删除。另外，如果打包策略不够明智的话，可能会打包出多份重复的代码。 正确引入方式最简单靠谱的方式是用库变成Vue的原型对象的属性。下面，我来演示如何将Moment库引入： entry.js import moment from &apos;moment&apos;; Object.defineProperty(Vue.prototype, &apos;$moment&apos;, { value: moment }); 由于所有的组件都会继承Vue原型对象上的方法，因此这些方法在任何组件文件中都能通过this.$moment访问到： MyNewComponent.vue export default { created() { console.log(&apos;The time is &apos; . this.$moment().format(&quot;HH:mm&quot;)); } } 我们来仔细看一下其中的原理。 Object.defineProperty通常我们会如下设置对象属性： Vue.prototype.$moment = moment; 你也可以这么做，但是Object.defineProperty允许我们用属性描述器来定义我们的属性。我们可以定义该属性是否可写，可枚举，可配置。 一般情况下，我们不需要用那么复杂的方式来赋值属性。但这里用它有个好处：用属性描述器定义的属性是默认只读的。 这能防止那些脑子不清醒的开发者（很可能是你哦~~）犯下一些低级错误： this.$http = &apos;Assign some random thing to the instance method&apos;; this.$http.get(&apos;/&apos;); // TypeError: this.$http.get is not a function Object.defineProperty能保护引入的库不被重新赋值，如果你尝试重写，程序会抛出“TypeError: Cannot assign to read only property”的错误。 $可能你注意到，我们用“$”开头的属性来存放引入的库。当然，你应该记得还有其他的一些属性也是这样的，比如$refs， $on， $mount。 这种做法不是强制的，这个前缀就是为了提醒某些昏昏沉沉的开发者（怎么又是你？！），这些属性是公有的，你可以在任何地方使用。反之，某些属性只能在Vue内部使用。 作为一门以原型为基本的语言，JavaScript中并没有真正的类，所以也就没有所谓的公有，私有变量，或者静态方法。上面这种约定，我觉得是种不错的选择。 this现在你能用this.$libraryName的方式来访问你需要的库了。但，你得保证this的指向。如果你在回调函数中使用this，通常这个this不再指向Vue实例。 箭头函数是解决这个问题的好方法。 this.$http.get(&apos;/&apos;).then(res =&gt; { if (res.status !== 200) { this.$http.get(&apos;/&apos;) // etc // Only works in a fat arrow callback. } }); 写成插件如果你在项目的很多地方都用了某个库，或者你希望全局可用，你可以构建自己的Vue插件。 插件能化繁为简，能让你像下面这样很简单地引入自己想要的库： import MyLibraryPlugin from &apos;my-library-plugin&apos;; Vue.use(MyLibraryPlugin); 就像Vue Route，Vuex等插件一样，我们的库仅仅需要两行，就能在任何地方使用了。 如何写插件首先，创建一个文件。本例中，我将引入一个Axios库的插件。我们就把这个文件命名为axios.js吧。 最关键的地方在于，我们需要暴露一个将Vue构造器作为第一个参数的install方法。 axios.js export default { install: function(Vue) { // Do stuff } } 然后我们可以用之前的方式将库添加到Vue的原型对象上： axios.js import axios from &apos;axios&apos;; export default { install: function(Vue) { Object.defineProperty(Vue.prototype, &apos;$http&apos;, { value: axios }); } } 接着我们只需要Vue实例的use方法就能将这个库引入整个项目了。我们像下面代码一样简单引入： entry.js import AxiosPlugin from &apos;./axios.js&apos;; Vue.use(AxiosPlugin); new Vue({ created() { console.log(this.$http ? &apos;Axios works!&apos; : &apos;Uh oh..&apos;); } }) 插件参数设置插件的install方法还可以接受其他的可选参数。有些开发者可能不喜欢Axios实例对象的方法名$http，因为Vue resource插件的方法名也是这个。然后，让我们利用第二个参数来修改它。 axios.js import axios from &apos;axios&apos;; export default { install: function(Vue, name = &apos;$http&apos;) { Object.defineProperty(Vue.prototype, name, { value: axios }); } } entry.js import AxiosPlugin from &apos;./axios.js&apos;; Vue.use(AxiosPlugin, &apos;$axios&apos;); new Vue({ created() { console.log(this.$axios ? &apos;Axios works!&apos; : &apos;Uh oh..&apos;); } }) 当然上面，我们可以直接在Object.defineProperty的中将name属性写死成$axios。也可以在install方法中引入多个需要的库。 【译者话】这篇文章浅显易懂，实用小巧。早上看到的，马上就应用在了项目中。对我来说，是涨知识了。你呢？","content":"<p>关于本文：</p>\n<p><a href=\"http://vuejsdevelopers.com/2017/04/22/vue-js-libraries-plugins/?jsdojo_id=reddit_lip&amp;utm_content=bufferf1f60&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer\" target=\"_blank\" rel=\"noopener\">原文地址</a>   <a href=\"https://github.com/fezaoduke/TranslationInstitute/blob/master/Vue%E6%A1%86%E6%9E%B6%E5%BC%95%E5%85%A5JS%E5%BA%93%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF.md\" target=\"_blank\" rel=\"noopener\">翻译地址</a>   译者：野草</p>\n<p>在Vue.js应用中，可能需要引入Lodash，Moment，Axios，Async等非常好用的JavaScript库。当项目变得复杂庞大，通常会将代码进行模块化拆分。可能还需要跑在不同的环境下，比如浏览器，服务端。</p>\n<p>如何在各个模块和组件文件中引入需要的库呢？ 找到一种简单靠谱的方式，可以省去很多的麻烦。</p>\n<a id=\"more\"></a>\n<h2 id=\"错误示范\"><a href=\"#错误示范\" class=\"headerlink\" title=\"错误示范\"></a>错误示范</h2><h3 id=\"全局变量法\"><a href=\"#全局变量法\" class=\"headerlink\" title=\"全局变量法\"></a>全局变量法</h3><p>最不靠谱的方式就是将导入的库挂在全部变量<code>window</code>对象下：</p>\n<p><strong>entry.js</strong></p>\n<pre><code>window._ = require(&apos;lodash&apos;);\n</code></pre><p><strong>MyComponent.vue</strong></p>\n<pre><code>export default {\n  created() {\n    console.log(_.isEmpty() ? &apos;Lodash everywhere!&apos; : &apos;Uh oh..&apos;);\n  }\n}\n</code></pre><p>这种方式的缺点有很多，我们只说其中一个关键的点：不支持服务端渲染。当应用跑在服务端时，<code>window</code>对象不存在，当然试图去访问<code>window</code>下的属性会抛出错误。</p>\n<h3 id=\"处处引入法\"><a href=\"#处处引入法\" class=\"headerlink\" title=\"处处引入法\"></a>处处引入法</h3><p>另外一个不太优雅的方式就是在需要的每个文件中都引入对应的库：</p>\n<p><strong>MyComponent.vue</strong></p>\n<pre><code>import _ from &apos;lodash&apos;;\n\nexport default {\n  created() {\n    console.log(_.isEmpty() ? &apos;Lodash is available here!&apos; : &apos;Uh oh..&apos;);\n  }\n}\n</code></pre><p>虽然这方法是可行的，但是太不简洁。你必须在每个文件中都记得引入， 而且如果不需要了，又得重新删除。另外，如果打包策略不够明智的话，可能会打包出多份重复的代码。</p>\n<h2 id=\"正确引入方式\"><a href=\"#正确引入方式\" class=\"headerlink\" title=\"正确引入方式\"></a>正确引入方式</h2><p>最简单靠谱的方式是用库变成<code>Vue</code>的原型对象的属性。下面，我来演示如何将Moment库引入：</p>\n<p><strong>entry.js</strong></p>\n<pre><code>import moment from &apos;moment&apos;;\nObject.defineProperty(Vue.prototype, &apos;$moment&apos;, { value: moment });\n</code></pre><p>由于所有的组件都会继承<code>Vue</code>原型对象上的方法，因此这些方法在任何组件文件中都能通过<code>this.$moment</code>访问到：</p>\n<p><strong>MyNewComponent.vue</strong></p>\n<pre><code>export default {\n  created() {\n    console.log(&apos;The time is &apos; . this.$moment().format(&quot;HH:mm&quot;));\n  }\n}\n</code></pre><p>我们来仔细看一下其中的原理。</p>\n<h3 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty\"></a>Object.defineProperty</h3><p>通常我们会如下设置对象属性：</p>\n<pre><code>Vue.prototype.$moment = moment;\n</code></pre><p>你也可以这么做，但是<code>Object.defineProperty</code>允许我们用<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener\">属性描述器</a>来定义我们的属性。我们可以定义该属性是否可写，可枚举，可配置。</p>\n<p>一般情况下，我们不需要用那么复杂的方式来赋值属性。但这里用它有个好处：用属性描述器定义的属性是默认只读的。</p>\n<p>这能防止那些脑子不清醒的开发者（很可能是你哦~~）犯下一些低级错误：</p>\n<pre><code>this.$http = &apos;Assign some random thing to the instance method&apos;;\nthis.$http.get(&apos;/&apos;); // TypeError: this.$http.get is not a function\n</code></pre><p><code>Object.defineProperty</code>能保护引入的库不被重新赋值，如果你尝试重写，程序会抛出“TypeError: Cannot assign to read only property”的错误。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"$\"></a>$</h3><p>可能你注意到，我们用“$”开头的属性来存放引入的库。当然，你应该记得还有其他的一些属性也是这样的，比如<code>$refs</code>， <code>$on</code>， <code>$mount</code>。</p>\n<p>这种做法不是强制的，这个前缀就是为了提醒某些昏昏沉沉的开发者（怎么又是你？！），这些属性是公有的，你可以在任何地方使用。反之，某些属性只能在Vue内部使用。</p>\n<p>作为一门以原型为基本的语言，JavaScript中并没有真正的类，所以也就没有所谓的公有，私有变量，或者静态方法。上面这种约定，我觉得是种不错的选择。</p>\n<h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><p>现在你能用<code>this.$libraryName</code>的方式来访问你需要的库了。但，你得保证<code>this</code>的指向。如果你在回调函数中使用<code>this</code>，通常这个<code>this</code>不再指向Vue实例。</p>\n<p>箭头函数是解决这个问题的好方法。</p>\n<pre><code>this.$http.get(&apos;/&apos;).then(res =&gt; {\n  if (res.status !== 200) {\n    this.$http.get(&apos;/&apos;) // etc\n    // Only works in a fat arrow callback.\n  }\n});\n</code></pre><h2 id=\"写成插件\"><a href=\"#写成插件\" class=\"headerlink\" title=\"写成插件\"></a>写成插件</h2><p>如果你在项目的很多地方都用了某个库，或者你希望全局可用，你可以构建自己的Vue插件。</p>\n<p>插件能化繁为简，能让你像下面这样很简单地引入自己想要的库：</p>\n<pre><code>import MyLibraryPlugin from &apos;my-library-plugin&apos;;\nVue.use(MyLibraryPlugin);\n</code></pre><p>就像Vue Route，Vuex等插件一样，我们的库仅仅需要两行，就能在任何地方使用了。</p>\n<h3 id=\"如何写插件\"><a href=\"#如何写插件\" class=\"headerlink\" title=\"如何写插件\"></a>如何写插件</h3><p>首先，创建一个文件。本例中，我将引入一个Axios库的插件。我们就把这个文件命名为<code>axios.js</code>吧。</p>\n<p>最关键的地方在于，我们需要暴露一个将Vue构造器作为第一个参数的<code>install</code>方法。</p>\n<p><strong>axios.js</strong></p>\n<pre><code>export default {\n  install: function(Vue) {\n    // Do stuff\n  }\n}\n</code></pre><p>然后我们可以用之前的方式将库添加到Vue的原型对象上：</p>\n<p><strong>axios.js</strong></p>\n<pre><code>import axios from &apos;axios&apos;;\n\nexport default {\n  install: function(Vue) {\n    Object.defineProperty(Vue.prototype, &apos;$http&apos;, { value: axios });\n  }\n}\n</code></pre><p>接着我们只需要Vue实例的<code>use</code>方法就能将这个库引入整个项目了。我们像下面代码一样简单引入：</p>\n<p><strong>entry.js</strong></p>\n<pre><code>import AxiosPlugin from &apos;./axios.js&apos;;\nVue.use(AxiosPlugin);\n\nnew Vue({\n  created() {\n    console.log(this.$http ? &apos;Axios works!&apos; : &apos;Uh oh..&apos;);\n  }\n})\n</code></pre><h2 id=\"插件参数设置\"><a href=\"#插件参数设置\" class=\"headerlink\" title=\"插件参数设置\"></a>插件参数设置</h2><p>插件的<code>install</code>方法还可以接受其他的可选参数。有些开发者可能不喜欢Axios实例对象的方法名<code>$http</code>，因为Vue resource插件的方法名也是这个。然后，让我们利用第二个参数来修改它。</p>\n<p><strong>axios.js</strong></p>\n<pre><code>import axios from &apos;axios&apos;;\n\nexport default {\n  install: function(Vue, name = &apos;$http&apos;) {\n    Object.defineProperty(Vue.prototype, name, { value: axios });\n  }\n}\n</code></pre><p><strong>entry.js</strong></p>\n<pre><code>import AxiosPlugin from &apos;./axios.js&apos;;\nVue.use(AxiosPlugin, &apos;$axios&apos;);\n\nnew Vue({\n  created() {\n    console.log(this.$axios ? &apos;Axios works!&apos; : &apos;Uh oh..&apos;);\n  }\n})\n</code></pre><p>当然上面，我们可以直接在<code>Object.defineProperty</code>的中将<code>name</code>属性写死成<code>$axios</code>。也可以在<code>install</code>方法中引入多个需要的库。</p>\n<p>【译者话】这篇文章浅显易懂，实用小巧。早上看到的，马上就应用在了项目中。对我来说，是涨知识了。你呢？</p>\n","excerpt":"关于本文： 原文地址 翻译地址 译者：野草 在Vue.js应用中，可能需要引入Lodash，Moment，Axios，Async等非常好用的JavaScript库。当项目变得复杂庞大，通常会将代码进行模块化拆分。可能还需要跑在不同的环境下，比如浏览器，服务端。 如何在各个模块和组件文件中引入需要的库呢？ 找到一种简单靠谱的方式，可以省去很多的麻烦。","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://www.ding1996.cn/tags/vue/"}]},{"title":"Express中cookie使用","date":"2017-09-06T01:16:13.000Z","path":"2017/09/06/it-cookies-sesstions/","text":"cookie 和 session 是我们在开发中经常用到的 你真的了解吗？ 区别 cookie session 大小 4k 无限 储存位置 浏览器 服务器 安全级别 不安全 安全 服务端如何向浏览器发送cookie，以express为例发送cookie 1234567const express = require('express');const app = express();app.get('/',function(req,res)&#123; res.cookie('name':'dingsheng') // 发送cookie // 如需要添加参数 请查看官网文档 &#125;) 那么如何读取呢读取cookie需要用到 中间件cookie-parser首先需要去安装 npm install cookie-parser获取cookie 1234567891011const express = require('express');var cookieParser = require('cookie-parser')let app = express();app.use(cookieParser())app.listen(9090);app.get('/',function(req,res)&#123; // 获取cookies 需要使用 var cookieParser = require('cookie-parser') console.log(req.cookies); res.send(req.cookies);&#125;)","content":"<p>cookie 和 session 是我们在开发中经常用到的 你真的了解吗？</p>\n<table>\n<thead>\n<tr>\n<th>区别</th>\n<th>cookie</th>\n<th>session</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>大小</td>\n<td>4k</td>\n<td>无限</td>\n</tr>\n<tr>\n<td>储存位置</td>\n<td>浏览器</td>\n<td>服务器</td>\n</tr>\n<tr>\n<td>安全级别</td>\n<td>不安全</td>\n<td>安全</td>\n</tr>\n</tbody>\n</table>\n<p>服务端如何向浏览器发送cookie，以express为例<br><a href=\"http://www.expressjs.com.cn/4x/api.html#res.cookie\" target=\"_blank\" rel=\"noopener\">发送cookie</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    res.cookie(<span class=\"string\">'name'</span>:<span class=\"string\">'dingsheng'</span>)  <span class=\"comment\">// 发送cookie</span></span><br><span class=\"line\">   <span class=\"comment\">//  如需要添加参数 请查看官网文档    </span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>那么如何读取呢</strong><br>读取cookie需要用到 中间件cookie-parser<br>首先需要去安装 npm install cookie-parser<br><a href=\"http://www.expressjs.com.cn/4x/api.html#req.cookies\" target=\"_blank\" rel=\"noopener\">获取cookie</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-parser'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> app = express();</span><br><span class=\"line\">app.use(cookieParser())</span><br><span class=\"line\">app.listen(<span class=\"number\">9090</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//  获取cookies  需要使用 var cookieParser = require('cookie-parser')</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(req.cookies);</span><br><span class=\"line\">  res.send(req.cookies);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","excerpt":"","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"}]},{"title":"node学习笔记","date":"2017-09-05T01:14:38.000Z","path":"2017/09/05/it-node-learn-01/","text":"什么是nodejs Node.js是一个能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境。Node.js由Node.js基金会持有和维护[3]，并与Linux基金会有合作关系[4]。Node.js采用Google开发的V8运行代码，使用事件驱动、非阻塞和异步输入输出模型等技术来提高性能，可优化应用程序的传输量和规模。这些技术通常用于数据密集的事实应用程序。 学习一门语言首先要掌握如何愉快的输出hello world 1234567var http = require('http');var server = http.createServer(function(req,res)&#123; console.log(res); res.write('hellow world'); res.end();&#125;)server.listen(9090); 这段代码复制到index.js文件中运行下面代码输入localhost:9090 即可看到hello world；在终端中运行 1node index.js 作为一个服务器肯定要能获取到浏览器的get和post参数 12345678910111213141516171819202122232425262728293031// 作为一个服务器肯定需要能获取到get和post参数// 如何获取浏览器get参数var http = require('http');let url = require('url');// url.parse() 方法会解析一个 URL 字符串并返回一个 URL 对象。var server = http.createServer(function(req,res)&#123; let urlLib = url.parse(req.url,true); let GET = urlLib.query; // Url &#123; // protocol: null, // slashes: null, // auth: null, // host: null, // port: null, // hostname: null, // hash: null, // search: '?act=add', // query: &#123; act: 'add' &#125;, // pathname: '/index', // path: '/index?act=add', // href: '/index?act=add' // &#125;console.log(GET); res.end();&#125;)server.listen(9090); node常用模块 http http.createServer querystring qs.parse(str) url url.parse(req.url,true) fs fs.readFile node模块化http://nodejs.cn/api/modules.html 文档导出一个变量使用 export导出一个function 使用 module.export;在引入模块中需要注意举个列子 require(‘http’) 这种是从 node_modules文件中查找，如果是想引入 项目文件夹里面的 需要require(‘./http’) 这样是找文件","content":"<p>什么是nodejs</p>\n<blockquote>\n<p>Node.js是一个能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境。Node.js由Node.js基金会持有和维护[3]，并与Linux基金会有合作关系[4]。Node.js采用Google开发的V8运行代码，使用事件驱动、非阻塞和异步输入输出模型等技术来提高性能，可优化应用程序的传输量和规模。这些技术通常用于数据密集的事实应用程序。</p>\n</blockquote>\n<p>学习一门语言首先要掌握如何愉快的输出hello world </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  res.write(<span class=\"string\">'hellow world'</span>);</span><br><span class=\"line\">  res.end();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">server.listen(<span class=\"number\">9090</span>);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>这段代码复制到index.js文件中运行下面代码输入localhost:9090 即可看到hello world；<br>在终端中运行 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node index.js</span><br></pre></td></tr></table></figure>\n<p>作为一个服务器肯定要能获取到浏览器的get和post参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作为一个服务器肯定需要能获取到get和post参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  如何获取浏览器get参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</span><br><span class=\"line\"><span class=\"comment\">// url.parse() 方法会解析一个 URL 字符串并返回一个 URL 对象。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> urlLib = url.parse(req.url,<span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> GET = urlLib.query;</span><br><span class=\"line\">  <span class=\"comment\">// Url &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   protocol: null,</span></span><br><span class=\"line\">  <span class=\"comment\">//   slashes: null,</span></span><br><span class=\"line\">  <span class=\"comment\">//   auth: null,</span></span><br><span class=\"line\">  <span class=\"comment\">//   host: null,</span></span><br><span class=\"line\">  <span class=\"comment\">//   port: null,</span></span><br><span class=\"line\">  <span class=\"comment\">//   hostname: null,</span></span><br><span class=\"line\">  <span class=\"comment\">//   hash: null,</span></span><br><span class=\"line\">  <span class=\"comment\">//   search: '?act=add',</span></span><br><span class=\"line\">  <span class=\"comment\">//   query: &#123; act: 'add' &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   pathname: '/index',</span></span><br><span class=\"line\">  <span class=\"comment\">//   path: '/index?act=add',</span></span><br><span class=\"line\">  <span class=\"comment\">//   href: '/index?act=add'</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(GET);</span><br><span class=\"line\"></span><br><span class=\"line\">  res.end();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">server.listen(<span class=\"number\">9090</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"node常用模块\"><a href=\"#node常用模块\" class=\"headerlink\" title=\"node常用模块\"></a><strong>node常用模块</strong></h3><ul>\n<li>http  http.createServer</li>\n<li>querystring qs.parse(str)</li>\n<li>url   url.parse(req.url,true)</li>\n<li>fs  fs.readFile</li>\n</ul>\n<h3 id=\"node模块化\"><a href=\"#node模块化\" class=\"headerlink\" title=\"node模块化\"></a><strong>node模块化</strong></h3><p><a href=\"http://nodejs.cn/api/modules.html\" target=\"_blank\" rel=\"noopener\">http://nodejs.cn/api/modules.html</a>  文档<br>导出一个变量使用 export<br>导出一个function 使用 module.export;<br><strong>在引入模块中需要注意</strong><br>举个列子 require(‘http’)  这种是从 node_modules文件中查找，如果是想引入 项目文件夹里面的 需要require(‘./http’) 这样是找文件</p>\n","excerpt":"什么是nodejs Node.js是一个能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境。Node.js由Node.js基金会持有和维护[3]，并与Linux基金会有合作关系[4]。Node.js采用Google开发的V8运行代码，使用事件驱动、非阻塞和异步输入输出模型等技术来提高性能，可优化应用程序的传输量和规模。这些技术通常用于数据密集的事实应用程序。 学习一门语言首先要掌握如何愉快的输出hello world 1234567var http = require('http');var server = http.createServer(function(req,res)&#123; console.log(res); res.write('hellow world'); res.end();&#125;)server.listen(9090);","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"},{"name":"后台","slug":"后台","permalink":"http://www.ding1996.cn/tags/后台/"}]},{"title":"node.js下mongoose简单操作实例","date":"2017-08-28T09:31:57.000Z","path":"2017/08/28/it-node-mongoose/","text":"转载原文地址 https://cnodejs.org/topic/51ff720b44e76d216afe34d9 Mongoose API : http://mongoosejs.com/docs/api.html 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109// mongoose 链接var mongoose = require('mongoose');var db = mongoose.createConnection('mongodb://127.0.0.1:27017/NodeJS'); // 链接错误db.on('error', function(error) &#123; console.log(error);&#125;);// Schema 结构var mongooseSchema = new mongoose.Schema(&#123; username : &#123;type : String, default : '匿名用户'&#125;, title : &#123;type : String&#125;, content : &#123;type : String&#125;, time : &#123;type : Date, default: Date.now&#125;, age : &#123;type : Number&#125;&#125;);// 添加 mongoose 实例方法mongooseSchema.methods.findbyusername = function(username, callback) &#123; return this.model('mongoose').find(&#123;username: username&#125;, callback);&#125;// 添加 mongoose 静态方法，静态方法在Model层就能使用mongooseSchema.statics.findbytitle = function(title, callback) &#123; return this.model('mongoose').find(&#123;title: title&#125;, callback);&#125;// modelvar mongooseModel = db.model('mongoose', mongooseSchema);// 增加记录 基于 entity 操作var doc = &#123;username : 'emtity_demo_username', title : 'emtity_demo_title', content : 'emtity_demo_content'&#125;;var mongooseEntity = new mongooseModel(doc);mongooseEntity.save(function(error) &#123; if(error) &#123; console.log(error); &#125; else &#123; console.log('saved OK!'); &#125; // 关闭数据库链接 db.close();&#125;);// 增加记录 基于model操作var doc = &#123;username : 'model_demo_username', title : 'model_demo_title', content : 'model_demo_content'&#125;;mongooseModel.create(doc, function(error)&#123; if(error) &#123; console.log(error); &#125; else &#123; console.log('save ok'); &#125; // 关闭数据库链接 db.close();&#125;);// 修改记录mongooseModel.update(conditions, update, options, callback);var conditions = &#123;username : 'model_demo_username'&#125;;var update = &#123;$set : &#123;age : 27, title : 'model_demo_title_update'&#125;&#125;;var options = &#123;upsert : true&#125;;mongooseModel.update(conditions, update, options, function(error)&#123; if(error) &#123; console.log(error); &#125; else &#123; console.log('update ok!'); &#125; //关闭数据库链接 db.close();&#125;);// 查询// 基于实例方法的查询var mongooseEntity = new mongooseModel(&#123;&#125;);mongooseEntity.findbyusername('model_demo_username', function(error, result)&#123; if(error) &#123; console.log(error); &#125; else &#123; console.log(result); &#125; //关闭数据库链接 db.close();&#125;);// 基于静态方法的查询mongooseModel.findbytitle('emtity_demo_title', function(error, result)&#123; if(error) &#123; console.log(error); &#125; else &#123; console.log(result); &#125; //关闭数据库链接 db.close();&#125;);// mongoose findvar criteria = &#123;title : 'emtity_demo_title'&#125;; // 查询条件var fields = &#123;title : 1, content : 1, time : 1&#125;; // 待返回的字段var options = &#123;&#125;;mongooseModel.find(criteria, fields, options, function(error, result)&#123; if(error) &#123; console.log(error); &#125; else &#123; console.log(result); &#125; //关闭数据库链接 db.close();&#125;);// 删除记录var conditions = &#123;username: 'emtity_demo_username'&#125;;mongooseModel.remove(conditions, function(error)&#123; if(error) &#123; console.log(error); &#125; else &#123; console.log('delete ok!'); &#125; //关闭数据库链接 db.close();&#125;);","content":"<blockquote>\n<p>转载原文地址 <a href=\"https://cnodejs.org/topic/51ff720b44e76d216afe34d9\" target=\"_blank\" rel=\"noopener\">https://cnodejs.org/topic/51ff720b44e76d216afe34d9</a></p>\n</blockquote>\n<p>Mongoose API : <a href=\"http://mongoosejs.com/docs/api.html\" target=\"_blank\" rel=\"noopener\">http://mongoosejs.com/docs/api.html</a></p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mongoose 链接</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> db       = mongoose.createConnection(<span class=\"string\">'mongodb://127.0.0.1:27017/NodeJS'</span>); </span><br><span class=\"line\"><span class=\"comment\">// 链接错误</span></span><br><span class=\"line\">db.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Schema 结构</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongooseSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">    username : &#123;<span class=\"attr\">type</span> : <span class=\"built_in\">String</span>, <span class=\"attr\">default</span> : <span class=\"string\">'匿名用户'</span>&#125;,</span><br><span class=\"line\">    title    : &#123;<span class=\"attr\">type</span> : <span class=\"built_in\">String</span>&#125;,</span><br><span class=\"line\">    content  : &#123;<span class=\"attr\">type</span> : <span class=\"built_in\">String</span>&#125;,</span><br><span class=\"line\">    time     : &#123;<span class=\"attr\">type</span> : <span class=\"built_in\">Date</span>, <span class=\"attr\">default</span>: <span class=\"built_in\">Date</span>.now&#125;,</span><br><span class=\"line\">    age      : &#123;<span class=\"attr\">type</span> : <span class=\"built_in\">Number</span>&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 添加 mongoose 实例方法</span></span><br><span class=\"line\">mongooseSchema.methods.findbyusername = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">username, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.model(<span class=\"string\">'mongoose'</span>).find(&#123;<span class=\"attr\">username</span>: username&#125;, callback);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 添加 mongoose 静态方法，静态方法在Model层就能使用</span></span><br><span class=\"line\">mongooseSchema.statics.findbytitle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">title, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.model(<span class=\"string\">'mongoose'</span>).find(&#123;<span class=\"attr\">title</span>: title&#125;, callback);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// model</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongooseModel = db.model(<span class=\"string\">'mongoose'</span>, mongooseSchema);</span><br><span class=\"line\"><span class=\"comment\">// 增加记录 基于 entity 操作</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> doc = &#123;<span class=\"attr\">username</span> : <span class=\"string\">'emtity_demo_username'</span>, <span class=\"attr\">title</span> : <span class=\"string\">'emtity_demo_title'</span>, <span class=\"attr\">content</span> : <span class=\"string\">'emtity_demo_content'</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mongooseEntity = <span class=\"keyword\">new</span> mongooseModel(doc);</span><br><span class=\"line\">mongooseEntity.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'saved OK!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 关闭数据库链接</span></span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 增加记录 基于model操作</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> doc = &#123;<span class=\"attr\">username</span> : <span class=\"string\">'model_demo_username'</span>, <span class=\"attr\">title</span> : <span class=\"string\">'model_demo_title'</span>, <span class=\"attr\">content</span> : <span class=\"string\">'model_demo_content'</span>&#125;;</span><br><span class=\"line\">mongooseModel.create(doc, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'save ok'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 关闭数据库链接</span></span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 修改记录</span></span><br><span class=\"line\">mongooseModel.update(conditions, update, options, callback);</span><br><span class=\"line\"><span class=\"keyword\">var</span> conditions = &#123;<span class=\"attr\">username</span> : <span class=\"string\">'model_demo_username'</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> update     = &#123;<span class=\"attr\">$set</span> : &#123;<span class=\"attr\">age</span> : <span class=\"number\">27</span>, <span class=\"attr\">title</span> : <span class=\"string\">'model_demo_title_update'</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> options    = &#123;<span class=\"attr\">upsert</span> : <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">mongooseModel.update(conditions, update, options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'update ok!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//关闭数据库链接</span></span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 查询</span></span><br><span class=\"line\"><span class=\"comment\">// 基于实例方法的查询</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongooseEntity = <span class=\"keyword\">new</span> mongooseModel(&#123;&#125;);</span><br><span class=\"line\">mongooseEntity.findbyusername(<span class=\"string\">'model_demo_username'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, result</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//关闭数据库链接</span></span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 基于静态方法的查询</span></span><br><span class=\"line\">mongooseModel.findbytitle(<span class=\"string\">'emtity_demo_title'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, result</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//关闭数据库链接</span></span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// mongoose find</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> criteria = &#123;<span class=\"attr\">title</span> : <span class=\"string\">'emtity_demo_title'</span>&#125;; <span class=\"comment\">// 查询条件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fields   = &#123;<span class=\"attr\">title</span> : <span class=\"number\">1</span>, <span class=\"attr\">content</span> : <span class=\"number\">1</span>, <span class=\"attr\">time</span> : <span class=\"number\">1</span>&#125;; <span class=\"comment\">// 待返回的字段</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> options  = &#123;&#125;;</span><br><span class=\"line\">mongooseModel.find(criteria, fields, options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, result</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//关闭数据库链接</span></span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 删除记录</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> conditions = &#123;<span class=\"attr\">username</span>: <span class=\"string\">'emtity_demo_username'</span>&#125;;</span><br><span class=\"line\">mongooseModel.remove(conditions, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'delete ok!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//关闭数据库链接</span></span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","excerpt":"转载原文地址 https://cnodejs.org/topic/51ff720b44e76d216afe34d9 Mongoose API : http://mongoosejs.com/docs/api.html","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"}]},{"title":"mongodb使用","date":"2017-08-25T01:49:08.000Z","path":"2017/08/25/it-mongodb/","text":"安装官网 https://www.mongodb.com/手册 https://docs.mongodb.org/manual/ mac 安装 1brew install mongodb 开机123mongod --dbpath path #开机mongo #使用mongoimport #导入 操作命令 show dbs // 列出所有数据库 use 数据库名字 // 使用数据库 没有就自动新建 db 查看当前所在数据库 db.student.insert({‘namae’:’dingsheng’}) // 插入数据 没有student 这个集合就自动新建 show collections // 查看数据库集合 db.dropDatabase() // 删除当前所在数据库","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>官网 <a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/</a><br>手册 <a href=\"https://docs.mongodb.org/manual/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.org/manual/</a></p>\n<p>mac 安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install mongodb</span><br></pre></td></tr></table></figure>\n<h3 id=\"开机\"><a href=\"#开机\" class=\"headerlink\" title=\"开机\"></a>开机</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --dbpath path #开机</span><br><span class=\"line\">mongo #使用</span><br><span class=\"line\">mongoimport #导入</span><br></pre></td></tr></table></figure>\n<h3 id=\"操作命令\"><a href=\"#操作命令\" class=\"headerlink\" title=\"操作命令\"></a>操作命令</h3><ul>\n<li>show dbs // 列出所有数据库</li>\n<li>use 数据库名字 // 使用数据库 没有就自动新建</li>\n<li>db 查看当前所在数据库</li>\n<li>db.student.insert({‘namae’:’dingsheng’}) // 插入数据 没有student 这个集合就自动新建</li>\n<li>show collections // 查看数据库集合</li>\n<li>db.dropDatabase() // 删除当前所在数据库 </li>\n</ul>\n","excerpt":"","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"},{"name":"后台","slug":"后台","permalink":"http://www.ding1996.cn/tags/后台/"}]},{"title":"vscode插件","date":"2017-08-17T02:46:54.000Z","path":"2017/08/17/it-vue-annotation/","text":"好的开发工具能大大提升开发效率，目前我在用的是vscode 这里推荐些我目前常用的插件 Beautify 代码格式化工具 Spacgray VSCode 主题 Vetur vue代码高亮格式化插件 vue 提示vue语法 下面是我的一些配置 123456789101112131415161718192021222324252627282930313233// 将设置放入此文件中以覆盖默认设置&#123; \"editor.fontSize\": 12, \"workbench.iconTheme\": \"vscode-great-icons\", \"workbench.colorTheme\": \"Spacegray Eighties Dark\", \"workbench.welcome.enabled\": true, \"extensions.ignoreRecommendations\": false, \"beautify.language\": &#123; \"js\": &#123; \"type\": [ \"javascript\", \"json\" ], \"filename\": [ \".jshintrc\", \".jsbeautify\" ] &#125;, \"css\": [ \"css\", \"scss\" ], \"html\": [ \"htm\", \"html\", \"vue\" ] &#125;, \"emmet.syntaxProfiles\": &#123; \"vue\":\"html\", \"vue-html\":\"html\" &#125;&#125;","content":"<blockquote>\n<p>好的开发工具能大大提升开发效率，目前我在用的是vscode 这里推荐些我目前常用的插件</p>\n</blockquote>\n<ol>\n<li>Beautify 代码格式化工具</li>\n<li>Spacgray VSCode 主题</li>\n<li>Vetur vue代码高亮格式化插件</li>\n<li>vue 提示vue语法</li>\n</ol>\n<a id=\"more\"></a>\n<p>下面是我的一些配置</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将设置放入此文件中以覆盖默认设置</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"editor.fontSize\"</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">    <span class=\"string\">\"workbench.iconTheme\"</span>: <span class=\"string\">\"vscode-great-icons\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"workbench.colorTheme\"</span>: <span class=\"string\">\"Spacegray Eighties Dark\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"workbench.welcome.enabled\"</span>: true,</span><br><span class=\"line\">    <span class=\"string\">\"extensions.ignoreRecommendations\"</span>: false,</span><br><span class=\"line\">    <span class=\"string\">\"beautify.language\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"js\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"type\"</span>: [</span><br><span class=\"line\">                <span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"json\"</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">\"filename\"</span>: [</span><br><span class=\"line\">                <span class=\"string\">\".jshintrc\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\".jsbeautify\"</span></span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"css\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"css\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"scss\"</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">\"html\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"htm\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"vue\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"emmet.syntaxProfiles\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"vue\"</span>:<span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"vue-html\"</span>:<span class=\"string\">\"html\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"好的开发工具能大大提升开发效率，目前我在用的是vscode 这里推荐些我目前常用的插件 Beautify 代码格式化工具 Spacgray VSCode 主题 Vetur vue代码高亮格式化插件 vue 提示vue语法","categories":[],"tags":[{"name":"编辑器","slug":"编辑器","permalink":"http://www.ding1996.cn/tags/编辑器/"}]},{"title":"17-08-14 随笔","date":"2017-08-14T01:28:13.000Z","path":"2017/08/14/17-08-14/","text":"1 周末两天匆匆的过去了，今天又到了周一新的一周开始了~放假两天在家宅了两天看看电影睡睡懒觉玩玩游戏，时间用在最多的也就是游戏了—王者荣耀 。虽然我知道玩游戏很不好 浪费时间 挥霍生命 但是却还一直在玩为什么呢？因为我也有个王者梦，在周末两天的努力下终于把段位打到至尊星耀 虽然离王者还有一小段的距离大但是我已经满足了，准备卸载游戏让这个排名在游戏中闪耀。 2 重温了遍肖生克的救赎，第一次看这电影的时候还是在上大专的时候已经有四五年了吧，那个时候就只是当做电影看了遍也没有什么感悟，这次看完有很多感悟。肖生克的救赎—描述了一个年轻有为的银行副总裁因为被陷害入狱，开启了对自己救赎的生活，对自由的向往20年如一日不怕艰难险阻，凭着自己的专业和睿智最终救赎了自己，惩罚了监狱长一伙。 电影总结 既来之则安之，不管在什么环境都不能抱怨，要学会去适应环境( 电影开头一个胖子因为适应不了牢狱生活哭哭啼啼结果被人打死 ) 要么忙着生活，要么忙着去死（既然想活下去就不要整天浑浑噩噩要实现出自己的价值） 做什么事情都要坚持（电影中主人公安迪用个小锤子挖了20年最终实现了自由） 知识是拿不走的武器，自己的技能要不断去提升（安迪正是因为自己的专业技能帮助狱长逃税，使自己在牢狱减少了些牢狱之苦） 找到自己的队友 （电影中如果安迪没有找到瑞德这样的朋友在弄不到一些工具可能也离不开肖生克监狱）","content":"<p>1 周末两天匆匆的过去了，今天又到了周一新的一周开始了~放假两天在家宅了两天看看电影睡睡懒觉玩玩游戏，时间用在最多的也就是游戏了—王者荣耀 。虽然我知道玩游戏很不好 浪费时间 挥霍生命 但是却还一直在玩为什么呢？因为我也有个王者梦，在周末两天的努力下终于把段位打到至尊星耀 虽然离王者还有一小段的距离大但是我已经满足了，准备卸载游戏让这个排名在游戏中闪耀。</p>\n<a id=\"more\"></a>\n<p>2 重温了遍肖生克的救赎，第一次看这电影的时候还是在上大专的时候已经有四五年了吧，那个时候就只是当做电影看了遍也没有什么感悟，这次看完有很多感悟。肖生克的救赎—描述了一个年轻有为的银行副总裁因为被陷害入狱，开启了对自己救赎的生活，对自由的向往20年如一日不怕艰难险阻，凭着自己的专业和睿智最终救赎了自己，惩罚了监狱长一伙。</p>\n<p><strong>电影总结</strong></p>\n<ul>\n<li>既来之则安之，不管在什么环境都不能抱怨，要学会去适应环境( 电影开头一个胖子因为适应不了牢狱生活哭哭啼啼结果被人打死 )</li>\n<li>要么忙着生活，要么忙着去死（既然想活下去就不要整天浑浑噩噩要实现出自己的价值）</li>\n<li>做什么事情都要坚持（电影中主人公安迪用个小锤子挖了20年最终实现了自由）</li>\n<li>知识是拿不走的武器，自己的技能要不断去提升（安迪正是因为自己的专业技能帮助狱长逃税，使自己在牢狱减少了些牢狱之苦）</li>\n<li>找到自己的队友 （电影中如果安迪没有找到瑞德这样的朋友在弄不到一些工具可能也离不开肖生克监狱）</li>\n</ul>\n","excerpt":"1 周末两天匆匆的过去了，今天又到了周一新的一周开始了~放假两天在家宅了两天看看电影睡睡懒觉玩玩游戏，时间用在最多的也就是游戏了—王者荣耀 。虽然我知道玩游戏很不好 浪费时间 挥霍生命 但是却还一直在玩为什么呢？因为我也有个王者梦，在周末两天的努力下终于把段位打到至尊星耀 虽然离王者还有一小段的距离大但是我已经满足了，准备卸载游戏让这个排名在游戏中闪耀。","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://www.ding1996.cn/tags/随笔/"}]},{"title":"2017-8-11 随笔","date":"2017-08-11T07:16:26.000Z","path":"2017/08/11/17-08-11/","text":"发现这几年前端的要求以及从业人员明显大幅度提升记得15年刚工作的时候会个html css 会做简单的静态页面就能找到一份工作，然饿就一两年的时间前端发生了翻天覆地的变化从刚工作会jquery就能开发大项目到现在 前端三大框架 Angular Vue React, 以及每个框架的技术栈 经过时间的洗礼 明显angular的用户数量慢慢的被vue 和 react 抢去了不少 ！ 由于vue上手容易今年开始学习了vue 接触了 vue技术栈发现这些新的框架确实比jquery好用 以前些项目都是操作DOM 绑定事件 拼字符串 去渲染页面 用了vue是数据驱动的 写好模板直接通过指令去循环 只要操作数据就行了 工作效率已经代码可维护性明显提高~ 公司项目不是很忙，多出来的时间想学点东西,vue感觉了解的差不多了想学nodejs做全栈又想学Python又想学数据分析~听同学说现在AI是未来趋势又想去AI 结果时间一天天的过去貌似什么都没学会就是简单的了解了下，在上海这大都市生活压力挺大 感觉每天都是在混日子没有成长很快就会被淘汰轻易的就能被别人取代~ 想想每个月还要还房贷，身体内的那懒洋洋的灵魂又被生活的压力打败，最近比较浮躁决定静下心来，之前每次说去学习却一直没有定个明确的目标所以就和无头苍蝇一样撞来撞去各种碰壁~ 最近看了看前端的招聘要求发现外面大多公司都在用React框架决定近期好好的把React学习下 学习目标 学习基础语法 学习api 动手实践去习惯React 做个简单的豆瓣电影项目 语言组织能力不是很强，以后还是要多多总结复盘来提升自己的写作编码能力~","content":"<p>发现这几年前端的要求以及从业人员明显大幅度提升记得15年刚工作的时候会个html css 会做简单的静态页面就能找到一份工作，然饿就一两年的时间前端发生了翻天覆地的变化从刚工作会jquery就能开发大项目到现在 前端三大框架 Angular Vue React, 以及每个框架的技术栈 经过时间的洗礼 明显angular的用户数量慢慢的被vue 和 react 抢去了不少 ！ 由于vue上手容易今年开始学习了vue 接触了 vue技术栈发现这些新的框架确实比jquery好用 以前些项目都是操作DOM 绑定事件 拼字符串 去渲染页面 用了vue是数据驱动的 写好模板直接通过指令去循环 只要操作数据就行了 工作效率已经代码可维护性明显提高~</p>\n<a id=\"more\"></a>\n<p>公司项目不是很忙，多出来的时间想学点东西,vue感觉了解的差不多了想学nodejs做全栈又想学Python又想学数据分析~听同学说现在AI是未来趋势又想去AI 结果时间一天天的过去貌似什么都没学会就是简单的了解了下，在上海这大都市生活压力挺大 感觉每天都是在混日子没有成长很快就会被淘汰轻易的就能被别人取代~ </p>\n<p>想想每个月还要还房贷，身体内的那懒洋洋的灵魂又被生活的压力打败，最近比较浮躁决定静下心来，之前每次说去学习却一直没有定个明确的目标所以就和无头苍蝇一样撞来撞去各种碰壁~ 最近看了看前端的招聘要求发现外面大多公司都在用React框架决定近期好好的把React学习下</p>\n<h3 id=\"学习目标\"><a href=\"#学习目标\" class=\"headerlink\" title=\"学习目标\"></a>学习目标</h3><ul>\n<li>学习基础语法</li>\n<li>学习api</li>\n<li>动手实践去习惯React</li>\n<li>做个简单的豆瓣电影项目</li>\n</ul>\n<p>语言组织能力不是很强，以后还是要多多总结复盘来提升自己的写作编码能力~</p>\n","excerpt":"发现这几年前端的要求以及从业人员明显大幅度提升记得15年刚工作的时候会个html css 会做简单的静态页面就能找到一份工作，然饿就一两年的时间前端发生了翻天覆地的变化从刚工作会jquery就能开发大项目到现在 前端三大框架 Angular Vue React, 以及每个框架的技术栈 经过时间的洗礼 明显angular的用户数量慢慢的被vue 和 react 抢去了不少 ！ 由于vue上手容易今年开始学习了vue 接触了 vue技术栈发现这些新的框架确实比jquery好用 以前些项目都是操作DOM 绑定事件 拼字符串 去渲染页面 用了vue是数据驱动的 写好模板直接通过指令去循环 只要操作数据就行了 工作效率已经代码可维护性明显提高~","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://www.ding1996.cn/tags/随笔/"}]},{"title":"Mac使用tree生成目录结构","date":"2017-08-07T01:53:13.000Z","path":"2017/08/07/it-tree-shiyong/","text":"程序员经常会有需求，需要列出项目的结构树。Mac或者Linux下可以使用tree列出项目结构，如下图这种： 123456789101112131415├── build├── config├── docs│ └── static│ ├── css│ └── js├── src│ ├── assets│ ├── components│ ├── store│ │ └── modules│ └── views│ ├── book│ └── movie└── static 使用起来也非常简单。Mac下可以使用brew install tree进行安装。安装后，在terminal中输入tree -a便可以查看某个文件夹下的所有文件。 常用的命令当然了，我们的需求肯定不止列出所有文件这么简单。下面介绍几个常用的命令 tree -d 只显示文件夹； tree -L n 显示项目的层级。n表示层级数。比如想要显示项目三层结构，可以用tree -l 3； tree -I pattern 用于过滤不想要显示的文件或者文件夹。比如你想要过滤项目中的node_modules文件夹，可以使用tree -I “node_modules”； tree &gt; tree.md 将项目结构输出到tree.md这个文件。 举个例子，如果我们要显示某个项目下3层的所有文件结构，同时又过滤node_modules文件夹，最后输出到tree.md，可以这么写 1tree -L 3 -I \"node_modules\" 结果为： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950.├── README.md├── build│ ├── build.js│ ├── check-versions.js│ ├── dev-client.js│ ├── dev-server.js│ ├── utils.js│ ├── webpack.base.conf.js│ ├── webpack.dev.conf.js│ └── webpack.prod.conf.js├── config│ ├── dev.env.js│ ├── index.js│ └── prod.env.js├── docs│ ├── index.html│ └── static│ ├── css│ └── js├── git.sh├── index.html├── npm-debug.log├── open├── package.json├── src│ ├── App.vue│ ├── assets│ │ ├── list.scss│ │ ├── logo.png│ │ ├── search-btn.png│ │ └── style.scss│ ├── components│ │ ├── Hello.vue│ │ ├── Spinner.vue│ │ └── header.vue│ ├── main.js│ ├── router.js│ ├── store│ │ ├── api.js│ │ ├── modules│ │ ├── store.js│ │ └── types.js│ └── views│ ├── book│ ├── index.vue│ ├── movie│ └── vuex-demo.vue├── static└── tree.md 更多命令的使用可以查看tree –help。","content":"<blockquote>\n<p>程序员经常会有需求，需要列出项目的结构树。Mac或者Linux下可以使用tree列出项目结构，如下图这种：</p>\n</blockquote>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── build</span><br><span class=\"line\">├── config</span><br><span class=\"line\">├── docs</span><br><span class=\"line\">│   └── static</span><br><span class=\"line\">│       ├── css</span><br><span class=\"line\">│       └── js</span><br><span class=\"line\">├── src</span><br><span class=\"line\">│   ├── assets</span><br><span class=\"line\">│   ├── components</span><br><span class=\"line\">│   ├── store</span><br><span class=\"line\">│   │   └── modules</span><br><span class=\"line\">│   └── views</span><br><span class=\"line\">│       ├── book</span><br><span class=\"line\">│       └── movie</span><br><span class=\"line\">└── static</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>使用起来也非常简单。<br>Mac下可以使用brew install tree进行安装。安装后，在terminal中输入tree -a便可以查看某个文件夹下的所有文件。</p>\n<h3 id=\"常用的命令\"><a href=\"#常用的命令\" class=\"headerlink\" title=\"常用的命令\"></a>常用的命令</h3><p>当然了，我们的需求肯定不止列出所有文件这么简单。下面介绍几个常用的命令</p>\n<ul>\n<li>tree -d 只显示文件夹；</li>\n<li>tree -L n 显示项目的层级。n表示层级数。比如想要显示项目三层结构，可以用tree -l 3；</li>\n<li>tree -I pattern 用于过滤不想要显示的文件或者文件夹。比如你想要过滤项目中的node_modules文件夹，可以使用tree -I “node_modules”；</li>\n<li>tree &gt; tree.md 将项目结构输出到tree.md这个文件。</li>\n</ul>\n<p>举个例子，如果我们要显示某个项目下3层的所有文件结构，同时又过滤node_modules文件夹，最后输出到tree.md，可以这么写</p>\n<figure class=\"highlight julia\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tree -L <span class=\"number\">3</span> -<span class=\"literal\">I</span> <span class=\"string\">\"node_modules\"</span></span><br></pre></td></tr></table></figure>\n<p>结果为：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── build</span><br><span class=\"line\">│   ├── build.js</span><br><span class=\"line\">│   ├── check-versions.js</span><br><span class=\"line\">│   ├── dev-client.js</span><br><span class=\"line\">│   ├── dev-server.js</span><br><span class=\"line\">│   ├── utils.js</span><br><span class=\"line\">│   ├── webpack<span class=\"selector-class\">.base</span><span class=\"selector-class\">.conf</span><span class=\"selector-class\">.js</span></span><br><span class=\"line\">│   ├── webpack<span class=\"selector-class\">.dev</span><span class=\"selector-class\">.conf</span><span class=\"selector-class\">.js</span></span><br><span class=\"line\">│   └── webpack<span class=\"selector-class\">.prod</span><span class=\"selector-class\">.conf</span><span class=\"selector-class\">.js</span></span><br><span class=\"line\">├── config</span><br><span class=\"line\">│   ├── dev<span class=\"selector-class\">.env</span><span class=\"selector-class\">.js</span></span><br><span class=\"line\">│   ├── index.js</span><br><span class=\"line\">│   └── prod<span class=\"selector-class\">.env</span><span class=\"selector-class\">.js</span></span><br><span class=\"line\">├── docs</span><br><span class=\"line\">│   ├── index.html</span><br><span class=\"line\">│   └── static</span><br><span class=\"line\">│       ├── css</span><br><span class=\"line\">│       └── js</span><br><span class=\"line\">├── git.sh</span><br><span class=\"line\">├── index.html</span><br><span class=\"line\">├── npm-debug.log</span><br><span class=\"line\">├── open</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── src</span><br><span class=\"line\">│   ├── App.vue</span><br><span class=\"line\">│   ├── assets</span><br><span class=\"line\">│   │   ├── list.scss</span><br><span class=\"line\">│   │   ├── logo.png</span><br><span class=\"line\">│   │   ├── search-btn.png</span><br><span class=\"line\">│   │   └── style.scss</span><br><span class=\"line\">│   ├── components</span><br><span class=\"line\">│   │   ├── Hello.vue</span><br><span class=\"line\">│   │   ├── Spinner.vue</span><br><span class=\"line\">│   │   └── <span class=\"selector-tag\">header</span>.vue</span><br><span class=\"line\">│   ├── main.js</span><br><span class=\"line\">│   ├── router.js</span><br><span class=\"line\">│   ├── store</span><br><span class=\"line\">│   │   ├── api.js</span><br><span class=\"line\">│   │   ├── modules</span><br><span class=\"line\">│   │   ├── store.js</span><br><span class=\"line\">│   │   └── types.js</span><br><span class=\"line\">│   └── views</span><br><span class=\"line\">│       ├── book</span><br><span class=\"line\">│       ├── index.vue</span><br><span class=\"line\">│       ├── movie</span><br><span class=\"line\">│       └── vuex-demo.vue</span><br><span class=\"line\">├── static</span><br><span class=\"line\">└── tree.md</span><br></pre></td></tr></table></figure>\n<p>更多命令的使用可以查看tree –help。</p>\n","excerpt":"程序员经常会有需求，需要列出项目的结构树。Mac或者Linux下可以使用tree列出项目结构，如下图这种： 123456789101112131415├── build├── config├── docs│ └── static│ ├── css│ └── js├── src│ ├── assets│ ├── components│ ├── store│ │ └── modules│ └── views│ ├── book│ └── movie└── static","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"http://www.ding1996.cn/tags/mac/"}]},{"title":"HTML5<Audio标签API整理>","date":"2017-08-01T02:21:52.000Z","path":"2017/08/01/it-audio-api/","text":"只读属性duration —获取媒体文件的播放时长，以s为单位，如果无法获取则为NaN，当触发canplay事件后就可以获取当前总长度startTime—返回起始播放时间，一般是0.0,除非是缓冲过的媒体文件，并一部分内容已经不再缓冲区(此属性好像已经不可用)paused—–判断是否已经暂停，返回true/falseended—–判断是否已经播放完毕，返回true/falseerror—-在发生了错误后，返回错误代码currentSrc –以字符串的形式发挥正在播放或已经加载的文件，对应浏览器在source元素中选择的文件buffered—获取当前缓冲区大小，返回TimeRanges对象，点击更多参考 可控制属性src—-指定音频的文件位置autoplay—是否自动播放preload—-是否预加载loop——是否循环播放controls—-显示或隐藏用户控制界面autobuffer—媒体文件播放前是否进行缓冲加载，如果设置了autoplay，则忽略此特性(此属性好像已经不可用)muted——设置是否静音volume —-在0.0到1.0间的音量值，或查询当前音量值currentTime–以s为单位返回从开始播放到目前所花的时间，也可设置currentTime的值来跳转到特定位置 方法load() —加载音频、视频软件paly() —播放pause()—暂停canPlayType(obj) —-测试饭后指定指定的Mime类型的文件 事件loadstart —客户端开始请求数据progress—-正在播放的时候不停触发，如果暂停不会触发，触发的时间间隔比较大play——play()和autopaly播放时，类似事件onplayingpause—–pause()方法触发时ended—–当结束播放时timeupdate—-当前播放时间发生改变的时候，播放中常用的时间处理，如果暂停不会触发，触发的时间间隔比较小canplaythrough—歌曲已经载入完成canplay —–缓冲至可播放状态，类似事件onloadedmetadataonloadedmetadata—-当元数据（比如分辨率和时长）被加载时运行的脚本 更多属性audioTracks—-返回表示可用音频滚到的AudioTrackList对象。controller—返回表示音频大年媒体控制器的MediaController对象。crossOrigin—设置或返回音频的CORS设置defaultMuted—设置或返回音频默认是否静音defaultPlaybackRate—设置或返回音频的默认播放速度mediaGroup—设置或返回音频叔叔的美肌组合的名称networkState—返回音频的当前网络状态playbackRate—设置或返回音频的播放速度。seekable—返回标识音频可寻址不烦的TimeRanges对象seeking—返回用户当前收正在音频中进行查找。textTracks—返回标识文本滚到的TextTrackList对象 更多方法load()—-重新加载音频元素getStartDate()—-返回新的Date对象，表示当前时间线偏移量。fastSeek()—在音频播放器中指定播放时间。addTextTrack()—-想音频添加新的文本轨道。更多参考：http://caibaojian.com/html5-audio.html","content":"<h3 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性</h3><p>duration —获取媒体文件的播放时长，以s为单位，如果无法获取则为NaN，当触发canplay事件后就可以获取当前总长度<br>startTime—返回起始播放时间，一般是0.0,除非是缓冲过的媒体文件，并一部分内容已经不再缓冲区(此属性好像已经不可用)<br>paused—–判断是否已经暂停，返回true/false<br>ended—–判断是否已经播放完毕，返回true/false<br>error—-在发生了错误后，返回错误代码<br>currentSrc –以字符串的形式发挥正在播放或已经加载的文件，对应浏览器在source元素中选择的文件<br>buffered—获取当前缓冲区大小，返回TimeRanges对象，点击更多参考</p>\n<a id=\"more\"></a>\n<h3 id=\"可控制属性\"><a href=\"#可控制属性\" class=\"headerlink\" title=\"可控制属性\"></a>可控制属性</h3><p>src—-指定音频的文件位置<br>autoplay—是否自动播放<br>preload—-是否预加载<br>loop——是否循环播放<br>controls—-显示或隐藏用户控制界面<br>autobuffer—媒体文件播放前是否进行缓冲加载，如果设置了autoplay，则忽略此特性(此属性好像已经不可用)<br>muted——设置是否静音<br>volume —-在0.0到1.0间的音量值，或查询当前音量值<br>currentTime–以s为单位返回从开始播放到目前所花的时间，也可设置currentTime的值来跳转到特定位置</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p>load() —加载音频、视频软件<br>paly() —播放<br>pause()—暂停<br>canPlayType(obj) —-测试饭后指定指定的Mime类型的文件</p>\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><p>loadstart —客户端开始请求数据<br>progress—-正在播放的时候不停触发，如果暂停不会触发，触发的时间间隔比较大<br>play——play()和autopaly播放时，类似事件onplaying<br>pause—–pause()方法触发时<br>ended—–当结束播放时<br>timeupdate—-当前播放时间发生改变的时候，播放中常用的时间处理，如果暂停不会触发，触发的时间间隔比较小<br>canplaythrough—歌曲已经载入完成<br>canplay —–缓冲至可播放状态，类似事件onloadedmetadata<br>onloadedmetadata—-当元数据（比如分辨率和时长）被加载时运行的脚本</p>\n<h3 id=\"更多属性\"><a href=\"#更多属性\" class=\"headerlink\" title=\"更多属性\"></a>更多属性</h3><p>audioTracks—-返回表示可用音频滚到的AudioTrackList对象。<br>controller—返回表示音频大年媒体控制器的MediaController对象。<br>crossOrigin—设置或返回音频的CORS设置<br>defaultMuted—设置或返回音频默认是否静音<br>defaultPlaybackRate—设置或返回音频的默认播放速度<br>mediaGroup—设置或返回音频叔叔的美肌组合的名称<br>networkState—返回音频的当前网络状态<br>playbackRate—设置或返回音频的播放速度。<br>seekable—返回标识音频可寻址不烦的TimeRanges对象<br>seeking—返回用户当前收正在音频中进行查找。<br>textTracks—返回标识文本滚到的TextTrackList对象</p>\n<h3 id=\"更多方法\"><a href=\"#更多方法\" class=\"headerlink\" title=\"更多方法\"></a>更多方法</h3><p>load()—-重新加载音频元素<br>getStartDate()—-返回新的Date对象，表示当前时间线偏移量。<br>fastSeek()—在音频播放器中指定播放时间。<br>addTextTrack()—-想音频添加新的文本轨道。<br>更多参考：<a href=\"http://caibaojian.com/html5-audio.html\" target=\"_blank\" rel=\"noopener\">http://caibaojian.com/html5-audio.html</a></p>\n","excerpt":"只读属性duration —获取媒体文件的播放时长，以s为单位，如果无法获取则为NaN，当触发canplay事件后就可以获取当前总长度startTime—返回起始播放时间，一般是0.0,除非是缓冲过的媒体文件，并一部分内容已经不再缓冲区(此属性好像已经不可用)paused—–判断是否已经暂停，返回true/falseended—–判断是否已经播放完毕，返回true/falseerror—-在发生了错误后，返回错误代码currentSrc –以字符串的形式发挥正在播放或已经加载的文件，对应浏览器在source元素中选择的文件buffered—获取当前缓冲区大小，返回TimeRanges对象，点击更多参考","categories":[],"tags":[{"name":"html","slug":"html","permalink":"http://www.ding1996.cn/tags/html/"}]},{"title":"Vue keep-alive 使用","date":"2017-07-11T23:03:34.000Z","path":"2017/07/12/it-vue-keep-alive/","text":"keep-alive是什么他是vuejs提供的一个组件keep-alive有什么用keep-alive可以把组件缓存起来提升用户体验减少不不必要的请求keep-alive怎么用 123&lt;keep-alive&gt; &lt;router-view&gt;&lt;/router-view&gt;&lt;/keep-alive&gt; 这样全部的路由都会被缓存起来切换的时候不会重新加载数据如果想要部分路由需要加载怎么做，我们可以通过vuejs的生命周期函数 123456789101112created: function () &#123; console.log(1)&#125;,mounted: function () &#123; console.log(2)&#125;,activated: function () &#123; console.log(3)&#125;,deactivated: function () &#123; console.log(4)&#125;, 当组件被使用的时候activated生命周期函数会被调用，我们只需要把我们需要重新加载的代码放在activeted钩子函数里面即可","content":"<p><strong>keep-alive是什么</strong><br>他是vuejs提供的一个组件<br><strong>keep-alive有什么用</strong><br>keep-alive可以把组件缓存起来提升用户体验减少不不必要的请求<br><strong>keep-alive怎么用</strong></p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;keep-alive&gt;</span><br><span class=\"line\">  &lt;router-view&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>这样全部的路由都会被缓存起来切换的时候不会重新加载数据<br>如果想要部分路由需要加载怎么做，我们可以通过vuejs的生命周期函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">activated: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">deactivated: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>当组件被使用的时候activated生命周期函数会被调用，我们只需要把我们需要重新加载的代码放在activeted钩子函数里面即可</p>\n","excerpt":"keep-alive是什么他是vuejs提供的一个组件keep-alive有什么用keep-alive可以把组件缓存起来提升用户体验减少不不必要的请求keep-alive怎么用","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://www.ding1996.cn/tags/vue/"}]},{"title":"H5-audio标签的基础使用","date":"2017-07-10T06:46:52.000Z","path":"2017/07/10/it-audi-attr/","text":"这两天在做音乐播放器使用的是h5的audio标签~之前没这么接触过这个下面列出下audio的常用属性和方法 属性 duration // 获取视频的总时间 返回秒 currenttime // vuido的当前时间 方法 play // 播放 pause // 暂停 事件 ontimeupdate 事件。在用户开始播放视频，或者移动视频的播放位置时触发函数， ended vudio播放完成触发该函数 canplay vudio加载完成触发该函数","content":"<blockquote>\n<p>这两天在做音乐播放器使用的是h5的audio标签~<br>之前没这么接触过这个下面列出下audio的常用属性和方法</p>\n</blockquote>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li>duration // 获取视频的总时间 返回秒</li>\n<li>currenttime // vuido的当前时间</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><ul>\n<li>play // 播放</li>\n<li>pause // 暂停</li>\n</ul>\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><ul>\n<li>ontimeupdate 事件。在用户开始播放视频，或者移动视频的播放位置时触发函数，</li>\n<li>ended   vudio播放完成触发该函数</li>\n<li>canplay vudio加载完成触发该函数</li>\n</ul>\n","excerpt":"这两天在做音乐播放器使用的是h5的audio标签~之前没这么接触过这个下面列出下audio的常用属性和方法 属性 duration // 获取视频的总时间 返回秒 currenttime // vuido的当前时间","categories":[],"tags":[{"name":"html","slug":"html","permalink":"http://www.ding1996.cn/tags/html/"}]},{"title":"vuex理解","date":"2017-07-09T13:26:07.000Z","path":"2017/07/09/it-vuex-learn/","text":"之前使用vuex一直都是半懂半不懂的今天系统的了解了下vuex终于理解差不多了下面分享下个人理解 vuex是什么？vuex是一个状态管理器把所有状态都存在store这个容器里面 vuex能做什么？vuex能够很好的解决组件中的通信，让数据更清晰明了，更容易管理。 vuex怎么使用？1 安装1npm install vuex --save 2 在一个模块化的打包系统中，您必须显式地通过 Vue.use() 来安装 Vuex：12345678910import Vue from 'vue';import Vuex from 'vuex';Vue.use(Vuex);import state from './state';import actions from './actions';import mutations from './mutations';import getters from './getters';export default new Vuex.Store(&#123; state, actions, mutations, getters&#125;) 3 在路口文件main.js中引入 store12345678import stroe from './store'new Vue(&#123; el: '#app', router, store, //main.js注入store template: '&lt;App/&gt;', components: &#123; App &#125;&#125;) 项目store目录下的文件index为store注入vue文件123456789.├── actions.js├── getters.js├── index.js├── mutations.js├── state.js└── types.js0 directories, 6 files 重点来了state.js文件存放store中的数据字段getters.js文件存在获取store.state的方法,mutations.js文件存放修改state的方法 mutations是同步操作actions.js存放异步操作state方法，在vuex中只有mutations才能修改state actions还是调用的mutations mapGetrers,mapActions 是两个常用的vuex辅助函数 在组件中如何使用 123456789101112131415improt &#123;mapGetters,mapActions&#125; from 'vuex'export default&#123;data()&#123;return&#123;&#125;&#125;,computed&#123;...mapGetters(['xxx']),&#125;,methods:&#123;...mapActions(['xxxx'])&#125;&#125;","content":"<p><img src=\"https://vuex.vuejs.org/zh-cn/images/vuex.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<hr>\n<blockquote>\n<p>之前使用vuex一直都是半懂半不懂的今天系统的了解了下vuex终于理解差不多了下面分享下个人理解</p>\n</blockquote>\n<h3 id=\"vuex是什么？\"><a href=\"#vuex是什么？\" class=\"headerlink\" title=\"vuex是什么？\"></a>vuex是什么？</h3><p>vuex是一个状态管理器把所有状态都存在store这个容器里面</p>\n<h3 id=\"vuex能做什么？\"><a href=\"#vuex能做什么？\" class=\"headerlink\" title=\"vuex能做什么？\"></a>vuex能做什么？</h3><p>vuex能够很好的解决组件中的通信，让数据更清晰明了，更容易管理。</p>\n<h3 id=\"vuex怎么使用？\"><a href=\"#vuex怎么使用？\" class=\"headerlink\" title=\"vuex怎么使用？\"></a>vuex怎么使用？</h3><p>1 安装<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> vuex <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure></p>\n<p>2 在一个模块化的打包系统中，您必须显式地通过 Vue.use() 来安装 Vuex：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span>;</span><br><span class=\"line\">Vue.use(Vuex);</span><br><span class=\"line\"><span class=\"keyword\">import</span> state <span class=\"keyword\">from</span> <span class=\"string\">'./state'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> actions <span class=\"keyword\">from</span> <span class=\"string\">'./actions'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> mutations <span class=\"keyword\">from</span> <span class=\"string\">'./mutations'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> getters <span class=\"keyword\">from</span> <span class=\"string\">'./getters'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state, actions, mutations, getters</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>3 在路口文件main.js中引入 store<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> stroe <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  store, <span class=\"comment\">//main.js注入store</span></span><br><span class=\"line\">  template: <span class=\"string\">'&lt;App/&gt;'</span>,</span><br><span class=\"line\">  components: &#123; App &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>项目store目录下的文件index为store注入vue文件<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── actions.js</span><br><span class=\"line\">├── getters.js</span><br><span class=\"line\">├── index.js</span><br><span class=\"line\">├── mutations.js</span><br><span class=\"line\">├── state.js</span><br><span class=\"line\">└── types.js</span><br><span class=\"line\"></span><br><span class=\"line\">0 directories, 6 files</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"重点来了\"><a href=\"#重点来了\" class=\"headerlink\" title=\"重点来了\"></a>重点来了</h2><p>state.js文件存放store中的数据字段<br>getters.js文件存在获取store.state的方法,<br>mutations.js文件存放修改state的方法 mutations是同步操作<br>actions.js存放异步操作state方法，在vuex中只有mutations才能修改state actions还是调用的mutations</p>\n<p>mapGetrers,mapActions 是两个常用的vuex辅助函数</p>\n<p>在组件中如何使用 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">improt &#123;mapGetters,mapActions&#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span><br><span class=\"line\">data()&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed&#123;</span><br><span class=\"line\">...mapGetters([<span class=\"string\">'xxx'</span>]),</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">...mapActions([<span class=\"string\">'xxxx'</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://www.ding1996.cn/tags/vue/"}]},{"title":"七月任务","date":"2017-07-07T01:51:05.000Z","path":"2017/07/07/it-july-plan/","text":"学以致用才能把所学的知识变得有价值有明确的目标才能在正确的道路上越走越远 ~","content":"<p>学以致用才能把所学的知识变得有价值<br>有明确的目标才能在正确的道路上越走越远 ~</p>\n<p><img src=\"http://oo0pbw6u4.bkt.clouddn.com/%E4%B8%83%E6%9C%88%E4%BB%BB%E5%8A%A1.png\" alt=\"\"></p>\n","excerpt":"","categories":[],"tags":[{"name":"mapping","slug":"mapping","permalink":"http://www.ding1996.cn/tags/mapping/"}]},{"title":"让你备受刮目相看的8个npm技巧","date":"2017-07-06T01:58:21.000Z","path":"2017/07/06/it-npm-jiqiao/","text":"你观看一个同事编码时候，你会看到一些速记和技巧被应用，有些方式你并不熟悉，那你就被鄙视了，这种事情在我们每一个一生都会发生的。 在这篇文章中，我将介绍一些很有用的npm技巧，还有很多这里并不能全收录，我们只关注那些相关的并且有益于我们每天的工作和开发的技巧。 基本的速记为了让大家的对npm有一个一致的理解，尤其是我们的新人，让我们快速了解基本的速记和确保没有错过任何细节。 安装安装包常规: npm install pkg, 速记: npm i pkg.全局安装包:常规: npm i --global pkg, 速记: npm i -g pkg安装包并包含在依赖中:常规: npm i --save pkg, 速记: npm i -S pkg.安装包并包含在开发依赖中:常规: npm i --save-dev pkg, 速记: npm i -D pkg. 其他的npm速记阅读npm博客 速记表. 下面开始有趣的内容。1.初始化一个新包我们都知道npm init，用来创建一个新的包。但是，所有的问题都是匿名的，我们无论如何都会修改它的，那么怎么避免发生呢？使用npm init -y和 npm init -f回到初始化！2.运行测试命令另一个命令就是npm test,我们可能每天使用依次或者一天使用好几次。如果我告诉你可以使用少于40%的字符去完成这个功能？我们经常使用，应该这样。幸运的是，我们可以使用npm t，它就可以胜任3.枚举可用的脚本我们开始一个新项目，我们想知道如何开始。我们通常会问自己这样的问题：我们如何运行它？哪些脚本可用？一个方法是打开package.json文件并检查scripts部分。我们可以做的更好，当然，我们只是运行npm run得到一个的所有可用的脚本的列表。另外的可以选择是安装ntl (npm i -g ntl)，然后运行ntl在项目文件夹中。它也可以运行脚本，也很方面。4.枚举已经安装的包类似于可用的脚本，有时我们会问自己我们的项目中有哪些依赖项。我们可以再次打开package.json文件和检查，但是我们已经做的更好了。使用npm ls --depth 0枚举全局安装包，使用npm ls -g --depth 05.运行本地安装的可执行文件 我们安装了一个包在我们的项目中，它是一个可执行的，但我们只能运行它通过一个新的脚本。你想知道为什么，或者如何克服它？ 首先，让我们了解为什么——当我们在终端中执行命令时，实际发生的是它在PATH环境变量中列出的所有路径中查找一个具有相同名称的可执行文件。这就是他们如何神奇地从任何地方都可以执行。本地安装的软件包登记他们的可执行文件在本地，所以他们不在我们的PATH路径中将不会被发现。 当我们运行这些可执行文件通过一个新脚本，它是如何工作的呢？你可能会问？很好的问题！这是因为这种方式运行时，NPM做了一点技巧和增加了一个额外的文件夹到PATH，/node_modules/.bin中。 你可以看到它的运行npm run env | grep “$PATH”。你也可以运行只是npm run env 查看所有可用的环境变量，npm增加了一些更有趣的东西。 /node_modules/.bin，如果你不知道，正是在本地安装的软件包放置可执行文件的地方。我们可以运行 ./node_modules/.bin/mocha 在我们的项目中，看看将会发生什么.很简单, 对吧? 仅仅运行 ./node_modules/.bin/ ，无论什么时候你想要运行本地已安装的可执行文件。6.在网上查找你想要的包你可能看到了repository这个入口在package.json文件中，疑问“这有什么好处？”为了问答这个问题，仅仅运行npm repo然后在你的浏览器中查看。与之类似,npm home命令进入主页。如果你想打开你的包的主页npmjs.com，那是一个不错的速记，npm docs。7.在其他脚本前后运行脚本您可能熟悉诸如pretest之类的脚本，它允许您定义在test脚本之前运行的代码。您可能会惊讶地发现，您可以为每个脚本配置或有或后的脚本，包括您自己的自定义脚本！对于项目中，你使用NPM作为您的构建工具，有很多脚本，你需要自己总结使用。8.修改包的版本你开发一个安装包，你使用semver作为版本管理工具，修改一个新版本。通过这种方式，你需要手动的修改package.json文件，我们不推荐这样做。更容易的方式是运行npm version 通过 major, minor 或者 patch 转载地址","content":"<blockquote>\n<p>你观看一个同事编码时候，你会看到一些速记和技巧被应用，有些方式你并不熟悉，那你就被鄙视了，这种事情在我们每一个一生都会发生的。</p>\n</blockquote>\n<blockquote>\n<p>在这篇文章中，我将介绍一些很有用的npm技巧，还有很多这里并不能全收录，我们只关注那些相关的并且有益于我们每天的工作和开发的技巧。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"基本的速记\"><a href=\"#基本的速记\" class=\"headerlink\" title=\"基本的速记\"></a><strong>基本的速记</strong></h3><p>为了让大家的对npm有一个一致的理解，尤其是我们的新人，让我们快速了解基本的速记和确保没有错过任何细节。</p>\n<p><strong>安装安装包</strong><br>常规: <code>npm install pkg</code>, 速记: <code>npm i pkg</code>.<br><strong>全局安装包:</strong><br>常规: <code>npm i --global pkg</code>, 速记: <code>npm i -g pkg</code><br><strong>安装包并包含在依赖中:</strong><br>常规: <code>npm i --save pkg</code>, 速记: <code>npm i -S pkg</code>.<br><strong>安装包并包含在开发依赖中:</strong><br>常规: <code>npm i --save-dev pkg</code>, 速记: <code>npm i -D pkg</code>.</p>\n<p>其他的npm速记阅读npm博客 <a href=\"https://docs.npmjs.com/misc/config#shorthands-and-other-cli-niceties\" target=\"_blank\" rel=\"noopener\">速记表</a>.</p>\n<hr>\n<p>下面开始有趣的内容。<br>1.初始化一个新包<br>我们都知道<code>npm init</code>，用来创建一个新的包。<br><img src=\"http://p0.qhimg.com/t01d9e905292304482f.gif\" alt=\"\"><br>但是，所有的问题都是匿名的，我们无论如何都会修改它的，那么怎么避免发生呢？<br>使用<code>npm init -y</code>和 <code>npm init -f</code>回到初始化！<br><img src=\"http://p0.qhimg.com/t018b19458ea1e4f29c.gif\" alt=\"\"><br>2.运行测试命令<br>另一个命令就是npm test,我们可能每天使用依次或者一天使用好几次。<br><img src=\"http://p0.qhimg.com/t013675388a929b715a.gif\" alt=\"\"><br>如果我告诉你可以使用少于40%的字符去完成这个功能？我们经常使用，应该这样。<br>幸运的是，我们可以使用<code>npm t</code>，它就可以胜任<br><img src=\"http://p0.qhimg.com/t0119b0f93fdbce3c52.gif\" alt=\"\"><br>3.枚举可用的脚本<br>我们开始一个新项目，我们想知道如何开始。我们通常会问自己这样的问题：我们如何运行它？哪些脚本可用？<br>一个方法是打开package.json文件并检查scripts部分。<br><img src=\"http://p0.qhimg.com/t01e0d5d6b57de82093.gif\" alt=\"\"><br>我们可以做的更好，当然，我们只是运行npm run得到一个的所有可用的脚本的列表。<br><img src=\"http://p0.qhimg.com/t0185df886f66ed19f9.gif\" alt=\"\"><br>另外的可以选择是安装ntl (npm i -g ntl)，然后运行ntl在项目文件夹中。它也可以运行脚本，也很方面。<br><img src=\"http://p0.qhimg.com/t01c60c779d0d614408.gif\" alt=\"\"><br>4.枚举已经安装的包<br>类似于可用的脚本，有时我们会问自己我们的项目中有哪些依赖项。<br>我们可以再次打开package.json文件和检查，但是我们已经做的更好了。<br>使用<code>npm ls --depth 0</code><br><img src=\"http://p0.qhimg.com/t014ad711b281c288ae.gif\" alt=\"\"><br>枚举全局安装包，使用<code>npm ls -g --depth 0</code><br><img src=\"http://p0.qhimg.com/t01ab4908f2e4500392.gif\" alt=\"\"><br>5.运行本地安装的可执行文件</p>\n<p>我们安装了一个包在我们的项目中，它是一个可执行的，但我们只能运行它通过一个新的脚本。你想知道为什么，或者如何克服它？</p>\n<p>首先，让我们了解为什么——当我们在终端中执行命令时，实际发生的是它在PATH环境变量中列出的所有路径中查找一个具有相同名称的可执行文件。这就是他们如何神奇地从任何地方都可以执行。本地安装的软件包登记他们的可执行文件在本地，所以他们不在我们的PATH路径中将不会被发现。</p>\n<p>当我们运行这些可执行文件通过一个新脚本，它是如何工作的呢？你可能会问？很好的问题！这是因为这种方式运行时，NPM做了一点技巧和增加了一个额外的文件夹到PATH，/node_modules/.bin中。 你可以看到它的运行npm run env | grep “$PATH”。你也可以运行只是npm run env 查看所有可用的环境变量，npm增加了一些更有趣的东西。 /node_modules/.bin，如果你不知道，正是在本地安装的软件包放置可执行文件的地方。<br>我们可以运行 ./node_modules/.bin/mocha 在我们的项目中，看看将会发生什么.<br><img src=\"http://p0.qhimg.com/t011a44c15fdb274912.gif\" alt=\"\"><br>很简单, 对吧? 仅仅运行 ./node_modules/.bin/ ，无论什么时候你想要运行本地已安装的可执行文件。<br>6.在网上查找你想要的包<br>你可能看到了repository这个入口在package.json文件中，疑问“这有什么好处？”<br>为了问答这个问题，仅仅运行npm repo然后在你的浏览器中查看。<br>与之类似,npm home命令进入主页。<br>如果你想打开你的包的主页npmjs.com，那是一个不错的速记，npm docs。<br>7.在其他脚本前后运行脚本<br>您可能熟悉诸如pretest之类的脚本，它允许您定义在test脚本之前运行的代码。<br>您可能会惊讶地发现，您可以为每个脚本配置或有或后的脚本，包括您自己的自定义脚本！<br><img src=\"http://p0.qhimg.com/t010206810a272d84df.gif\" alt=\"\"><br>对于项目中，你使用NPM作为您的构建工具，有很多脚本，你需要自己总结使用。<br>8.修改包的版本<br>你开发一个安装包，你使用semver作为版本管理工具，修改一个新版本。<br>通过这种方式，你需要手动的修改package.json文件，我们不推荐这样做。<br>更容易的方式是运行npm version 通过 major, minor 或者 patch<br><img src=\"http://p0.qhimg.com/t01794393233d68fbaf.gif\" alt=\"\"></p>\n<p><a href=\"http://www.zcfy.cc/article/8-npm-tricks-you-can-use-to-impress-your-colleagues-3362.html?t=new\" target=\"_blank\" rel=\"noopener\">转载地址</a></p>\n","excerpt":"你观看一个同事编码时候，你会看到一些速记和技巧被应用，有些方式你并不熟悉，那你就被鄙视了，这种事情在我们每一个一生都会发生的。 在这篇文章中，我将介绍一些很有用的npm技巧，还有很多这里并不能全收录，我们只关注那些相关的并且有益于我们每天的工作和开发的技巧。","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"}]},{"title":"linux常用命令","date":"2017-07-06T01:45:02.000Z","path":"2017/07/06/it-linux-zhiling/","text":"常用指令ls 显示文件或目录 -l 列出文件详细信息l(list) -a 列出当前目录下所有文件及目录，包括隐藏的a(all) mkdir 创建目录 -p 创建目录，若无父目录，则创建p(parent) cd 切换目录 touch 创建空文件 echo 创建带有内容的文件。 cat 查看文件内容 cp 拷贝 mv 移动或重命名 rm 删除文件-r 递归删除，可删除子目录及文件-f 强制删除 find 在文件系统中搜索某文件 wc 统计文本中行数、字数、字符数 grep 在文本文件中查找某个字符串 rmdir 删除空目录 tree 树形结构显示目录，需要安装tree包 pwd 显示当前目录 ln 创建链接文件 more、less 分页显示文本文件内容 head、tail 显示文件头、尾内容 ctrl+alt+F1 命令行全屏模式 系统管理命令stat 显示指定文件的详细信息，比ls更详细 who 显示在线登陆用户 whoami 显示当前操作用户 hostname 显示主机名 uname 显示系统信息 top 动态显示当前耗费资源最多进程信息 ps 显示瞬间进程状态 ps -aux du 查看目录大小 du -h /home带有单位显示目录信息 df 查看磁盘大小 df -h 带有单位显示磁盘信息 ifconfig 查看网络情况 ping 测试网络连通 netstat 显示网络状态信息 man 命令不会用了，找男人 如：man ls clear 清屏 alias 对命令重命名 如：alias showmeit=”ps -aux” ，另外解除使用unaliax showmeit kill 杀死进程，可以先用ps 或 top命令查看进程的id，然后再用kill命令杀死进程。","content":"<h3 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h3><p>ls　　        显示文件或目录<br>     -l           列出文件详细信息l(list)<br>     -a          列出当前目录下所有文件及目录，包括隐藏的a(all)</p>\n<p>mkdir         创建目录<br>     -p           创建目录，若无父目录，则创建p(parent)</p>\n<p>cd               切换目录</p>\n<p>touch          创建空文件</p>\n<p>echo            创建带有内容的文件。</p>\n<p>cat              查看文件内容</p>\n<a id=\"more\"></a>\n<p>cp                拷贝</p>\n<p>mv               移动或重命名</p>\n<p>rm               删除文件<br>-r            递归删除，可删除子目录及文件<br>-f            强制删除</p>\n<p>find              在文件系统中搜索某文件</p>\n<p>wc                统计文本中行数、字数、字符数</p>\n<p>grep             在文本文件中查找某个字符串</p>\n<p>rmdir           删除空目录</p>\n<p>tree             树形结构显示目录，需要安装tree包</p>\n<p>pwd              显示当前目录</p>\n<p>ln                  创建链接文件</p>\n<p>more、less  分页显示文本文件内容</p>\n<p>head、tail    显示文件头、尾内容</p>\n<p>ctrl+alt+F1  命令行全屏模式</p>\n<h3 id=\"系统管理命令\"><a href=\"#系统管理命令\" class=\"headerlink\" title=\"系统管理命令\"></a>系统管理命令</h3><p>stat              显示指定文件的详细信息，比ls更详细</p>\n<p>who               显示在线登陆用户</p>\n<p>whoami          显示当前操作用户</p>\n<p>hostname      显示主机名</p>\n<p>uname           显示系统信息</p>\n<p>top                动态显示当前耗费资源最多进程信息</p>\n<p>ps                  显示瞬间进程状态 ps -aux</p>\n<p>du                  查看目录大小 du -h /home带有单位显示目录信息</p>\n<p>df                  查看磁盘大小 df -h 带有单位显示磁盘信息</p>\n<p>ifconfig          查看网络情况</p>\n<p>ping                测试网络连通</p>\n<p>netstat          显示网络状态信息</p>\n<p>man                命令不会用了，找男人  如：man ls</p>\n<p>clear              清屏</p>\n<p>alias               对命令重命名 如：alias showmeit=”ps -aux” ，另外解除使用unaliax showmeit</p>\n<p>kill                 杀死进程，可以先用ps 或 top命令查看进程的id，然后再用kill命令杀死进程。</p>\n","excerpt":"常用指令ls 显示文件或目录 -l 列出文件详细信息l(list) -a 列出当前目录下所有文件及目录，包括隐藏的a(all) mkdir 创建目录 -p 创建目录，若无父目录，则创建p(parent) cd 切换目录 touch 创建空文件 echo 创建带有内容的文件。 cat 查看文件内容","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"http://www.ding1996.cn/tags/mac/"}]},{"title":"如何高效利用github提升自己","date":"2017-06-30T01:22:35.000Z","path":"2017/06/30/it-github-learn/","text":"作为开源代码库以及版本控制系统，Github拥有超过900万开发者用户，是开发者打开程序开源大门的一扇窗口，也是开发者快速提升自己的一个重要途径。本文将从两个方面介绍github的使用方式。 和逛微博、朋友圈、空间一样逛github 你在空闲时间逛微博、朋友圈、空间，人家没事的时候逛GitHub ，看看最近有哪些流行的项目，久而久之，这差距就越来越大。那么我们如何像逛微博、朋友圈、空间一样逛github呢？ 首先，和微博、朋友圈、空间一样，你要想在你的朋友圈看到别人的动态，首先你的加人家好友对吧。所以首先我们得关注一些行业的大牛，例如关注Jake Wharton关注过后，我们就可以在github首页看到大神们star、fork等动作，可以了解大神们在此时此刻关注或者开源了那些优秀的开源项目。 利用github的Explore功能，发现当下热门的开源项目","content":"<blockquote>\n<p>作为开源代码库以及版本控制系统，Github拥有超过900万开发者用户，是开发者打开程序开源大门的一扇窗口，也是开发者快速提升自己的一个重要途径。本文将从两个方面介绍github的使用方式。</p>\n</blockquote>\n<p><strong>和逛微博、朋友圈、空间一样逛github</strong></p>\n<p>你在空闲时间逛微博、朋友圈、空间，人家没事的时候逛GitHub ，看看最近有哪些流行的项目，久而久之，这差距就越来越大。那么我们如何像逛微博、朋友圈、空间一样逛github呢？</p>\n<ul>\n<li><p>首先，和微博、朋友圈、空间一样，你要想在你的朋友圈看到别人的动态，首先你的加人家好友对吧。所以首先我们得关注一些行业的大牛，例如关注Jake Wharton<br><img src=\"https://user-gold-cdn.xitu.io/2017/6/28/004cf735de5a0fee1bda1e62f374487f\" alt=\"\"><br>关注过后，我们就可以在github首页看到大神们star、fork等动作，可以了解大神们在此时此刻关注或者开源了那些优秀的开源项目。</p>\n</li>\n<li><p>利用github的Explore功能，发现当下热门的开源项目<br><img src=\"https://user-gold-cdn.xitu.io/2017/6/28/c3655076fcf069c8ea0818205c9c95ff\" alt=\"\"></p>\n</li>\n</ul>\n","excerpt":"","categories":[],"tags":[{"name":"学习","slug":"学习","permalink":"http://www.ding1996.cn/tags/学习/"}]},{"title":"Mac Mamp 多站点配置","date":"2017-06-29T08:23:30.000Z","path":"2017/06/29/it-mac-mamp/","text":"MAMP配置多虚拟主机一：在终端输入 1vim /Applications/MAMP/conf/apache/httpd.conf 搜索httpd-vhosts.conf 找到：#Include /Applications/MAMP/conf/apache/extra/httpd-vhosts.conf 将#去掉，使虚拟地址的配置文件生效。 二：vim /Applications/MAMP/conf/apache/extra/httpd-vhosts.conf，在配置文件最后加入需要配置的虚拟主机配置 123456789#配置test.com&lt;VirtualHost *:80&gt; ServerAdmin test.com DocumentRoot &quot;/Applications/MAMP/htdocs/test&quot; ServerName test.com ServerAlias test.com ErrorLog &quot;logs/test.com-error_log&quot; CustomLog &quot;logs/test.com-access_log&quot; common&lt;/VirtualHost&gt; 123456789#配置active.com&lt;VirtualHost *:80&gt; ServerAdmin active.com DocumentRoot &quot;/Applications/MAMP/htdocs/active/&quot; ServerName active.com ServerAlias active.com ErrorLog &quot;logs/active.com-error_log&quot; CustomLog &quot;logs/active.com-access_log&quot; common&lt;/VirtualHost&gt; 三：进入hosts 文件 vim /etc/hosts加入127.0.0.1 test.com127.0.0.1 active.com重启appache服务器，打开浏览器输入test.com 和activie.com即可访问对应网站 原文地址","content":"<h3 id=\"MAMP配置多虚拟主机\"><a href=\"#MAMP配置多虚拟主机\" class=\"headerlink\" title=\"MAMP配置多虚拟主机\"></a>MAMP配置多虚拟主机</h3><p>一：在终端输入  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /Applications/MAMP/conf/apache/httpd.conf</span><br></pre></td></tr></table></figure>\n<p>搜索httpd-vhosts.conf 找到：#Include  /Applications/MAMP/conf/apache/extra/httpd-vhosts.conf 将#去掉，使虚拟地址的配置文件生效。</p>\n<p>二：vim /Applications/MAMP/conf/apache/extra/httpd-vhosts.conf，在配置文件最后加入需要配置的虚拟主机配置</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#配置test.com</span><br><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    ServerAdmin test.com</span><br><span class=\"line\">    DocumentRoot &quot;/Applications/MAMP/htdocs/test&quot;</span><br><span class=\"line\">    ServerName test.com</span><br><span class=\"line\">    ServerAlias test.com</span><br><span class=\"line\">    ErrorLog &quot;logs/test.com-error_log&quot;</span><br><span class=\"line\">    CustomLog &quot;logs/test.com-access_log&quot; common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#配置active.com</span><br><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    ServerAdmin active.com</span><br><span class=\"line\">    DocumentRoot &quot;/Applications/MAMP/htdocs/active/&quot;</span><br><span class=\"line\">    ServerName active.com</span><br><span class=\"line\">    ServerAlias active.com</span><br><span class=\"line\">    ErrorLog &quot;logs/active.com-error_log&quot;</span><br><span class=\"line\">    CustomLog &quot;logs/active.com-access_log&quot; common</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>三：进入hosts 文件 vim /etc/hosts<br>加入<br>127.0.0.1  test.com<br>127.0.0.1   active.com<br>重启appache服务器，打开浏览器输入test.com 和activie.com即可访问对应网站</p>\n<p><a href=\"http://blog.csdn.net/sinat_14826983/article/details/50630071\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n","excerpt":"MAMP配置多虚拟主机一：在终端输入 1vim /Applications/MAMP/conf/apache/httpd.conf 搜索httpd-vhosts.conf 找到：#Include /Applications/MAMP/conf/apache/extra/httpd-vhosts.conf 将#去掉，使虚拟地址的配置文件生效。 二：vim /Applications/MAMP/conf/apache/extra/httpd-vhosts.conf，在配置文件最后加入需要配置的虚拟主机配置","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"http://www.ding1996.cn/tags/mac/"}]},{"title":"阿里云web服务器环境配置","date":"2017-06-29T01:27:15.000Z","path":"2017/06/29/it-php-apache/","text":"第一次买服务器倒腾了半天才把web服务器FTP配置好阿里云服务器可以随意更换系统 一开始买的是linux系统 ，由于没接触过 然后吧系统换成 windos的了 web服务器搭建在服务器里我用的xampp这个集成环境 百度搜下 直接下载就可以了 直接下一步下一步 傻瓜试的安装apache默认用的80端口mysql默认用的3306端口 在服务器本地通过localhost就直接能访问到了，但是我在我自己的电脑通过公网ip访问不到 ，打客服电话得知须要在阿里云上开通80端口的访问权限其他的同理 须要开通对外访问端口 80 3306 21 等 Ftp安装xampp里面集成了ftp只需要添加用户名，和设置用户权限就可以了配置完以后阿里云服务器本地可以使用ftp了 但是我通过公网还是访问不了然后就各种百度在windos里面需要在防火墙里面设置请看这篇文章","content":"<p>第一次买服务器倒腾了半天才把web服务器FTP配置好<br>阿里云服务器可以随意更换系统 一开始买的是linux系统 ，由于没接触过 然后吧系统换成 windos的了 </p>\n<h3 id=\"web服务器搭建\"><a href=\"#web服务器搭建\" class=\"headerlink\" title=\"web服务器搭建\"></a>web服务器搭建</h3><p>在服务器里我用的xampp这个集成环境 百度搜下 直接下载就可以了 直接下一步下一步 傻瓜试的安装<br>apache默认用的80端口<br>mysql默认用的3306端口<br><a id=\"more\"></a></p>\n<p>在服务器本地通过localhost就直接能访问到了，但是我在我自己的电脑通过公网ip访问不到 ，打客服电话得知须要在阿里云上开通80端口的访问权限<br>其他的同理 须要开通对外访问端口 80 3306 21 等<br><img src=\"http://oo0pbw6u4.bkt.clouddn.com/WX20170628-093533@2x.png\" alt=\"\"></p>\n<h3 id=\"Ftp安装\"><a href=\"#Ftp安装\" class=\"headerlink\" title=\"Ftp安装\"></a>Ftp安装</h3><p>xampp里面集成了ftp只需要添加用户名，和设置用户权限就可以了<br><img src=\"http://oo0pbw6u4.bkt.clouddn.com/fpt1.png\" alt=\"\"><br><img src=\"http://oo0pbw6u4.bkt.clouddn.com/ftp2.png\" alt=\"\"><br><img src=\"http://oo0pbw6u4.bkt.clouddn.com/ftp3.png\" alt=\"\"><br><img src=\"http://oo0pbw6u4.bkt.clouddn.com/ftp4.png\" alt=\"\"><br>配置完以后阿里云服务器本地可以使用ftp了 但是我通过公网还是访问不了然后就各种百度<br>在windos里面需要在防火墙里面设置<br><a href=\"https://jingyan.baidu.com/article/0eb457e50b1ad003f1a905de.html?from=timeline&amp;isappinstalled=1\" target=\"_blank\" rel=\"noopener\">请看这篇文章</a></p>\n","excerpt":"第一次买服务器倒腾了半天才把web服务器FTP配置好阿里云服务器可以随意更换系统 一开始买的是linux系统 ，由于没接触过 然后吧系统换成 windos的了 web服务器搭建在服务器里我用的xampp这个集成环境 百度搜下 直接下载就可以了 直接下一步下一步 傻瓜试的安装apache默认用的80端口mysql默认用的3306端口","categories":[],"tags":[{"name":"后台","slug":"后台","permalink":"http://www.ding1996.cn/tags/后台/"},{"name":"php","slug":"php","permalink":"http://www.ding1996.cn/tags/php/"}]},{"title":"vue-routet使用笔记","date":"2017-06-28T06:02:53.000Z","path":"2017/06/28/it-js-vue-router/","text":"vue-router中文文档 安装 cdn 12&lt;script src=\"/path/to/vue.js\"&gt;&lt;/script&gt;&lt;script src=\"/path/to/vue-router.js\"&gt;&lt;/script&gt; npm 1npm install vue-router 如果在一个模块化工程中使用它，必须要通过 Vue.use() 明确地安装路由功能： 1234import Vue from 'vue'import VueRouter from 'vue-router'Vue.use(VueRouter) 文档的例子html 12345678910111213141516&lt;script src=\"https://unpkg.com/vue/dist/vue.js\"&gt;&lt;/script&gt;&lt;script src=\"https://unpkg.com/vue-router/dist/vue-router.js\"&gt;&lt;/script&gt;&lt;div id=\"app\"&gt; &lt;h1&gt;Hello App!&lt;/h1&gt; &lt;p&gt; &lt;!-- 使用 router-link 组件来导航. --&gt; &lt;!-- 通过传入 `to` 属性指定链接. --&gt; &lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt; &lt;router-link to=\"/foo\"&gt;Go to Foo&lt;/router-link&gt; &lt;router-link to=\"/bar\"&gt;Go to Bar&lt;/router-link&gt; &lt;/p&gt; &lt;!-- 路由出口 --&gt; &lt;!-- 路由匹配到的组件将渲染在这里 --&gt; &lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt; javascrpt 12345678910111213141516171819202122232425262728293031// 0. 如果使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter)// 1. 定义（路由）组件。// 可以从其他文件 import 进来const Foo = &#123; template: '&lt;div&gt;foo&lt;/div&gt;' &#125;const Bar = &#123; template: '&lt;div&gt;bar&lt;/div&gt;' &#125;// 2. 定义路由// 每个路由应该映射一个组件。 其中\"component\" 可以是// 通过 Vue.extend() 创建的组件构造器，// 或者，只是一个组件配置对象。// 我们晚点再讨论嵌套路由。const routes = [ &#123; path: '/foo', component: Foo &#125;, &#123; path: '/bar', component: Bar &#125;]// 3. 创建 router 实例，然后传 `routes` 配置// 你还可以传别的配置参数, 不过先这么简单着吧。const router = new VueRouter(&#123; routes // （缩写）相当于 routes: routes&#125;)// 4. 创建和挂载根实例。// 记得要通过 router 配置参数注入路由，// 从而让整个应用都有路由功能const app = new Vue(&#123; router&#125;).$mount('#app')// 现在，应用已经启动了！ 我的router配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677import Vue from 'vue'import VueRouter from 'vue-router'import blog from './admin/blog.vue'import setting from './admin/setting.vue'import user from './admin/user.vue'import test from './admin/test.vue'import login from './admin/login.vue'import index from './index.vue'Vue.use(VueRouter);// 1. 定义（路由）组件。// 可以从其他文件 import 进来 const routes = [ &#123; path: '', component: index, children: [ &#123; // 当 /user/:id/profile 匹配成功， // UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中 path: '/blog', name:'博客', component: blog &#125;, &#123; // 当 /user/:id/posts 匹配成功 // UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中 path: '/setting', name:'设置', component: setting &#125;, &#123; path:'/user', name:'用户管理', component:user &#125;, &#123; path:'/test', name:'测试', component:test &#125; ] &#125;,&#123; path:'/login', component:login, meta: &#123; requiresAuth: true &#125; &#125; ]const router = new VueRouter(&#123; routes&#125;)// router.beforeEach((to, from, next) =&gt; &#123;// if (to.matched.some(record =&gt; record.meta.requiresAuth)) &#123;// // this route requires auth, check if logged in// // if not, redirect to login page.// alert(1111);// if (!auth.loggedIn()) &#123;// next(&#123;// path: '/login',// query: &#123; redirect: to.fullPath &#125;// &#125;)// &#125; else &#123;// next()// &#125;// &#125; else &#123;// next() // 确保一定要调用 next()// &#125;// &#125;)export default router 一些注意点 页面跳转 router.push() 1234567891011// 字符串router.push('home')// 对象router.push(&#123; path: 'home' &#125;)// 命名的路由router.push(&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;)// 带查询参数，变成 /register?plan=privaterouter.push(&#123; path: 'register', query: &#123; plan: 'private' &#125;&#125;) 监听页面跳转 12345watch: &#123; '$route' (to, from) &#123; //somecode &#125;&#125;","content":"<p><a href=\"https://router.vuejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">vue-router中文文档</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ol>\n<li><p>cdn  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/path/to/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/path/to/vue-router.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>npm   </p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> vue-router</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<p>如果在一个模块化工程中使用它，必须要通过 Vue.use() 明确地安装路由功能：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure>\n<h3 id=\"文档的例子\"><a href=\"#文档的例子\" class=\"headerlink\" title=\"文档的例子\"></a>文档的例子</h3><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue/dist/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue-router/dist/vue-router.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello App!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/foo\"</span>&gt;</span>Go to Foo<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/bar\"</span>&gt;</span>Go to Bar<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 路由出口 --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>javascrpt</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0. 如果使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 定义（路由）组件。</span></span><br><span class=\"line\"><span class=\"comment\">// 可以从其他文件 import 进来</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Foo = &#123; <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;foo&lt;/div&gt;'</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Bar = &#123; <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;bar&lt;/div&gt;'</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 定义路由</span></span><br><span class=\"line\"><span class=\"comment\">// 每个路由应该映射一个组件。 其中\"component\" 可以是</span></span><br><span class=\"line\"><span class=\"comment\">// 通过 Vue.extend() 创建的组件构造器，</span></span><br><span class=\"line\"><span class=\"comment\">// 或者，只是一个组件配置对象。</span></span><br><span class=\"line\"><span class=\"comment\">// 我们晚点再讨论嵌套路由。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/foo'</span>, <span class=\"attr\">component</span>: Foo &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/bar'</span>, <span class=\"attr\">component</span>: Bar &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 创建 router 实例，然后传 `routes` 配置</span></span><br><span class=\"line\"><span class=\"comment\">// 你还可以传别的配置参数, 不过先这么简单着吧。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  routes <span class=\"comment\">// （缩写）相当于 routes: routes</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 创建和挂载根实例。</span></span><br><span class=\"line\"><span class=\"comment\">// 记得要通过 router 配置参数注入路由，</span></span><br><span class=\"line\"><span class=\"comment\">// 从而让整个应用都有路由功能</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在，应用已经启动了！</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"我的router配置\"><a href=\"#我的router配置\" class=\"headerlink\" title=\"我的router配置\"></a>我的router配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> blog <span class=\"keyword\">from</span> <span class=\"string\">'./admin/blog.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> setting <span class=\"keyword\">from</span> <span class=\"string\">'./admin/setting.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> user <span class=\"keyword\">from</span> <span class=\"string\">'./admin/user.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> test <span class=\"keyword\">from</span> <span class=\"string\">'./admin/test.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> login <span class=\"keyword\">from</span> <span class=\"string\">'./admin/login.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> index <span class=\"keyword\">from</span> <span class=\"string\">'./index.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 定义（路由）组件。</span></span><br><span class=\"line\"><span class=\"comment\">// 可以从其他文件 import 进来</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">''</span>, <span class=\"attr\">component</span>: index,</span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 当 /user/:id/profile 匹配成功，</span></span><br><span class=\"line\">          <span class=\"comment\">// UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class=\"line\">          path: <span class=\"string\">'/blog'</span>,</span><br><span class=\"line\">          name:<span class=\"string\">'博客'</span>,</span><br><span class=\"line\">          component: blog</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 当 /user/:id/posts 匹配成功</span></span><br><span class=\"line\">          <span class=\"comment\">// UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class=\"line\">          path: <span class=\"string\">'/setting'</span>,</span><br><span class=\"line\">          name:<span class=\"string\">'设置'</span>,</span><br><span class=\"line\">          component: setting</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \tpath:<span class=\"string\">'/user'</span>,</span><br><span class=\"line\">        \tname:<span class=\"string\">'用户管理'</span>,</span><br><span class=\"line\">        \tcomponent:user</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \tpath:<span class=\"string\">'/test'</span>,</span><br><span class=\"line\">        \tname:<span class=\"string\">'测试'</span>,</span><br><span class=\"line\">        \tcomponent:test</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">    \tpath:<span class=\"string\">'/login'</span>,</span><br><span class=\"line\">    \tcomponent:login,</span><br><span class=\"line\">    \tmeta: &#123; <span class=\"attr\">requiresAuth</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// router.beforeEach((to, from, next) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   if (to.matched.some(record =&gt; record.meta.requiresAuth)) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     // this route requires auth, check if logged in</span></span><br><span class=\"line\"><span class=\"comment\">//     // if not, redirect to login page.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//     alert(1111);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//     if (!auth.loggedIn()) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       next(&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         path: '/login',</span></span><br><span class=\"line\"><span class=\"comment\">//         query: &#123; redirect: to.fullPath &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//       &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       next()</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     next() // 确保一定要调用 next()</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br></pre></td></tr></table></figure>\n<h3 id=\"一些注意点\"><a href=\"#一些注意点\" class=\"headerlink\" title=\"一些注意点\"></a>一些注意点</h3><ul>\n<li>页面跳转 router.push()</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符串</span></span><br><span class=\"line\">router.push(<span class=\"string\">'home'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对象</span></span><br><span class=\"line\">router.push(&#123; <span class=\"attr\">path</span>: <span class=\"string\">'home'</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 命名的路由</span></span><br><span class=\"line\">router.push(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'user'</span>, <span class=\"attr\">params</span>: &#123; <span class=\"attr\">userId</span>: <span class=\"number\">123</span> &#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 带查询参数，变成 /register?plan=private</span></span><br><span class=\"line\">router.push(&#123; <span class=\"attr\">path</span>: <span class=\"string\">'register'</span>, <span class=\"attr\">query</span>: &#123; <span class=\"attr\">plan</span>: <span class=\"string\">'private'</span> &#125;&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>监听页面跳转    </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  <span class=\"string\">'$route'</span> (to, <span class=\"keyword\">from</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//somecode</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"vue-router中文文档 安装 cdn 12&lt;script src=\"/path/to/vue.js\"&gt;&lt;/script&gt;&lt;script src=\"/path/to/vue-router.js\"&gt;&lt;/script&gt; npm 1npm install vue-router","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://www.ding1996.cn/tags/vue/"}]},{"title":"Vue常用开发组件","date":"2017-06-28T02:31:50.000Z","path":"2017/06/28/it-vue-plug/","text":"vue常用开发组件 element （web UI工具套件） iView （ UI 组件库） vue-multiselect（UI组件库） vue-admin （Vue管理面板框架） vue-waterfall（瀑布流布局） vueify（范围化的CSS和组件热重新加载对Vue.js组件进行Browserify变换） vue-threejs （ 用于Three.js和Vue绑定） vue-3d-model （一个展示三维模型的Vue组件） vue-fuse （模糊搜索库） vue-accordion（手风琴菜单组件） vue-js-popover（气泡弹窗） vue-awesome （icons组件） vue-easy-slider（滑块轮播组件） vue-image-lightbox（图片浮层） vue-twentytwenty（图片比较） vue-img-inputer（图片输入框） vue-core-image-upload（图片裁剪，文件上传） vue-lazyload（图片懒加载） vue-pdf（PDF查看） vue-js-modal（模态框） v-tooltip（提示组件） vue-notifications（气泡提示） nprogress（网页进度条） vue-radial-progress（状态进度条） vue-datasource（表格组件） vue-baidu-map（百度地图继承组件） vue-aplayer（音乐播放器） vuejs-sound-player（视频播放器） vuejs-datepicker（轻量日期选择器） vue-datepicker（日期选择器） V - Distpicker（地区选择器） vue-event-calendar（日历） vue-select（下拉选择、标记组件） Vue.Draggable（拖拽组件） vue-qart（二维码动态生成） vue-js-toggle-button（button开关） vue-form-wizard（步骤指引） vue-pull-refresh（移动端下拉刷新） vue-markdown（Markdown编辑器） vue-social-sharing（社交分享） vue-markdown（Markdown编辑器） vue-social-sharing（社交分享）","content":"<p>vue常用开发组件</p>\n<ul>\n<li><h5 id=\"element-（web-UI工具套件）\"><a href=\"#element-（web-UI工具套件）\" class=\"headerlink\" title=\"element （web UI工具套件）\"></a><a href=\"http://element.eleme.io/#/zh-CN/component/installation\" target=\"_blank\" rel=\"noopener\">element （web UI工具套件）</a></h5></li>\n<li><h5 id=\"iView-（-UI-组件库）\"><a href=\"#iView-（-UI-组件库）\" class=\"headerlink\" title=\"iView （ UI 组件库）\"></a><a href=\"https://github.com/iview/iview\" target=\"_blank\" rel=\"noopener\">iView （ UI 组件库）</a></h5></li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><h5 id=\"vue-multiselect（UI组件库）\"><a href=\"#vue-multiselect（UI组件库）\" class=\"headerlink\" title=\"vue-multiselect（UI组件库）\"></a><a href=\"http://monterail.github.io/vue-multiselect/#sub-action-dispatcher\" target=\"_blank\" rel=\"noopener\">vue-multiselect（UI组件库）</a></h5></li>\n<li><h5 id=\"vue-admin-（Vue管理面板框架）\"><a href=\"#vue-admin-（Vue管理面板框架）\" class=\"headerlink\" title=\"vue-admin （Vue管理面板框架）\"></a><a href=\"https://admin.vuebulma.com/#/dashboard\" target=\"_blank\" rel=\"noopener\">vue-admin （Vue管理面板框架）</a></h5></li>\n<li><h5 id=\"vue-waterfall（瀑布流布局）\"><a href=\"#vue-waterfall（瀑布流布局）\" class=\"headerlink\" title=\"vue-waterfall（瀑布流布局）\"></a><a href=\"https://github.com/MopTym/vue-waterfall\" target=\"_blank\" rel=\"noopener\">vue-waterfall（瀑布流布局）</a></h5></li>\n<li><h5 id=\"vueify（范围化的CSS和组件热重新加载对Vue-js组件进行Browserify变换）\"><a href=\"#vueify（范围化的CSS和组件热重新加载对Vue-js组件进行Browserify变换）\" class=\"headerlink\" title=\"vueify（范围化的CSS和组件热重新加载对Vue.js组件进行Browserify变换）\"></a><a href=\"https://github.com/vuejs/vueify\" target=\"_blank\" rel=\"noopener\">vueify（范围化的CSS和组件热重新加载对Vue.js组件进行Browserify变换）</a></h5></li>\n</ul>\n<ul>\n<li><h5 id=\"vue-threejs-（-用于Three-js和Vue绑定）\"><a href=\"#vue-threejs-（-用于Three-js和Vue绑定）\" class=\"headerlink\" title=\"vue-threejs （ 用于Three.js和Vue绑定）\"></a><a href=\"https://github.com/fritx/vue-threejs\" target=\"_blank\" rel=\"noopener\">vue-threejs （ 用于Three.js和Vue绑定）</a></h5></li>\n<li><h5 id=\"vue-3d-model-（一个展示三维模型的Vue组件）\"><a href=\"#vue-3d-model-（一个展示三维模型的Vue组件）\" class=\"headerlink\" title=\"vue-3d-model （一个展示三维模型的Vue组件）\"></a><a href=\"https://admin.vuebulma.com/#/dashboard\" target=\"_blank\" rel=\"noopener\">vue-3d-model （一个展示三维模型的Vue组件）</a></h5></li>\n<li><h5 id=\"vue-fuse-（模糊搜索库）\"><a href=\"#vue-fuse-（模糊搜索库）\" class=\"headerlink\" title=\"vue-fuse （模糊搜索库）\"></a><a href=\"https://github.com/shayneo/vue-fuse\" target=\"_blank\" rel=\"noopener\">vue-fuse （模糊搜索库）</a></h5></li>\n<li><h5 id=\"vue-accordion（手风琴菜单组件）\"><a href=\"#vue-accordion（手风琴菜单组件）\" class=\"headerlink\" title=\"vue-accordion（手风琴菜单组件）\"></a><a href=\"https://github.com/zeratulmdq/vue-accordion\" target=\"_blank\" rel=\"noopener\">vue-accordion（手风琴菜单组件）</a></h5></li>\n<li><h5 id=\"vue-js-popover（气泡弹窗）\"><a href=\"#vue-js-popover（气泡弹窗）\" class=\"headerlink\" title=\"vue-js-popover（气泡弹窗）\"></a><a href=\"https://github.com/euvl/vue-js-popover\" target=\"_blank\" rel=\"noopener\">vue-js-popover（气泡弹窗）</a></h5></li>\n<li><h5 id=\"vue-awesome-（icons组件）\"><a href=\"#vue-awesome-（icons组件）\" class=\"headerlink\" title=\"vue-awesome （icons组件）\"></a><a href=\"https://github.com/Justineo/vue-awesome\" target=\"_blank\" rel=\"noopener\">vue-awesome （icons组件）</a></h5></li>\n<li><h5 id=\"vue-easy-slider（滑块轮播组件）\"><a href=\"#vue-easy-slider（滑块轮播组件）\" class=\"headerlink\" title=\"vue-easy-slider（滑块轮播组件）\"></a><a href=\"https://github.com/shhdgit/vue-easy-slider\" target=\"_blank\" rel=\"noopener\">vue-easy-slider（滑块轮播组件）</a></h5></li>\n<li><h5 id=\"vue-image-lightbox（图片浮层）\"><a href=\"#vue-image-lightbox（图片浮层）\" class=\"headerlink\" title=\"vue-image-lightbox（图片浮层）\"></a><a href=\"https://github.com/pexea12/vue-image-lightbox\" target=\"_blank\" rel=\"noopener\">vue-image-lightbox（图片浮层）</a></h5></li>\n<li><h5 id=\"vue-twentytwenty（图片比较）\"><a href=\"#vue-twentytwenty（图片比较）\" class=\"headerlink\" title=\"vue-twentytwenty（图片比较）\"></a><a href=\"https://github.com/mhayes/vue-twentytwenty\" target=\"_blank\" rel=\"noopener\">vue-twentytwenty（图片比较）</a></h5></li>\n<li><h5 id=\"vue-img-inputer（图片输入框）\"><a href=\"#vue-img-inputer（图片输入框）\" class=\"headerlink\" title=\"vue-img-inputer（图片输入框）\"></a><a href=\"https://github.com/waynecz/vue-img-inputer\" target=\"_blank\" rel=\"noopener\">vue-img-inputer（图片输入框）</a></h5></li>\n<li><h5 id=\"vue-core-image-upload（图片裁剪，文件上传）\"><a href=\"#vue-core-image-upload（图片裁剪，文件上传）\" class=\"headerlink\" title=\"vue-core-image-upload（图片裁剪，文件上传）\"></a><a href=\"http://vanthink-ued.github.io/vue-core-image-upload/index.html#/cn/home\" target=\"_blank\" rel=\"noopener\">vue-core-image-upload（图片裁剪，文件上传）</a></h5></li>\n<li><h5 id=\"vue-lazyload（图片懒加载）\"><a href=\"#vue-lazyload（图片懒加载）\" class=\"headerlink\" title=\"vue-lazyload（图片懒加载）\"></a><a href=\"https://github.com/hilongjw/vue-lazyload\" target=\"_blank\" rel=\"noopener\">vue-lazyload（图片懒加载）</a></h5></li>\n<li><h5 id=\"vue-pdf（PDF查看）\"><a href=\"#vue-pdf（PDF查看）\" class=\"headerlink\" title=\"vue-pdf（PDF查看）\"></a><a href=\"https://github.com/FranckFreiburger/vue-pdf\" target=\"_blank\" rel=\"noopener\">vue-pdf（PDF查看）</a></h5></li>\n<li><h5 id=\"vue-js-modal（模态框）\"><a href=\"#vue-js-modal（模态框）\" class=\"headerlink\" title=\"vue-js-modal（模态框）\"></a><a href=\"https://github.com/euvl/vue-js-modal\" target=\"_blank\" rel=\"noopener\">vue-js-modal（模态框）</a></h5></li>\n<li><h5 id=\"v-tooltip（提示组件）\"><a href=\"#v-tooltip（提示组件）\" class=\"headerlink\" title=\"v-tooltip（提示组件）\"></a><a href=\"https://github.com/Akryum/v-tooltip\" target=\"_blank\" rel=\"noopener\">v-tooltip（提示组件）</a></h5></li>\n<li><h5 id=\"vue-notifications（气泡提示）\"><a href=\"#vue-notifications（气泡提示）\" class=\"headerlink\" title=\"vue-notifications（气泡提示）\"></a><a href=\"https://github.com/se-panfilov/vue-notifications\" target=\"_blank\" rel=\"noopener\">vue-notifications（气泡提示）</a></h5></li>\n<li><h5 id=\"nprogress（网页进度条）\"><a href=\"#nprogress（网页进度条）\" class=\"headerlink\" title=\"nprogress（网页进度条）\"></a><a href=\"https://github.com/vue-bulma/nprogress\" target=\"_blank\" rel=\"noopener\">nprogress（网页进度条）</a></h5></li>\n<li><h5 id=\"vue-radial-progress（状态进度条）\"><a href=\"#vue-radial-progress（状态进度条）\" class=\"headerlink\" title=\"vue-radial-progress（状态进度条）\"></a><a href=\"https://github.com/wyzant-dev/vue-radial-progress\" target=\"_blank\" rel=\"noopener\">vue-radial-progress（状态进度条）</a></h5></li>\n<li><h5 id=\"vue-datasource（表格组件）\"><a href=\"#vue-datasource（表格组件）\" class=\"headerlink\" title=\"vue-datasource（表格组件）\"></a><a href=\"https://github.com/coderdiaz/vue-datasource\" target=\"_blank\" rel=\"noopener\">vue-datasource（表格组件）</a></h5></li>\n<li><h5 id=\"vue-baidu-map（百度地图继承组件）\"><a href=\"#vue-baidu-map（百度地图继承组件）\" class=\"headerlink\" title=\"vue-baidu-map（百度地图继承组件）\"></a><a href=\"https://github.com/Dafrok/vue-baidu-map\" target=\"_blank\" rel=\"noopener\">vue-baidu-map（百度地图继承组件）</a></h5></li>\n<li><h5 id=\"vue-aplayer（音乐播放器）\"><a href=\"#vue-aplayer（音乐播放器）\" class=\"headerlink\" title=\"vue-aplayer（音乐播放器）\"></a><a href=\"https://github.com/SevenOutman/vue-aplayer\" target=\"_blank\" rel=\"noopener\">vue-aplayer（音乐播放器）</a></h5></li>\n<li><h5 id=\"vuejs-sound-player（视频播放器）\"><a href=\"#vuejs-sound-player（视频播放器）\" class=\"headerlink\" title=\"vuejs-sound-player（视频播放器）\"></a><a href=\"https://github.com/shershen08/vuejs-sound-player\" target=\"_blank\" rel=\"noopener\">vuejs-sound-player（视频播放器）</a></h5></li>\n<li><h5 id=\"vuejs-datepicker（轻量日期选择器）\"><a href=\"#vuejs-datepicker（轻量日期选择器）\" class=\"headerlink\" title=\"vuejs-datepicker（轻量日期选择器）\"></a><a href=\"https://github.com/charliekassel/vuejs-datepicker\" target=\"_blank\" rel=\"noopener\">vuejs-datepicker（轻量日期选择器）</a></h5></li>\n<li><h5 id=\"vue-datepicker（日期选择器）\"><a href=\"#vue-datepicker（日期选择器）\" class=\"headerlink\" title=\"vue-datepicker（日期选择器）\"></a><a href=\"https://github.com/hilongjw/vue-datepicker\" target=\"_blank\" rel=\"noopener\">vue-datepicker（日期选择器）</a></h5></li>\n<li><h5 id=\"V-Distpicker（地区选择器）\"><a href=\"#V-Distpicker（地区选择器）\" class=\"headerlink\" title=\"V - Distpicker（地区选择器）\"></a><a href=\"https://distpicker.iline.co/\" target=\"_blank\" rel=\"noopener\">V - Distpicker（地区选择器）</a></h5></li>\n<li><h5 id=\"vue-event-calendar（日历）\"><a href=\"#vue-event-calendar（日历）\" class=\"headerlink\" title=\"vue-event-calendar（日历）\"></a><a href=\"https://github.com/GeoffZhu/vue-event-calendar\" target=\"_blank\" rel=\"noopener\">vue-event-calendar（日历）</a></h5></li>\n<li><h5 id=\"vue-select（下拉选择、标记组件）\"><a href=\"#vue-select（下拉选择、标记组件）\" class=\"headerlink\" title=\"vue-select（下拉选择、标记组件）\"></a><a href=\"http://sagalbot.github.io/vue-select\" target=\"_blank\" rel=\"noopener\">vue-select（下拉选择、标记组件）</a></h5></li>\n<li><h5 id=\"Vue-Draggable（拖拽组件）\"><a href=\"#Vue-Draggable（拖拽组件）\" class=\"headerlink\" title=\"Vue.Draggable（拖拽组件）\"></a><a href=\"https://github.com/SortableJS/Vue.Draggable\" target=\"_blank\" rel=\"noopener\">Vue.Draggable（拖拽组件）</a></h5></li>\n<li><h5 id=\"vue-qart（二维码动态生成）\"><a href=\"#vue-qart（二维码动态生成）\" class=\"headerlink\" title=\"vue-qart（二维码动态生成）\"></a><a href=\"https://github.com/superman66/vue-qart\" target=\"_blank\" rel=\"noopener\">vue-qart（二维码动态生成）</a></h5></li>\n<li><h5 id=\"vue-js-toggle-button（button开关）\"><a href=\"#vue-js-toggle-button（button开关）\" class=\"headerlink\" title=\"vue-js-toggle-button（button开关）\"></a><a href=\"http://vue-js-toggle-button.yev.io/\" target=\"_blank\" rel=\"noopener\">vue-js-toggle-button（button开关）</a></h5></li>\n<li><h5 id=\"vue-form-wizard（步骤指引）\"><a href=\"#vue-form-wizard（步骤指引）\" class=\"headerlink\" title=\"vue-form-wizard（步骤指引）\"></a><a href=\"https://github.com/cristijora/vue-form-wizard\" target=\"_blank\" rel=\"noopener\">vue-form-wizard（步骤指引）</a></h5></li>\n<li><h5 id=\"vue-pull-refresh（移动端下拉刷新）\"><a href=\"#vue-pull-refresh（移动端下拉刷新）\" class=\"headerlink\" title=\"vue-pull-refresh（移动端下拉刷新）\"></a><a href=\"https://github.com/lakb248/vue-pull-refresh\" target=\"_blank\" rel=\"noopener\">vue-pull-refresh（移动端下拉刷新）</a></h5></li>\n<li><h5 id=\"vue-markdown（Markdown编辑器）\"><a href=\"#vue-markdown（Markdown编辑器）\" class=\"headerlink\" title=\"vue-markdown（Markdown编辑器）\"></a><a href=\"https://github.com/miaolz123/vue-markdown\" target=\"_blank\" rel=\"noopener\">vue-markdown（Markdown编辑器）</a></h5></li>\n<li><h5 id=\"vue-social-sharing（社交分享）\"><a href=\"#vue-social-sharing（社交分享）\" class=\"headerlink\" title=\"vue-social-sharing（社交分享）\"></a><a href=\"https://github.com/nicolasbeauvais/vue-social-sharing\" target=\"_blank\" rel=\"noopener\">vue-social-sharing（社交分享）</a></h5></li>\n<li><h5 id=\"vue-markdown（Markdown编辑器）-1\"><a href=\"#vue-markdown（Markdown编辑器）-1\" class=\"headerlink\" title=\"vue-markdown（Markdown编辑器）\"></a><a href=\"https://github.com/miaolz123/vue-markdown\" target=\"_blank\" rel=\"noopener\">vue-markdown（Markdown编辑器）</a></h5></li>\n<li><h5 id=\"vue-social-sharing（社交分享）-1\"><a href=\"#vue-social-sharing（社交分享）-1\" class=\"headerlink\" title=\"vue-social-sharing（社交分享）\"></a><a href=\"https://github.com/nicolasbeauvais/vue-social-sharing\" target=\"_blank\" rel=\"noopener\">vue-social-sharing（社交分享）</a></h5></li>\n</ul>\n","excerpt":"vue常用开发组件 element （web UI工具套件） iView （ UI 组件库）","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://www.ding1996.cn/tags/vue/"}]},{"title":"Vue2.0总结———vue使用过程常见的一些问题","date":"2017-06-27T08:42:56.000Z","path":"2017/06/27/it-vue-error/","text":"Vue目前的的开发模式主要有两种：1.直接页面级的开发，script直接引入Vue2.工程性开发，webpack+loader或者直接使用脚手架工具Vue-cli，里面的文件都配置好了webpack可以进行配置，配置多文件入口，进行多页面开发 第二种Vue开发，结合webpack打包完文件会很大，怎么解决这个问题?1.webpack代码拆分：code-spliting2.提取公共（如提取css,js）3.预渲染：使用prerender-spa-plugin插件4.后台————开启压缩，gzip (会很有用)5.异步加载组件：require.ensure Vue常见错误解决方法：1.[Vue-warn]: Missing required prop: “to” (found in component )这个错误是少了个to或者是写错 ，正确写法为：并且路由在做字符串拼接的时候，to要作为一个属性绑定 2.端口冲突错误：需要改端口 当然现在vue2.0中的webpack 已经自己会根据你的端口号进行改正，从8080往后面进行递增， 不会发生端口号冲突的情况，在vue1.0中会经常出现3.[Vue-warn]:Unknown custom element: - did you register the component correctiy?错误1：引进来的vue-router没有use() import Vue from ‘vue’ import VueRouter from ‘vue-router’ Vue.use(VueRouter);错误2：在生成路由实例之后，没有将路由挂到我们的Vue实例上面 1234567891011121314const router=new VueRouter(&#123; mode:'history',//切换路径模式，变成history模式,不然路径为/#/home scrollBehavior:()=&gt;(&#123; // 滚动条滚动的行为，不加这个默认就会记忆原来滚动条的位置 y:0 &#125;), // 注意这里的名称 routes&#125;);new Vue(&#123; // 4.最后挂到vue上 router, el: '#app', render: h =&gt; h(App)&#125;); 4.Uncaught TypeError: _vuex2.default.store is not a constructor 这个报错的是_vuex2.default.store 不是一个构造函数 因为在我们用vuex的时候需要将用到的actions，mutations模块最终导出， 在导出的时候new Vuex.Store中的Store小写了，这里的一定要大写， 就相当于我们在使用构造函数(类)的时候首字母要大写123456789 import mutations from './mutations.js' import actions from './actions.js' export default new Vuex.Store(&#123; //Vue.Stroe()首字母大写 modules:&#123; //这里注意mutations导出的是一个模块 mutations &#125;, actions &#125;); Moudel not found:Error:Can’t resolve “style” in ‘D:\\vue-demo’ 在vue1.0中，在webpack.config.js中配置css文件时12345678module:&#123; loaders:[ &#123; test:/\\.css$/, loader:'style!css' &#125; ] &#125; 在vue2.0中，在webpack.config.js中配置css文件时，必须要写全，不能和vue1.0一样简写 12345678module:&#123; rules:[ //这里改成了rules &#123; test:/\\.css$/, loader:'style-loader!css-loader' //这里必须要写全，不能和vue1.0一样简写 &#125; ] &#125; 6.组件之间的通信从1.0过渡到2.0时引发的错误：vue1.0实现父子组件的通信 –&gt;通过props属性–&gt;并且子组件可以更改父组件的数据 通过sync同步 当在vue2.0里面不允许直接给父级数据做更改,并且把这个方法.sync去掉了， 当子组件再试图更改父组件的数据时，就会报错。解决方法： 1.$emit()——单一事件管理 经常遇到的问题是找不到$emit()或$on(),这时需要单独准备一个文件Store.js 在文件里面需要:var oEvent =new Vue(); 这个这个文件里的数据一定要导出去才可以使用：export default oEvent 2.对象之间的引用：(推荐使用) vue1.0传数据：msg:’welcome’ –&gt;传给子级 vue2.0直接将数据定义成对象json的形式，这样传给子级的数据是对象的属性，即msg.title 这样子级修改父级的数据，修改的也是这个对象的一个属性msg.title msg:{ title:’welcome’ } msg.title 7.用vuex用来管理组件状态：（增加/减少，显示/隐藏）8.axios目前不可以use，因为axios里面没有install这个方法使用axios的时候，可以这样来使用：1.将axios导入文件 import axios from ‘axios’2.将axios放入到Vue实例上面，这样在其他组件中，可以直接通过 12345678this.$https.get/post使用 在main.js中写：Vue.prototype.$http = axios 其他组件可以直接使用： this.$http.get('data.txt').then((res)=&gt;&#123; console.log(res.data); &#125;).catch((err)=&gt;&#123; console.log(err); &#125;); 10 element.ui表头点击事件使用element.ui之后 @click=”” 无法对表头等元素添加点击事件，正确的写法应该是@click.native=”” 11 webpack2.0 插件的配置需要放到 plugins里面进行配置，不可放到rules里面进行配置 webpack 怎么打包 favicon ？如果你是用 html-webpack-plugins 来处理 html的话，这个插件已经提供了 favicon ，你只要写好 favicon 所在的路径就可以了， 如： 1234const htmlPlugin = new HtmlWebpackPlugin(&#123; favicon: path.resolve(publicDir, './imgs/favicon.ico')&#125;);pluginsConfig.push(htmlPlugin); 插件就会自动帮你打包到 html 的 head 里面;不是的话需要自己处理这个图标，再引用","content":"<p><strong>Vue目前的的开发模式主要有两种：</strong><br>1.直接页面级的开发，script直接引入Vue<br>2.工程性开发，webpack+loader或者直接使用脚手架工具Vue-cli，里面的文件都配置好了<br>webpack可以进行配置，配置多文件入口，进行多页面开发</p>\n<p><strong>第二种Vue开发，结合webpack打包完文件会很大，怎么解决这个问题?</strong><br>1.webpack代码拆分：code-spliting<br>2.提取公共（如提取css,js）<br>3.预渲染：使用prerender-spa-plugin插件<br>4.后台————开启压缩，gzip    (会很有用)<br>5.异步加载组件：require.ensure</p>\n<a id=\"more\"></a>\n<h3 id=\"Vue常见错误解决方法：\"><a href=\"#Vue常见错误解决方法：\" class=\"headerlink\" title=\"Vue常见错误解决方法：\"></a>Vue常见错误解决方法：</h3><p>1.[Vue-warn]:    Missing required prop: “to”  (found in component <router-link>)<br>这个错误是<router-link>少了个to或者是写错 ，正确写法为：<router-link to=\"/home\"><br>并且路由在做字符串拼接的时候，to要作为一个属性绑定 <router-link :to=\"'/home/'+item.id\"><br>2.端口冲突错误：需要改端口<br>　　当然现在vue2.0中的webpack 已经自己会根据你的端口号进行改正，从8080往后面进行递增，<br>　　不会发生端口号冲突的情况，在vue1.0中会经常出现<br>3.[Vue-warn]:Unknown custom element: <router-link> - did you register the component correctiy?<br>错误1：引进来的vue-router没有use()<br>　　import Vue from ‘vue’<br>　　import VueRouter from ‘vue-router’<br>　　Vue.use(VueRouter);<br>错误2：在生成路由实例之后，没有将路由挂到我们的Vue实例上面</router-link></router-link></router-link></router-link></router-link></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router=<span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">　　mode:<span class=\"string\">'history'</span>,<span class=\"comment\">//切换路径模式，变成history模式,不然路径为/#/home</span></span><br><span class=\"line\">　　scrollBehavior:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>(&#123; <span class=\"comment\">// 滚动条滚动的行为，不加这个默认就会记忆原来滚动条的位置</span></span><br><span class=\"line\">　　　　y:<span class=\"number\">0</span></span><br><span class=\"line\">　　&#125;),</span><br><span class=\"line\">　　<span class=\"comment\">// 注意这里的名称</span></span><br><span class=\"line\">　　routes</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">　   <span class=\"comment\">// 4.最后挂到vue上</span></span><br><span class=\"line\">　　router,</span><br><span class=\"line\">　　el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">　　render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>4.Uncaught TypeError: _vuex2.default.store is not a constructor<br>　　这个报错的是_vuex2.default.store 不是一个构造函数<br>　　因为在我们用vuex的时候需要将用到的actions，mutations模块最终导出，<br>　　在导出的时候new Vuex.Store中的Store小写了，这里的一定要大写，<br>　　就相当于我们在使用构造函数(类)的时候首字母要大写<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"keyword\">import</span> mutations <span class=\"keyword\">from</span> <span class=\"string\">'./mutations.js'</span></span><br><span class=\"line\">　　<span class=\"keyword\">import</span> actions <span class=\"keyword\">from</span> <span class=\"string\">'./actions.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;\t<span class=\"comment\">//Vue.Stroe()首字母大写</span></span><br><span class=\"line\">　　　　modules:&#123; <span class=\"comment\">//这里注意mutations导出的是一个模块</span></span><br><span class=\"line\">　　　　　　mutations</span><br><span class=\"line\">　　　　&#125;,</span><br><span class=\"line\">　　　　　　actions</span><br><span class=\"line\">　　　　&#125;);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"5\">\n<li>Moudel not found:Error:Can’t resolve “style” in ‘D:\\vue-demo’<br>　　在vue1.0中，在webpack.config.js中配置css文件时<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">　　　　loaders:[</span><br><span class=\"line\">　　　　　　&#123;</span><br><span class=\"line\">　　　　　　　　test:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">　　　　　　　　loader:<span class=\"string\">'style!css'</span></span><br><span class=\"line\">　　　　　　&#125;</span><br><span class=\"line\">　　　　]</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在vue2.0中，在webpack.config.js中配置css文件时，必须要写全，不能和vue1.0一样简写<br>　<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">　　　　rules:[\t<span class=\"comment\">//这里改成了rules</span></span><br><span class=\"line\">　　　　　　&#123;</span><br><span class=\"line\">　　　　　　　　test:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">　　　　　　　　loader:<span class=\"string\">'style-loader!css-loader'</span> <span class=\"comment\">//这里必须要写全，不能和vue1.0一样简写</span></span><br><span class=\"line\">　　　　　　&#125;</span><br><span class=\"line\">　　　　]</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure></p>\n<p>6.组件之间的通信从1.0过渡到2.0时引发的错误：<br>vue1.0实现父子组件的通信 –&gt;通过props属性–&gt;并且子组件可以更改父组件的数据 通过sync同步<br>　　当在vue2.0里面不允许直接给父级数据做更改,并且把这个方法.sync去掉了，<br>　　当子组件再试图更改父组件的数据时，就会报错。<br>解决方法：<br>　　1.$emit()——单一事件管理<br>　　　　经常遇到的问题是找不到$emit()或$on(),这时需要单独准备一个文件Store.js<br>　　　　在文件里面需要:var oEvent =new Vue();<br>　　　　这个这个文件里的数据一定要导出去才可以使用：export default oEvent</p>\n<p>　　2.对象之间的引用：(推荐使用)<br>　　　　vue1.0传数据：msg:’welcome’ –&gt;传给子级<br>　　　　vue2.0直接将数据定义成对象json的形式，这样传给子级的数据是对象的属性，即msg.title<br>　　　　这样子级修改父级的数据，修改的也是这个对象的一个属性msg.title<br>　　　　　　msg:{<br>　　　　　　　　title:’welcome’<br>　　　　　　}<br>　　　　　　msg.title</p>\n<p>7.用vuex用来管理组件状态：（增加/减少，显示/隐藏）<br>8.axios目前不可以use，因为axios里面没有install这个方法<br>使用axios的时候，可以这样来使用：<br>1.将axios导入文件<br>    import axios from ‘axios’<br>2.将axios放入到Vue实例上面，这样在其他组件中，可以直接通过</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$https.get/post使用</span><br><span class=\"line\">　　在main.js中写：Vue.prototype.$http = axios</span><br><span class=\"line\">　　其他组件可以直接使用：</span><br><span class=\"line\">　　<span class=\"keyword\">this</span>.$http.get(<span class=\"string\">'data.txt'</span>).then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">　　　　<span class=\"built_in\">console</span>.log(res.data);</span><br><span class=\"line\">　　&#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">　　　　<span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">　　&#125;);</span><br></pre></td></tr></table></figure>\n<p>10 element.ui表头点击事件使用element.ui之后 @click=”” 无法对表头等元素添加点击事件，正确的写法应该是@click.native=””</p>\n<p>11 webpack2.0 插件的配置需要放到 plugins里面进行配置，不可放到rules里面进行配置</p>\n<h3 id=\"webpack-怎么打包-favicon-？\"><a href=\"#webpack-怎么打包-favicon-？\" class=\"headerlink\" title=\"webpack 怎么打包 favicon ？\"></a>webpack 怎么打包 favicon ？</h3><p>如果你是用 html-webpack-plugins 来处理 html的话，这个插件已经提供了 favicon ，你只要写好 favicon 所在的路径就可以了， 如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> htmlPlugin = <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">    favicon: path.resolve(publicDir, <span class=\"string\">'./imgs/favicon.ico'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">pluginsConfig.push(htmlPlugin);</span><br></pre></td></tr></table></figure>\n<p>插件就会自动帮你打包到 html 的 head 里面;不是的话需要自己处理这个图标，再引用</p>\n","excerpt":"Vue目前的的开发模式主要有两种：1.直接页面级的开发，script直接引入Vue2.工程性开发，webpack+loader或者直接使用脚手架工具Vue-cli，里面的文件都配置好了webpack可以进行配置，配置多文件入口，进行多页面开发 第二种Vue开发，结合webpack打包完文件会很大，怎么解决这个问题?1.webpack代码拆分：code-spliting2.提取公共（如提取css,js）3.预渲染：使用prerender-spa-plugin插件4.后台————开启压缩，gzip (会很有用)5.异步加载组件：require.ensure","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://www.ding1996.cn/tags/vue/"}]},{"title":"vue文件中使用scss解决报错问题","date":"2017-06-26T07:53:14.000Z","path":"2017/06/26/it-vue-sas/","text":"vue-cli手脚架中没有安装sass-loader需要自行安装 在vue文件中使用 scss 写css会报错 需要到webpack中配置 123456789&#123; test: /\\.vue$/, loader: 'vue-loader', options: &#123; loaders: &#123; 'scss': 'style-loader!css-loader!sass-loader' &#125; &#125; &#125; 如果需要在vue文件style标签使用scss的话，需要声明一下： 1&lt;style rel=\"stylesheet/scss\" lang=\"scss\"&gt;","content":"<p>vue-cli手脚架中没有安装sass-loader<br>需要自行安装 在vue文件中使用 scss 写css会报错 需要到webpack中配置</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        test: /\\.vue$/,</span><br><span class=\"line\">        loader: 'vue-loader',</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          loaders: &#123;</span><br><span class=\"line\">            'scss': 'style-loader!css-loader!sass-loader'</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>如果需要在vue文件style标签使用scss的话，需要声明一下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet/scss\"</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"scss\"</span>&gt;</span><span class=\"undefined\"></span></span><br></pre></td></tr></table></figure>\n","excerpt":"","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://www.ding1996.cn/tags/vue/"},{"name":"webpack","slug":"webpack","permalink":"http://www.ding1996.cn/tags/webpack/"}]},{"title":"webpack sass-loader安装使用","date":"2017-06-24T13:51:28.000Z","path":"2017/06/24/it-webpack-sass-loader/","text":"elementUI 默认webpack配置是没有sass-loader的sass-loader 依赖 node-sass 这个插件所以我们需要安装两个插件12npm install --save-dev node-sass (注：sass-loader依赖于node-sass)npm install --save-dev sass-loader 把css全部提取出来还有个插件1npm install extract-text-webpack-plugin --save-dev 如何使用sass-loader和extract-text-webpack-plugin 请看下面配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990const resolve = require('path').resolveconst webpack = require('webpack')const HtmlWebpackPlugin = require('html-webpack-plugin')const ExtractTextPlugin = require('extract-text-webpack-plugin') // 把分离css插件加载进来const url = require('url')const publicPath = ''module.exports = (options = &#123;&#125;) =&gt; (&#123; entry: &#123; vendor: './src/vendor', index: './src/main.js' &#125;, output: &#123; path: resolve(__dirname, 'dist'), filename: options.dev ? '[name].js' : '[name].js?[chunkhash]', chunkFilename: '[id].js?[chunkhash]', publicPath: options.dev ? '/assets/' : publicPath &#125;, module: &#123; rules: [&#123; test: /\\.vue$/, use: ['vue-loader'] &#125;, &#123; test: /\\.js$/, use: ['babel-loader'], exclude: /node_modules/ &#125;, &#123; test: /\\.css$/, use: ExtractTextPlugin.extract(&#123; fallback: 'style-loader', use: ['css-loader', 'sass-loader', 'postcss-loader'] &#125;) // 通过use来使用插件 &#125;, &#123; // 匹配scss文件 test: /\\.scss$/, /* 先使用sass-loader处理, 返回的结果交给css-loader处理 */ use: ExtractTextPlugin.extract(&#123; fallback: 'style-loader', use: ['css-loader', 'sass-loader', 'postcss-loader'] &#125;) &#125;, &#123; test: /\\.(png|jpg|jpeg|gif|eot|ttf|woff|woff2|svg|svgz)(\\?.+)?$/, use: [&#123; loader: 'url-loader', options: &#123; limit: 10000 &#125; &#125;] &#125; ] &#125;, plugins: [ new webpack.optimize.CommonsChunkPlugin(&#123; names: ['vendor', 'manifest'] &#125;), new ExtractTextPlugin(\"style.css\"), //提取出来的样式放在style.css文件中 new HtmlWebpackPlugin(&#123; template: 'src/index.html' &#125;) ], resolve: &#123; alias: &#123; '~': resolve(__dirname, 'src') &#125; &#125;, devServer: &#123; host: '127.0.0.1', port: 8010, proxy: &#123; '/api/': &#123; target: 'http://127.0.0.1:8080', changeOrigin: true, pathRewrite: &#123; '^/api': '' &#125; &#125; &#125;, historyApiFallback: &#123; index: url.parse(options.dev ? '/assets/' : publicPath).pathname &#125; &#125;, devtool: options.dev ? '#eval-source-map' : '#source-map'&#125;)","content":"<p>elementUI 默认webpack配置是没有sass-loader的<br>sass-loader 依赖 node-sass 这个插件所以我们需要安装两个插件<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev <span class=\"keyword\">node</span><span class=\"title\">-sass</span>  (注：sass-loader依赖于<span class=\"keyword\">node</span><span class=\"title\">-sass</span>)</span><br><span class=\"line\">npm install --save-dev sass-loader</span><br></pre></td></tr></table></figure></p>\n<p>把css全部提取出来还有个插件<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"keyword\">extract</span>-<span class=\"built_in\">text</span>-webpack-<span class=\"keyword\">plugin</span> <span class=\"comment\">--save-dev</span></span><br></pre></td></tr></table></figure></p>\n<p>如何使用sass-loader和extract-text-webpack-plugin 请看下面配置</p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resolve = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>).resolve</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>)  <span class=\"comment\">// 把分离css插件加载进来</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> publicPath = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\">(<span class=\"params\">options = &#123;&#125;</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    vendor: <span class=\"string\">'./src/vendor'</span>,</span><br><span class=\"line\">    index: <span class=\"string\">'./src/main.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: options.dev ? <span class=\"string\">'[name].js'</span> : <span class=\"string\">'[name].js?[chunkhash]'</span>,</span><br><span class=\"line\">    chunkFilename: <span class=\"string\">'[id].js?[chunkhash]'</span>,</span><br><span class=\"line\">    publicPath: options.dev ? <span class=\"string\">'/assets/'</span> : publicPath</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [&#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'vue-loader'</span>]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'babel-loader'</span>],</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          use: [<span class=\"string\">'css-loader'</span>, <span class=\"string\">'sass-loader'</span>, <span class=\"string\">'postcss-loader'</span>]</span><br><span class=\"line\">        &#125;) <span class=\"comment\">// 通过use来使用插件</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 匹配scss文件</span></span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        先使用sass-loader处理, 返回的结果交给css-loader处理</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          use: [<span class=\"string\">'css-loader'</span>, <span class=\"string\">'sass-loader'</span>, <span class=\"string\">'postcss-loader'</span>]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|jpeg|gif|eot|ttf|woff|woff2|svg|svgz)(\\?.+)?$/</span>,</span><br><span class=\"line\">        use: [&#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            limit: <span class=\"number\">10000</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      names: [<span class=\"string\">'vendor'</span>, <span class=\"string\">'manifest'</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"style.css\"</span>), <span class=\"comment\">//提取出来的样式放在style.css文件中</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: <span class=\"string\">'src/index.html'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">'~'</span>: resolve(__dirname, <span class=\"string\">'src'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    host: <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">    port: <span class=\"number\">8010</span>,</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">      <span class=\"string\">'/api/'</span>: &#123;</span><br><span class=\"line\">        target: <span class=\"string\">'http://127.0.0.1:8080'</span>,</span><br><span class=\"line\">        changeOrigin: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        pathRewrite: &#123;</span><br><span class=\"line\">          <span class=\"string\">'^/api'</span>: <span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    historyApiFallback: &#123;</span><br><span class=\"line\">      index: url.parse(options.dev ? <span class=\"string\">'/assets/'</span> : publicPath).pathname</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devtool: options.dev ? <span class=\"string\">'#eval-source-map'</span> : <span class=\"string\">'#source-map'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","excerpt":"elementUI 默认webpack配置是没有sass-loader的sass-loader 依赖 node-sass 这个插件所以我们需要安装两个插件12npm install --save-dev node-sass (注：sass-loader依赖于node-sass)npm install --save-dev sass-loader 把css全部提取出来还有个插件1npm install extract-text-webpack-plugin --save-dev 如何使用sass-loader和extract-text-webpack-plugin 请看下面配置","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"http://www.ding1996.cn/tags/mac/"},{"name":"webpack","slug":"webpack","permalink":"http://www.ding1996.cn/tags/webpack/"}]},{"title":"WebStorm快捷键（Mac版）","date":"2017-06-23T13:51:28.000Z","path":"2017/06/23/it-webstorm/","text":"俗话说工欲善其事必先利其器，熟练的快捷键操作是提升工作效率的一部分，下面带来webstorm的快捷键 ⌘——Command⌃ ——Control⌥——alt⇧——Shift⇪——Caps Lockfn——功能键就是fn 更多快捷键 编辑Command+alt+T 用 (if..else, try..catch, for, etc.)包住Command+/ 注释/取消注释的行注释Command+alt+/ 注释/取消注释与块注释alt+↑ 向上选取代码块alt+↓ 向下选取代码块Command+alt+L 格式化代码tab,shift+tab 调整缩进Control+alt+I 快速调整缩进Command+C 复制Command+X 剪切Command+V 粘贴Command+shift+V 从剪贴板里选择粘贴Command+D 复制代码副本Command+delete 删除当前行Control+Shift+J 清除缩进变成单行shift+回车 快速换行Command+回车 换行光标还在原先位置Command+shift+U 大小写转换Command+shift+[,Command+shift+] 文件选项卡快速切换Command+加号,Command+减号 收缩代码块Command+shift+加号，Command+shift+减号 收缩整个文档的代码块Command+W 关闭当前文件选项卡alt+单击 光标在多处定位Control+shift+J 把下面行的缩进收上来shift + F6 高级修改，可快速修改光标所在的标签、变量、函数等alt+/ 代码补全 调试Control+alt+R 运行项目Command+Control+R 运行DebugCommand+F8 添加断点Command+shift+F8 打开断点列表 导航Command+O 跳转到某个类Command+shift+O 跳转到某个文件Command+alt+O 跳转到某个符号Control+←,Control+→ 转到上/下一个编辑器选项卡F12 打开之前打开的工具窗口（TODO、终端等）Command+L 跳转行Command+E 弹出最近文件Command+alt+←,Command+alt+→ 向前向后导航到代码块交接处（一般是空行处）Command+shift+delete 导航到上一个编辑位置的位置Command+B 跳转到变量声明处Control+J 获取变量相关信息（类型、注释等，注释是拿上一行的注释）Command+Y 小浮窗显示变量声明时的行Command+[,Command+] 光标现在的位置和之前的位置切换Command+F12 文件结构弹出式菜单alt+H 类的层次结构F2,shift+F2 切换到上\\下一个突出错误的位置Command+↑ 跳转到导航栏F3 添加书签alt+F3 添加带助记的书签alt+1,alt+2… 切换到相应助记的书签位置Command+F3 打开书签列表 VCS/本地历史记录control+V 打开VST小浮窗Command+K 提交项目Command+T 更新项目alt+shift+C 打开最近修改列表 搜索和替换Command+F 搜索Command+R 替换Command+G 查找下一个Command+shift+G 查找下一个Command+shift+F 按路径搜索Command+shift+R 按路径替换 选中文字的搜索Command+F7 向声明的地方搜索并选中Command+shift+F7 打开搜索框进行搜索Command+alt+F7 打开小浮窗显示搜索列表对项目文件的操作（重构）F5 复制文件到某个目录F6 移动文件到某个目录Command+delete 安全删除shist+F6 重命名 全局的双击shift 弹出小浮窗搜索所有Command+切换项目 Command+shift+ 反向切换项目Command+shift+A 整个工程的查找操作Command+1,Command+2… 打开各种工具窗口alt+shift+F 把文件添加到收藏夹alt+shift+I 打开项目描述alt+~ 快速切换当前计划Command+, 设置编辑器Control+Tab 选项卡和工具窗口之间进行切换alert+回车 显示npm版本升级列表","content":"<blockquote>\n<p>俗话说工欲善其事必先利其器，熟练的快捷键操作是提升工作效率的一部分，下面带来webstorm的快捷键</p>\n</blockquote>\n<p>⌘——Command<br>⌃ ——Control<br>⌥——alt<br>⇧——Shift<br>⇪——Caps Lock<br>fn——功能键就是fn</p>\n<p><a href=\"http://yijiebuyi.com/blog/d2d4810647c507840c0f782ff15404df.html\" target=\"_blank\" rel=\"noopener\">更多快捷键</a></p>\n<a id=\"more\"></a>\n<h3 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑\"></a>编辑</h3><p>Command+alt+T 用 (if..else, try..catch, for, etc.)包住<br>Command+/ 注释/取消注释的行注释<br>Command+alt+/ 注释/取消注释与块注释<br>alt+↑ 向上选取代码块<br>alt+↓ 向下选取代码块<br>Command+alt+L 格式化代码<br>tab,shift+tab 调整缩进<br>Control+alt+I 快速调整缩进<br>Command+C 复制<br>Command+X 剪切<br>Command+V 粘贴<br>Command+shift+V 从剪贴板里选择粘贴<br>Command+D 复制代码副本<br>Command+delete 删除当前行<br>Control+Shift+J 清除缩进变成单行<br>shift+回车 快速换行<br>Command+回车 换行光标还在原先位置<br>Command+shift+U 大小写转换<br>Command+shift+[,Command+shift+] 文件选项卡快速切换<br>Command+加号,Command+减号 收缩代码块<br>Command+shift+加号，Command+shift+减号 收缩整个文档的代码块<br>Command+W 关闭当前文件选项卡<br>alt+单击 光标在多处定位<br>Control+shift+J 把下面行的缩进收上来<br>shift + F6 高级修改，可快速修改光标所在的标签、变量、函数等<br>alt+/ 代码补全</p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>Control+alt+R 运行项目<br>Command+Control+R 运行Debug<br>Command+F8 添加断点<br>Command+shift+F8 打开断点列表</p>\n<h3 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h3><p>Command+O 跳转到某个类<br>Command+shift+O 跳转到某个文件<br>Command+alt+O 跳转到某个符号<br>Control+←,Control+→ 转到上/下一个编辑器选项卡<br>F12 打开之前打开的工具窗口（TODO、终端等）<br>Command+L 跳转行<br>Command+E 弹出最近文件<br>Command+alt+←,Command+alt+→ 向前向后导航到代码块交接处（一般是空行处）<br>Command+shift+delete 导航到上一个编辑位置的位置<br>Command+B 跳转到变量声明处<br>Control+J 获取变量相关信息（类型、注释等，注释是拿上一行的注释）<br>Command+Y 小浮窗显示变量声明时的行<br>Command+[,Command+] 光标现在的位置和之前的位置切换<br>Command+F12 文件结构弹出式菜单<br>alt+H 类的层次结构<br>F2,shift+F2 切换到上\\下一个突出错误的位置<br>Command+↑ 跳转到导航栏<br>F3 添加书签<br>alt+F3 添加带助记的书签<br>alt+1,alt+2… 切换到相应助记的书签位置<br>Command+F3 打开书签列表</p>\n<h3 id=\"VCS-本地历史记录\"><a href=\"#VCS-本地历史记录\" class=\"headerlink\" title=\"VCS/本地历史记录\"></a>VCS/本地历史记录</h3><p>control+V 打开VST小浮窗<br>Command+K 提交项目<br>Command+T 更新项目<br>alt+shift+C 打开最近修改列表</p>\n<h3 id=\"搜索和替换\"><a href=\"#搜索和替换\" class=\"headerlink\" title=\"搜索和替换\"></a>搜索和替换</h3><p>Command+F 搜索<br>Command+R 替换<br>Command+G 查找下一个<br>Command+shift+G 查找下一个<br>Command+shift+F 按路径搜索<br>Command+shift+R 按路径替换</p>\n<h3 id=\"选中文字的搜索\"><a href=\"#选中文字的搜索\" class=\"headerlink\" title=\"选中文字的搜索\"></a>选中文字的搜索</h3><p>Command+F7 向声明的地方搜索并选中<br>Command+shift+F7 打开搜索框进行搜索<br>Command+alt+F7 打开小浮窗显示搜索列表<br>对项目文件的操作（重构）<br>F5 复制文件到某个目录<br>F6 移动文件到某个目录<br>Command+delete 安全删除<br>shist+F6 重命名</p>\n<h3 id=\"全局的\"><a href=\"#全局的\" class=\"headerlink\" title=\"全局的\"></a>全局的</h3><p>双击shift 弹出小浮窗搜索所有<br>Command+切换项目 Command+shift+ 反向切换项目<br>Command+shift+A 整个工程的查找操作<br>Command+1,Command+2… 打开各种工具窗口<br>alt+shift+F 把文件添加到收藏夹<br>alt+shift+I 打开项目描述<br>alt+~ 快速切换当前计划<br>Command+, 设置编辑器<br>Control+Tab 选项卡和工具窗口之间进行切换<br>alert+回车 显示npm版本升级列表</p>\n","excerpt":"俗话说工欲善其事必先利其器，熟练的快捷键操作是提升工作效率的一部分，下面带来webstorm的快捷键 ⌘——Command⌃ ——Control⌥——alt⇧——Shift⇪——Caps Lockfn——功能键就是fn 更多快捷键","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"http://www.ding1996.cn/tags/mac/"},{"name":"编辑器","slug":"编辑器","permalink":"http://www.ding1996.cn/tags/编辑器/"}]},{"title":"19 个 JavaScript 常用的简写技术","date":"2017-06-23T08:08:12.000Z","path":"2017/06/23/it-js-skill/","text":"1.三元操作符当想写if…else语句时，使用三元操作符来代替。 1234567const x = 20;let answer;if (x &gt; 10) &#123; answer = 'is greater';&#125; else &#123; answer = 'is lesser';&#125; 简写： 123const answer = x &gt; 10 ? 'is greater' : 'is lesser';也可以嵌套if语句：const big = x &gt; 10 ? \" greater 10\" : x 2.短路求值简写方式当给一个变量分配另一个值时，想确定源始值不是null，undefined或空值。可以写撰写一个多重条件的if语句。 123if (variable1 !== null || variable1 !== undefined || variable1 !== '') &#123; let variable2 = variable1;&#125; 或者可以使用短路求值方法： 1const variable2 = variable1 || 'new'; 3.声明变量简写方法123let x;let y;let z = 3; 简写方法： 1let x, y, z=3; 4.if存在条件简写方法1if (likeJavaScript === true) 简写： 1if (likeJavaScript) 只有likeJavaScript是真值时，二者语句才相等 如果判断值不是真值，则可以这样： 1234let a;if ( a !== true ) &#123;// do something...&#125; 简写： 1234let a;if ( !a ) &#123;// do something...&#125; 5.JavaScript循环简写方法1for (let i = 0; i &lt; allImgs.length; i++) 简写： 1for (let index in allImgs) 也可以使用Array.forEach： 12345678function logArrayElements(element, index, array) &#123; console.log(\"a[\" + index + \"] = \" + element);&#125;[2, 5, 9].forEach(logArrayElements);// logs:// a[0] = 2// a[1] = 5// a[2] = 9 6.短路评价给一个变量分配的值是通过判断其值是否为null或undefined，则可以： 123456let dbHost;if (process.env.DB_HOST) &#123; dbHost = process.env.DB_HOST;&#125; else &#123; dbHost = 'localhost';&#125; 简写： 1const dbHost = process.env.DB_HOST || 'localhost'; 7.十进制指数当需要写数字带有很多零时（如10000000），可以采用指数（1e7）来代替这个数字： 1for (let i = 0; i &lt; 10000; i++) &#123;&#125; 简写： 123456789for (let i = 0; i &lt; 1e7; i++) &#123;&#125;// 下面都是返回true1e0 === 1;1e1 === 10;1e2 === 100;1e3 === 1000;1e4 === 10000;1e5 === 100000; 8.对象属性简写如果属性名与key名相同，则可以采用ES6的方法： 1const obj = &#123; x:x, y:y &#125;; 简写： 1const obj = &#123; x, y &#125;; 9.箭头函数简写传统函数编写方法很容易让人理解和编写，但是当嵌套在另一个函数中，则这些优势就荡然无存。 1234567891011function sayHello(name) &#123; console.log('Hello', name);&#125;setTimeout(function() &#123; console.log('Loaded')&#125;, 2000);list.forEach(function(item) &#123; console.log(item);&#125;); 简写： 12345sayHello = name =&gt; console.log('Hello', name);setTimeout(() =&gt; console.log('Loaded'), 2000);list.forEach(item =&gt; console.log(item)); 10.隐式返回值简写经常使用return语句来返回函数最终结果，一个单独语句的箭头函数能隐式返回其值（函数必须省略{}为了省略return关键字） 为返回多行语句（例如对象字面表达式），则需要使用()包围函数体。 1234567function calcCircumference(diameter) &#123; return Math.PI * diameter&#125;var func = function func() &#123; return &#123; foo: 1 &#125;;&#125;; 简写： 12345calcCircumference = diameter =&gt; ( Math.PI * diameter;)var func = () =&gt; (&#123; foo: 1 &#125;); 11.默认参数值为了给函数中参数传递默认值，通常使用if语句来编写，但是使用ES6定义默认值，则会很简洁： 1234567function volume(l, w, h) &#123; if (w === undefined) w = 3; if (h === undefined) h = 4; return l * w * h;&#125; 简写： 123volume = (l, w = 3, h = 4 ) =&gt; (l * w * h);volume(2) //output: 24 12.模板字符串传统的JavaScript语言，输出模板通常是这样写的。 123const welcome = 'You have logged in as ' + first + ' ' + last + '.'const db = 'http://' + host + ':' + port + '/' + database; ES6可以使用反引号和${}简写： 123const welcome = `You have logged in as $&#123;first&#125; $&#123;last&#125;`;const db = `http://$&#123;host&#125;:$&#123;port&#125;/$&#123;database&#125;`; 13.解构赋值简写方法在web框架中，经常需要从组件和API之间来回传递数组或对象字面形式的数据，然后需要解构它 123456789const observable = require('mobx/observable');const action = require('mobx/action');const runInAction = require('mobx/runInAction');const store = this.props.store;const form = this.props.form;const loading = this.props.loading;const errors = this.props.errors;const entity = this.props.entity; 简写： 123import &#123; observable, action, runInAction &#125; from 'mobx';const &#123; store, form, loading, errors, entity &#125; = this.props; 也可以分配变量名： 12const &#123; store, form, loading, errors, entity:contact &#125; = this.props;//最后一个变量名为contact 14.多行字符串简写需要输出多行字符串，需要使用+来拼接： 1234567891011121314const lorem = 'Lorem ipsum dolor sit amet, consectetur\\n\\t' + 'adipisicing elit, sed do eiusmod tempor incididunt\\n\\t' + 'ut labore et dolore magna aliqua. Ut enim ad minim\\n\\t' + 'veniam, quis nostrud exercitation ullamco laboris\\n\\t' + 'nisi ut aliquip ex ea commodo consequat. Duis aute\\n\\t' + 'irure dolor in reprehenderit in voluptate velit esse.\\n\\t'使用反引号，则可以达到简写作用：const lorem = `Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse.` 15.扩展运算符简写扩展运算符有几种用例让JavaScript代码更加有效使用，可以用来代替某个数组函数。 1234567// joining arraysconst odd = [1, 3, 5];const nums = [2 ,4 , 6].concat(odd);// cloning arraysconst arr = [1, 2, 3, 4];const arr2 = arr.slice() 简写： 123456789101112131415161718// joining arraysconst odd = [1, 3, 5 ];const nums = [2 ,4 , 6, ...odd];console.log(nums); // [ 2, 4, 6, 1, 3, 5 ]// cloning arraysconst arr = [1, 2, 3, 4];const arr2 = [...arr];不像concat()函数，可以使用扩展运算符来在一个数组中任意处插入另一个数组。const odd = [1, 3, 5 ];const nums = [2, ...odd, 4 , 6];也可以使用扩展运算符解构：const &#123; a, b, ...z &#125; = &#123; a: 1, b: 2, c: 3, d: 4 &#125;;console.log(a) // 1console.log(b) // 2console.log(z) // &#123; c: 3, d: 4 &#125; 16.强制参数简写JavaScript中如果没有向函数参数传递值，则参数为undefined。为了增强参数赋值，可以使用if语句来抛出异常，或使用强制参数简写方法。 123456function foo(bar) &#123; if(bar === undefined) &#123; throw new Error('Missing parameter!'); &#125; return bar;&#125; 简写： 1234567mandatory = () =&gt; &#123; throw new Error('Missing parameter!');&#125;foo = (bar = mandatory()) =&gt; &#123; return bar;&#125; 17.Array.find简写想从数组中查找某个值，则需要循环。在ES6中，find()函数能实现同样效果。 12345678910111213const pets = [ &#123; type: 'Dog', name: 'Max'&#125;, &#123; type: 'Cat', name: 'Karl'&#125;, &#123; type: 'Dog', name: 'Tommy'&#125;,]function findDog(name) &#123; for(let i = 0; i&lt;pets.length; ++i) &#123; if(pets[i].type === 'Dog' &amp;&amp; pets[i].name === name) &#123; return pets[i]; &#125; &#125;&#125; 简写： 12pet = pets.find(pet =&gt; pet.type ==='Dog' &amp;&amp; pet.name === 'Tommy');console.log(pet); // &#123; type: 'Dog', name: 'Tommy' &#125; 18.Object[key]简写考虑一个验证函数 123456789function validate(values) &#123; if(!values.first) return false; if(!values.last) return false; return true;&#125;console.log(validate(&#123;first:'Bruce',last:'Wayne'&#125;)); // true 假设当需要不同域和规则来验证，能否编写一个通用函数在运行时确认？ 12345678910111213141516171819202122232425// 对象验证规则const schema = &#123; first: &#123; required:true &#125;, last: &#123; required:true &#125;&#125;// 通用验证函数const validate = (schema, values) =&gt; &#123; for(field in schema) &#123; if(schema[field].required) &#123; if(!values[field]) &#123; return false; &#125; &#125; &#125; return true;&#125;console.log(validate(schema, &#123;first:'Bruce'&#125;)); // falseconsole.log(validate(schema, &#123;first:'Bruce',last:'Wayne'&#125;)); // true 现在可以有适用于各种情况的验证函数，不需要为了每个而编写自定义验证函数了 19.双重非位运算简写有一个有效用例用于双重非运算操作符。可以用来代替Math.floor()，其优势在于运行更快，可以阅读此文章了解更多位运算。 1Math.floor(4.9) === 4 //true 简写 1~~4.9 === 4 //true","content":"<h3 id=\"1-三元操作符\"><a href=\"#1-三元操作符\" class=\"headerlink\" title=\"1.三元操作符\"></a>1.三元操作符</h3><p>当想写if…else语句时，使用三元操作符来代替。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> x = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> answer;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (x &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    answer = <span class=\"string\">'is greater'</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    answer = <span class=\"string\">'is lesser'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> answer = x &gt; <span class=\"number\">10</span> ? <span class=\"string\">'is greater'</span> : <span class=\"string\">'is lesser'</span>;</span><br><span class=\"line\">也可以嵌套<span class=\"keyword\">if</span>语句：</span><br><span class=\"line\"><span class=\"keyword\">const</span> big = x &gt; <span class=\"number\">10</span> ? <span class=\"string\">\" greater 10\"</span> : x</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"2-短路求值简写方式\"><a href=\"#2-短路求值简写方式\" class=\"headerlink\" title=\"2.短路求值简写方式\"></a>2.短路求值简写方式</h3><p>当给一个变量分配另一个值时，想确定源始值不是null，undefined或空值。可以写撰写一个多重条件的if语句。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (variable1 !== <span class=\"literal\">null</span> || variable1 !== <span class=\"literal\">undefined</span> || variable1 !== <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> variable2 = variable1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者可以使用短路求值方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> variable2 = variable1  || <span class=\"string\">'new'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-声明变量简写方法\"><a href=\"#3-声明变量简写方法\" class=\"headerlink\" title=\"3.声明变量简写方法\"></a>3.声明变量简写方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y;</span><br><span class=\"line\"><span class=\"keyword\">let</span> z = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<p>简写方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x, y, z=<span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-if存在条件简写方法\"><a href=\"#4-if存在条件简写方法\" class=\"headerlink\" title=\"4.if存在条件简写方法\"></a>4.if存在条件简写方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (likeJavaScript === <span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (likeJavaScript)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>只有likeJavaScript是真值时，二者语句才相等</p>\n</blockquote>\n<p>如果判断值不是真值，则可以这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( a !== <span class=\"literal\">true</span> ) &#123;</span><br><span class=\"line\"><span class=\"comment\">// do something...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( !a ) &#123;</span><br><span class=\"line\"><span class=\"comment\">// do something...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-JavaScript循环简写方法\"><a href=\"#5-JavaScript循环简写方法\" class=\"headerlink\" title=\"5.JavaScript循环简写方法\"></a>5.JavaScript循环简写方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; allImgs.length; i++)</span><br></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> allImgs)</span><br></pre></td></tr></table></figure>\n<p>也可以使用Array.forEach：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logArrayElements</span>(<span class=\"params\">element, index, array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a[\"</span> + index + <span class=\"string\">\"] = \"</span> + element);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>].forEach(logArrayElements);</span><br><span class=\"line\"><span class=\"comment\">// logs:</span></span><br><span class=\"line\"><span class=\"comment\">// a[0] = 2</span></span><br><span class=\"line\"><span class=\"comment\">// a[1] = 5</span></span><br><span class=\"line\"><span class=\"comment\">// a[2] = 9</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-短路评价\"><a href=\"#6-短路评价\" class=\"headerlink\" title=\"6.短路评价\"></a>6.短路评价</h3><p>给一个变量分配的值是通过判断其值是否为null或undefined，则可以：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dbHost;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.env.DB_HOST) &#123;</span><br><span class=\"line\">  dbHost = process.env.DB_HOST;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  dbHost = <span class=\"string\">'localhost'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dbHost = <span class=\"built_in\">process</span>.env.DB_HOST || <span class=\"string\">'localhost'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-十进制指数\"><a href=\"#7-十进制指数\" class=\"headerlink\" title=\"7.十进制指数\"></a>7.十进制指数</h3><p>当需要写数字带有很多零时（如10000000），可以采用指数（1e7）来代替这个数字：</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (let <span class=\"built_in\">i</span> = <span class=\"number\">0</span>; <span class=\"built_in\">i</span> &lt; <span class=\"number\">10000</span>; <span class=\"built_in\">i</span>++) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1e7</span>; i++) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面都是返回true</span></span><br><span class=\"line\"><span class=\"number\">1e0</span> === <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"number\">1e1</span> === <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"number\">1e2</span> === <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"number\">1e3</span> === <span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"number\">1e4</span> === <span class=\"number\">10000</span>;</span><br><span class=\"line\"><span class=\"number\">1e5</span> === <span class=\"number\">100000</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-对象属性简写\"><a href=\"#8-对象属性简写\" class=\"headerlink\" title=\"8.对象属性简写\"></a>8.对象属性简写</h3><p>如果属性名与key名相同，则可以采用ES6的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">x</span>:x, <span class=\"attr\">y</span>:y &#125;;</span><br></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; x, y &#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-箭头函数简写\"><a href=\"#9-箭头函数简写\" class=\"headerlink\" title=\"9.箭头函数简写\"></a>9.箭头函数简写</h3><p>传统函数编写方法很容易让人理解和编写，但是当嵌套在另一个函数中，则这些优势就荡然无存。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span>, name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Loaded'</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">list.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sayHello = <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span>, name);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Loaded'</span>), <span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">list.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"built_in\">console</span>.log(item));</span><br></pre></td></tr></table></figure>\n<h3 id=\"10-隐式返回值简写\"><a href=\"#10-隐式返回值简写\" class=\"headerlink\" title=\"10.隐式返回值简写\"></a>10.隐式返回值简写</h3><p>经常使用return语句来返回函数最终结果，一个单独语句的箭头函数能隐式返回其值（函数必须省略{}为了省略return关键字）</p>\n<p>为返回多行语句（例如对象字面表达式），则需要使用()包围函数体。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calcCircumference</span>(<span class=\"params\">diameter</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * diameter</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">foo</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">calcCircumference = <span class=\"function\"><span class=\"params\">diameter</span> =&gt;</span> (</span><br><span class=\"line\">  <span class=\"built_in\">Math</span>.PI * diameter;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123; <span class=\"attr\">foo</span>: <span class=\"number\">1</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-默认参数值\"><a href=\"#11-默认参数值\" class=\"headerlink\" title=\"11.默认参数值\"></a>11.默认参数值</h3><p>为了给函数中参数传递默认值，通常使用if语句来编写，但是使用ES6定义默认值，则会很简洁：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">volume</span>(<span class=\"params\">l, w, h</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (w === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">    w = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (h === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">    h = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> l * w * h;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">volume = <span class=\"function\">(<span class=\"params\">l, w = <span class=\"number\">3</span>, h = <span class=\"number\">4</span> </span>) =&gt;</span> (l * w * h);</span><br><span class=\"line\"></span><br><span class=\"line\">volume(<span class=\"number\">2</span>) <span class=\"comment\">//output: 24</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"12-模板字符串\"><a href=\"#12-模板字符串\" class=\"headerlink\" title=\"12.模板字符串\"></a>12.模板字符串</h3><p>传统的JavaScript语言，输出模板通常是这样写的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> welcome = <span class=\"string\">'You have logged in as '</span> + first + <span class=\"string\">' '</span> + last + <span class=\"string\">'.'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> db = <span class=\"string\">'http://'</span> + host + <span class=\"string\">':'</span> + port + <span class=\"string\">'/'</span> + database;</span><br></pre></td></tr></table></figure>\n<p>ES6可以使用反引号和${}简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> welcome = <span class=\"string\">`You have logged in as <span class=\"subst\">$&#123;first&#125;</span> <span class=\"subst\">$&#123;last&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> db = <span class=\"string\">`http://<span class=\"subst\">$&#123;host&#125;</span>:<span class=\"subst\">$&#123;port&#125;</span>/<span class=\"subst\">$&#123;database&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-解构赋值简写方法\"><a href=\"#13-解构赋值简写方法\" class=\"headerlink\" title=\"13.解构赋值简写方法\"></a>13.解构赋值简写方法</h3><p>在web框架中，经常需要从组件和API之间来回传递数组或对象字面形式的数据，然后需要解构它</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">'mobx/observable'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> action = <span class=\"built_in\">require</span>(<span class=\"string\">'mobx/action'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> runInAction = <span class=\"built_in\">require</span>(<span class=\"string\">'mobx/runInAction'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">this</span>.props.store;</span><br><span class=\"line\"><span class=\"keyword\">const</span> form = <span class=\"keyword\">this</span>.props.form;</span><br><span class=\"line\"><span class=\"keyword\">const</span> loading = <span class=\"keyword\">this</span>.props.loading;</span><br><span class=\"line\"><span class=\"keyword\">const</span> errors = <span class=\"keyword\">this</span>.props.errors;</span><br><span class=\"line\"><span class=\"keyword\">const</span> entity = <span class=\"keyword\">this</span>.props.entity;</span><br></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; observable, action, runInAction &#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; store, form, loading, errors, entity &#125; = <span class=\"keyword\">this</span>.props;</span><br></pre></td></tr></table></figure>\n<p>也可以分配变量名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; store, form, loading, errors, <span class=\"attr\">entity</span>:contact &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"><span class=\"comment\">//最后一个变量名为contact</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"14-多行字符串简写\"><a href=\"#14-多行字符串简写\" class=\"headerlink\" title=\"14.多行字符串简写\"></a>14.多行字符串简写</h3><p>需要输出多行字符串，需要使用+来拼接：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> lorem = <span class=\"string\">'Lorem ipsum dolor sit amet, consectetur\\n\\t'</span></span><br><span class=\"line\">    + <span class=\"string\">'adipisicing elit, sed do eiusmod tempor incididunt\\n\\t'</span></span><br><span class=\"line\">    + <span class=\"string\">'ut labore et dolore magna aliqua. Ut enim ad minim\\n\\t'</span></span><br><span class=\"line\">    + <span class=\"string\">'veniam, quis nostrud exercitation ullamco laboris\\n\\t'</span></span><br><span class=\"line\">    + <span class=\"string\">'nisi ut aliquip ex ea commodo consequat. Duis aute\\n\\t'</span></span><br><span class=\"line\">    + <span class=\"string\">'irure dolor in reprehenderit in voluptate velit esse.\\n\\t'</span></span><br><span class=\"line\">使用反引号，则可以达到简写作用：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> lorem = <span class=\"string\">`Lorem ipsum dolor sit amet, consectetur</span></span><br><span class=\"line\"><span class=\"string\">    adipisicing elit, sed do eiusmod tempor incididunt</span></span><br><span class=\"line\"><span class=\"string\">    ut labore et dolore magna aliqua. Ut enim ad minim</span></span><br><span class=\"line\"><span class=\"string\">    veniam, quis nostrud exercitation ullamco laboris</span></span><br><span class=\"line\"><span class=\"string\">    nisi ut aliquip ex ea commodo consequat. Duis aute</span></span><br><span class=\"line\"><span class=\"string\">    irure dolor in reprehenderit in voluptate velit esse.`</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"15-扩展运算符简写\"><a href=\"#15-扩展运算符简写\" class=\"headerlink\" title=\"15.扩展运算符简写\"></a>15.扩展运算符简写</h3><p>扩展运算符有几种用例让JavaScript代码更加有效使用，可以用来代替某个数组函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// joining arrays</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> odd = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> nums = [<span class=\"number\">2</span> ,<span class=\"number\">4</span> , <span class=\"number\">6</span>].concat(odd);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cloning arrays</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr.slice()</span><br></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// joining arrays</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> odd = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span> ];</span><br><span class=\"line\"><span class=\"keyword\">const</span> nums = [<span class=\"number\">2</span> ,<span class=\"number\">4</span> , <span class=\"number\">6</span>, ...odd];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(nums); <span class=\"comment\">// [ 2, 4, 6, 1, 3, 5 ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cloning arrays</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [...arr];</span><br><span class=\"line\">不像concat()函数，可以使用扩展运算符来在一个数组中任意处插入另一个数组。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> odd = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span> ];</span><br><span class=\"line\"><span class=\"keyword\">const</span> nums = [<span class=\"number\">2</span>, ...odd, <span class=\"number\">4</span> , <span class=\"number\">6</span>];</span><br><span class=\"line\">也可以使用扩展运算符解构：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; a, b, ...z &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">3</span>, <span class=\"attr\">d</span>: <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(z) <span class=\"comment\">// &#123; c: 3, d: 4 &#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"16-强制参数简写\"><a href=\"#16-强制参数简写\" class=\"headerlink\" title=\"16.强制参数简写\"></a>16.强制参数简写</h3><p>JavaScript中如果没有向函数参数传递值，则参数为undefined。为了增强参数赋值，可以使用if语句来抛出异常，或使用强制参数简写方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">bar</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(bar === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Missing parameter!'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bar;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mandatory = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Missing parameter!'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"function\">(<span class=\"params\">bar = mandatory(</span>)) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bar;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"17-Array-find简写\"><a href=\"#17-Array-find简写\" class=\"headerlink\" title=\"17.Array.find简写\"></a>17.Array.find简写</h3><p>想从数组中查找某个值，则需要循环。在ES6中，find()函数能实现同样效果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pets = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Dog'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Max'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Cat'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Karl'</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Dog'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Tommy'</span>&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findDog</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt;pets.length; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pets[i].type === <span class=\"string\">'Dog'</span> &amp;&amp; pets[i].name === name) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> pets[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pet = pets.find(<span class=\"function\"><span class=\"params\">pet</span> =&gt;</span> pet.type ===<span class=\"string\">'Dog'</span> &amp;&amp; pet.name === <span class=\"string\">'Tommy'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pet); <span class=\"comment\">// &#123; type: 'Dog', name: 'Tommy' &#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"18-Object-key-简写\"><a href=\"#18-Object-key-简写\" class=\"headerlink\" title=\"18.Object[key]简写\"></a>18.Object[key]简写</h3><p>考虑一个验证函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validate</span>(<span class=\"params\">values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!values.first)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!values.last)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(validate(&#123;<span class=\"attr\">first</span>:<span class=\"string\">'Bruce'</span>,<span class=\"attr\">last</span>:<span class=\"string\">'Wayne'</span>&#125;)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>假设当需要不同域和规则来验证，能否编写一个通用函数在运行时确认？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象验证规则</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> schema = &#123;</span><br><span class=\"line\">  first: &#123;</span><br><span class=\"line\">    required:<span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  last: &#123;</span><br><span class=\"line\">    required:<span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通用验证函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> validate = <span class=\"function\">(<span class=\"params\">schema, values</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(field <span class=\"keyword\">in</span> schema) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(schema[field].required) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!values[field]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(validate(schema, &#123;<span class=\"attr\">first</span>:<span class=\"string\">'Bruce'</span>&#125;)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(validate(schema, &#123;<span class=\"attr\">first</span>:<span class=\"string\">'Bruce'</span>,<span class=\"attr\">last</span>:<span class=\"string\">'Wayne'</span>&#125;)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>现在可以有适用于各种情况的验证函数，不需要为了每个而编写自定义验证函数了</p>\n<h3 id=\"19-双重非位运算简写\"><a href=\"#19-双重非位运算简写\" class=\"headerlink\" title=\"19.双重非位运算简写\"></a>19.双重非位运算简写</h3><p>有一个有效用例用于双重非运算操作符。可以用来代替Math.floor()，其优势在于运行更快，可以阅读此文章了解更多位运算。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.floor(<span class=\"number\">4.9</span>) === <span class=\"number\">4</span>  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>简写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~<span class=\"number\">4.9</span> === <span class=\"number\">4</span>  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n","excerpt":"1.三元操作符当想写if…else语句时，使用三元操作符来代替。 1234567const x = 20;let answer;if (x &gt; 10) &#123; answer = 'is greater';&#125; else &#123; answer = 'is lesser';&#125; 简写： 123const answer = x &gt; 10 ? 'is greater' : 'is lesser';也可以嵌套if语句：const big = x &gt; 10 ? \" greater 10\" : x","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"大前端学习资料收藏","date":"2017-06-20T09:14:36.000Z","path":"2017/06/20/it-data-FE/","text":"学习资料 买的 TP5 链接：https://pan.baidu.com/s/1hrUCYtm 密码：ffi7 布尔教育PHP2017整一套视频教程链接: http://pan.baidu.com/s/1cenwM6 密码: 27ce ThinkPHP5基础教程链接:http://pan.baidu.com/s/1i5wpXS5 密码:8mvg ThinkPHP3.2 RBAC视频教程链接:http://pan.baidu.com/s/1kUZRp7x 密码:4n7n ThinkPHP3.2.3开发新闻资讯实战教程链接：https://pan.baidu.com/s/1eS3gGWM 密码：2w58 Yii实战开发大型商城项目 链接:http://pan.baidu.com/s/12pGvk 密码:7xj5 CI快速开发电子商城项目 链接:http://pan.baidu.com/s/1sMree 密码:x7mn ThinkPHP开发电子商城项目 链接:http://pan.baidu.com/s/1kTGk9Zx 密码:kee8 免费 HTML5+CSS3视频教程：http://pan.baidu.com/s/1hsyOjze 密码：c3uw JavaScript视频教程：链接：http://pan.baidu.com/s/1hsdj2zM 密码：b54i BootStrap视频教程：链接：http://pan.baidu.com/s/1qYOWqL2 密码：2pde PHP视频教程：链接：http://pan.baidu.com/s/1pKE8Fsn 密码：ipim Smarty模板引擎：链接：http://pan.baidu.com/s/1dFHliLj 密码：hjq6 JQuery视频教程：链接：http://pan.baidu.com/s/1qXHo3lq 密码：vfxx AngularJS视频教程 链接：http://pan.baidu.com/s/1i4Mm0Ot 密码：98oi Mysql视频教程：链接：http://pan.baidu.com/s/1hsyOj2W 密码：fcfh Linux视频教程：链接：http://pan.baidu.com/s/1miexpVy 密码：8ids ThinkPHP框架链接：http://pan.baidu.com/s/1kV2LLLt 密码：jrpj DedeCMS织梦视频教程 链接：http://pan.baidu.com/s/1i5FHeqL 密码：sti4 PS视频教程 http://pan.baidu.com/s/1bTRXUm WP 链接：http://pan.baidu.com/s/1hr8b2U4 密码：p8cb mongodb视频教程 链接：http://pan.baidu.com/s/1hsyiqXI 密码：aiy7 oracle : 链接：http://pan.baidu.com/s/1o7GCIee 密码：oxon Nginx: 链接：http://pan.baidu.com/s/1o8lKNXo 密码：szpb 大web前端全套2：链接: https://pan.baidu.com/s/1i4NL52l 密码: 22zr 链接: https://pan.baidu.com/s/1mi2WTa4 密码: ek4p 链接: https://pan.baidu.com/s/1nvBct3j 密码: 4cbb 链接: https://pan.baidu.com/s/1bpzl2KR 密码: 6qnx Vue2.0实战链接: https://pan.baidu.com/s/1i5jzGgP 密码: 6bje angular2.0实战链接：链接: https://pan.baidu.com/s/1i51aykH 密码: fnne react链接：链接: https://pan.baidu.com/s/1dE4WrDZ 密码: gs23","content":"<p>学习资料</p>\n<h3 id=\"买的\"><a href=\"#买的\" class=\"headerlink\" title=\"买的\"></a>买的</h3><ul>\n<li>TP5 链接：<a href=\"https://pan.baidu.com/s/1hrUCYtm\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1hrUCYtm</a> 密码：ffi7</li>\n<li>布尔教育PHP2017整一套视频教程链接: <a href=\"http://pan.baidu.com/s/1cenwM6\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1cenwM6</a> 密码: 27ce</li>\n<li>ThinkPHP5基础教程链接:<a href=\"http://pan.baidu.com/s/1i5wpXS5\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1i5wpXS5</a> 密码:8mvg</li>\n<li>ThinkPHP3.2 RBAC视频教程链接:<a href=\"http://pan.baidu.com/s/1kUZRp7x\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1kUZRp7x</a> 密码:4n7n</li>\n<li>ThinkPHP3.2.3开发新闻资讯实战教程链接：<a href=\"https://pan.baidu.com/s/1eS3gGWM\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1eS3gGWM</a> 密码：2w58</li>\n</ul>\n<hr>\n<ul>\n<li>Yii实战开发大型商城项目 链接:<a href=\"http://pan.baidu.com/s/12pGvk\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/12pGvk</a>  密码:7xj5</li>\n<li>CI快速开发电子商城项目  链接:<a href=\"http://pan.baidu.com/s/1sMree\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1sMree</a>  密码:x7mn</li>\n<li>ThinkPHP开发电子商城项目  链接:<a href=\"http://pan.baidu.com/s/1kTGk9Zx\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1kTGk9Zx</a>    密码:kee8</li>\n</ul>\n<h3 id=\"免费\"><a href=\"#免费\" class=\"headerlink\" title=\"免费\"></a>免费</h3><ul>\n<li>HTML5+CSS3视频教程：<a href=\"http://pan.baidu.com/s/1hsyOjze\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1hsyOjze</a>   密码：c3uw </li>\n<li>JavaScript视频教程：链接：<a href=\"http://pan.baidu.com/s/1hsdj2zM\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1hsdj2zM</a>   密码：b54i </li>\n<li>BootStrap视频教程：链接：<a href=\"http://pan.baidu.com/s/1qYOWqL2\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1qYOWqL2</a>   密码：2pde </li>\n<li>PHP视频教程：链接：<a href=\"http://pan.baidu.com/s/1pKE8Fsn\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1pKE8Fsn</a>   密码：ipim  </li>\n<li>Smarty模板引擎：链接：<a href=\"http://pan.baidu.com/s/1dFHliLj\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1dFHliLj</a>  密码：hjq6</li>\n<li>JQuery视频教程：链接：<a href=\"http://pan.baidu.com/s/1qXHo3lq\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1qXHo3lq</a>   密码：vfxx </li>\n<li>AngularJS视频教程  链接：<a href=\"http://pan.baidu.com/s/1i4Mm0Ot\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1i4Mm0Ot</a>   密码：98oi</li>\n<li>Mysql视频教程：链接：<a href=\"http://pan.baidu.com/s/1hsyOj2W\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1hsyOj2W</a>   密码：fcfh </li>\n<li>Linux视频教程：链接：<a href=\"http://pan.baidu.com/s/1miexpVy\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1miexpVy</a>   密码：8ids </li>\n<li>ThinkPHP框架链接：<a href=\"http://pan.baidu.com/s/1kV2LLLt\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1kV2LLLt</a>   密码：jrpj </li>\n<li>DedeCMS织梦视频教程  链接：<a href=\"http://pan.baidu.com/s/1i5FHeqL\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1i5FHeqL</a>   密码：sti4 </li>\n<li>PS视频教程  <a href=\"http://pan.baidu.com/s/1bTRXUm\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1bTRXUm</a>  </li>\n<li>WP  链接：<a href=\"http://pan.baidu.com/s/1hr8b2U4\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1hr8b2U4</a>  密码：p8cb</li>\n<li>mongodb视频教程 链接：<a href=\"http://pan.baidu.com/s/1hsyiqXI\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1hsyiqXI</a> 密码：aiy7</li>\n<li>oracle : 链接：<a href=\"http://pan.baidu.com/s/1o7GCIee\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1o7GCIee</a>  密码：oxon</li>\n<li>Nginx: 链接：<a href=\"http://pan.baidu.com/s/1o8lKNXo\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1o8lKNXo</a>  密码：szpb</li>\n<li>大web前端全套2：链接: <a href=\"https://pan.baidu.com/s/1i4NL52l\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1i4NL52l</a> 密码: 22zr</li>\n<li>链接: <a href=\"https://pan.baidu.com/s/1mi2WTa4\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1mi2WTa4</a> 密码: ek4p</li>\n<li>链接: <a href=\"https://pan.baidu.com/s/1nvBct3j\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1nvBct3j</a> 密码: 4cbb</li>\n<li>链接: <a href=\"https://pan.baidu.com/s/1bpzl2KR\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1bpzl2KR</a> 密码: 6qnx</li>\n<li>Vue2.0实战链接: <a href=\"https://pan.baidu.com/s/1i5jzGgP\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1i5jzGgP</a> 密码: 6bje</li>\n<li>angular2.0实战链接：链接: <a href=\"https://pan.baidu.com/s/1i51aykH\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1i51aykH</a> 密码: fnne</li>\n<li>react链接：链接: <a href=\"https://pan.baidu.com/s/1dE4WrDZ\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1dE4WrDZ</a> 密码: gs23</li>\n</ul>\n","excerpt":"","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"http://www.ding1996.cn/tags/前端/"}]},{"title":"thinkphp 学习笔记","date":"2017-06-19T22:58:14.000Z","path":"2017/06/20/it-php-thinkphp/","text":"封装个子类 继承thinkphp核心类 须要执行 parent::__construct(); 这个方法才能使用thinkphp 核心类的方法 12345678910111213141516171819202122&lt;?php namespace Admin\\Controller;use Think\\Controller;class AdmController extends Controller &#123; function __construct()&#123; parent::__construct(); $this-&gt;id = session('id'); if($this-&gt;id&lt;1)&#123; return $this-&gt;error('账号密码错误','/Admin/login/index'); &#125; $this-&gt;user = D('admin')-&gt;where(array('id'=&gt;$this-&gt;id))-&gt;find(); if(!$this-&gt;user)&#123; return $this-&gt;error('账号密码无效','/Admin/login/index'); &#125; &#125;&#125; ?&gt; 单字母函数1234567# I函数获取用户输入I('get.xx')；I('post.xx')；#U函数处理跳转路径U('/admin/index');#D函数实例化一个模型$admin = D('admin'); 页面跳转啊 从定向 1234// 页面跳转 无需等待return $this-&gt;redirect('/admin/auser');// 页面跳转 有提示信息$this-&gt;error('操作成功,成功修改'.$is.'条','/admin/auser/index');","content":"<p>封装个子类 继承thinkphp核心类 须要执行 parent::__construct(); 这个方法才能使用thinkphp 核心类的方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Admin</span>\\<span class=\"title\">Controller</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Think</span>\\<span class=\"title\">Controller</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdmController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">parent</span>::__construct();</span><br><span class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;id = session(<span class=\"string\">'id'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">$this</span>-&gt;id&lt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;error(<span class=\"string\">'账号密码错误'</span>,<span class=\"string\">'/Admin/login/index'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t  <span class=\"keyword\">$this</span>-&gt;user = D(<span class=\"string\">'admin'</span>)-&gt;where(<span class=\"keyword\">array</span>(<span class=\"string\">'id'</span>=&gt;<span class=\"keyword\">$this</span>-&gt;id))-&gt;find();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!<span class=\"keyword\">$this</span>-&gt;user)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;error(<span class=\"string\">'账号密码无效'</span>,<span class=\"string\">'/Admin/login/index'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"单字母函数\"><a href=\"#单字母函数\" class=\"headerlink\" title=\"单字母函数\"></a>单字母函数</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># I函数获取用户输入</span></span><br><span class=\"line\">I(<span class=\"string\">'get.xx'</span>)；</span><br><span class=\"line\">I(<span class=\"string\">'post.xx'</span>)；</span><br><span class=\"line\"><span class=\"comment\">#U函数处理跳转路径</span></span><br><span class=\"line\">U(<span class=\"string\">'/admin/index'</span>);</span><br><span class=\"line\"><span class=\"comment\">#D函数实例化一个模型</span></span><br><span class=\"line\">$admin = D(<span class=\"string\">'admin'</span>);</span><br></pre></td></tr></table></figure>\n<p>页面跳转啊 从定向</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  页面跳转 无需等待</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;redirect(<span class=\"string\">'/admin/auser'</span>);</span><br><span class=\"line\"><span class=\"comment\">//  页面跳转 有提示信息</span></span><br><span class=\"line\"><span class=\"keyword\">$this</span>-&gt;error(<span class=\"string\">'操作成功,成功修改'</span>.$is.<span class=\"string\">'条'</span>,<span class=\"string\">'/admin/auser/index'</span>);</span><br></pre></td></tr></table></figure>\n","excerpt":"封装个子类 继承thinkphp核心类 须要执行 parent::__construct(); 这个方法才能使用thinkphp 核心类的方法 12345678910111213141516171819202122&lt;?php namespace Admin\\Controller;use Think\\Controller;class AdmController extends Controller &#123; function __construct()&#123; parent::__construct(); $this-&gt;id = session('id'); if($this-&gt;id&lt;1)&#123; return $this-&gt;error('账号密码错误','/Admin/login/index'); &#125; $this-&gt;user = D('admin')-&gt;where(array('id'=&gt;$this-&gt;id))-&gt;find(); if(!$this-&gt;user)&#123; return $this-&gt;error('账号密码无效','/Admin/login/index'); &#125; &#125;&#125; ?&gt;","categories":[],"tags":[{"name":"后台","slug":"后台","permalink":"http://www.ding1996.cn/tags/后台/"},{"name":"php","slug":"php","permalink":"http://www.ding1996.cn/tags/php/"}]},{"title":"php+mysql 搭建简易博客笔记","date":"2017-06-15T23:07:35.000Z","path":"2017/06/16/it-php-blog/","text":"1 封装个db类把数据库连接放到类里 12345678910111213141516171819202122&lt;?php class db&#123; function __construct()&#123; $this-&gt;mysqli = new mysqli('localhost', 'root', 'root', 'blog'); if( $this-&gt;mysqli-&gt;connect_errno &gt; 0 )&#123; echo \"连接错误\"; echo $this-&gt;mysqli-&gt;connect_error; exit; &#125; $this-&gt;query(\"SET NAMES UTF8\"); &#125; function query($sql)&#123; return $this-&gt;mysqli-&gt;query($sql); &#125;&#125;?&gt; 2 封装input类 获取get post session 值 123456789101112131415161718192021222324252627282930313233343536&lt;?php class input&#123; function get($key = false)&#123; if($key===false)&#123; return $_GET; &#125; if(isset($_GET[$key]))&#123; return $_GET[$key]; &#125;else&#123; return false; &#125; &#125; function post($key = false)&#123; if($key===false)&#123; return $_POST; &#125; if(isset($_POST[$key]))&#123; return $_POST[$key]; &#125;else&#123; return false; &#125; &#125; function session($key=false)&#123; if($key===false)&#123; return $_SESSION; &#125; if(isset($_SESSION[$key]))&#123; return $_SESSION[$key]; &#125;else&#123; return false; &#125; &#125;&#125;?&gt; 3 config 123456789101112&lt;?php // 程序的配置文件 define(\"PATH\", dirname(__FILE__));include(PATH . \"/core/db.php\");$db = new db();include(PATH . \"/core/input.class.php\");$input = new input(); ?&gt;","content":"<p>1 封装个db类把数据库连接放到类里</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">db</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;mysqli = <span class=\"keyword\">new</span> mysqli(<span class=\"string\">'localhost'</span>, <span class=\"string\">'root'</span>, <span class=\"string\">'root'</span>, <span class=\"string\">'blog'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( <span class=\"keyword\">$this</span>-&gt;mysqli-&gt;connect_errno &gt; <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"连接错误\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;mysqli-&gt;connect_error;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">exit</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;query(<span class=\"string\">\"SET NAMES UTF8\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">query</span><span class=\"params\">($sql)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;mysqli-&gt;query($sql);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>2 封装input类 获取get post session 值</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">input</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span><span class=\"params\">($key = false)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>($key===<span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> $_GET;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($_GET[$key]))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> $_GET[$key];</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">post</span><span class=\"params\">($key = false)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>($key===<span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> $_POST;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($_POST[$key]))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> $_POST[$key];</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">session</span><span class=\"params\">($key=false)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>($key===<span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> $_SESSION;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($_SESSION[$key]))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> $_SESSION[$key];</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>3 config </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  程序的配置文件 </span></span><br><span class=\"line\">define(<span class=\"string\">\"PATH\"</span>, dirname(<span class=\"keyword\">__FILE__</span>));</span><br><span class=\"line\"><span class=\"keyword\">include</span>(PATH . <span class=\"string\">\"/core/db.php\"</span>);</span><br><span class=\"line\">$db = <span class=\"keyword\">new</span> db();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span>(PATH . <span class=\"string\">\"/core/input.class.php\"</span>);</span><br><span class=\"line\">$input = <span class=\"keyword\">new</span> input();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n","excerpt":"1 封装个db类把数据库连接放到类里 12345678910111213141516171819202122&lt;?php class db&#123; function __construct()&#123; $this-&gt;mysqli = new mysqli('localhost', 'root', 'root', 'blog'); if( $this-&gt;mysqli-&gt;connect_errno &gt; 0 )&#123; echo \"连接错误\"; echo $this-&gt;mysqli-&gt;connect_error; exit; &#125; $this-&gt;query(\"SET NAMES UTF8\"); &#125; function query($sql)&#123; return $this-&gt;mysqli-&gt;query($sql); &#125;&#125;?&gt;","categories":[],"tags":[{"name":"后台","slug":"后台","permalink":"http://www.ding1996.cn/tags/后台/"},{"name":"php","slug":"php","permalink":"http://www.ding1996.cn/tags/php/"}]},{"title":"php学习笔记","date":"2017-06-08T13:03:44.000Z","path":"2017/06/08/it-php-learn/","text":"hellow world12345678# php的运行环境&lt;?php// 定义变量$str = 'hellow';# echo 像浏览器输出信息echo $str. 'world'// . 在php里面是连接符?&gt; php时间123time() 这个函数获取时间戳// 时间戳并不是我们想要的 转换为具体日期date(\"Y-m-d H:i:s\", time()) 使用 date() 这个系统函数，可以将时间戳格式化成任何你想要的格式。YmdHis 都是什么意思呢？Y 代表4位数的年份，比如 2016y 代表2位数的年份，比如 16m 月d 日H 时i 分s 秒 链接数据库123456789$db = new mysqli('localhost', 'root', '123456', 'sodevel');$db 对象，所有后续操作都基于该对象。mysqli 扩展内置的类，我们拿来就用，具体的属性和方法要看手册。localhost 数据库的IP地址，这个代表本机root 连接账号123456 连接密码sodevel 要连接的数据库名称 判断连接是否成功 12345678if( $db-&gt;connect_errno &gt; 0 )&#123; echo \"错误码：\".$mysqli-&gt;connect_errno; echo \"提示语：\".$mysqli-&gt;connect_error; exit;&#125;$db-&gt;connect_errno 错误代码，无错误的话 = 0$mysqli-&gt;connect_error 错误信息，出错问题的文字说明 执行数据库查询1234567$is = $db-&gt;query(\"SQL语句\");$db 上一节连接数据库后得到的对象query() 执行对象中的方法。SQL语句，计划让数据库执行的命令语句$is 在增删改的操作中，得到一个 布尔值，true 表示操作成功，false 表示操作失败。 插入乱码12//定义当前连接，使用UTF8编码，你也可以使用GBK等$db-&gt;query(\"SET NAMES UTF8\");","content":"<h3 id=\"hellow-world\"><a href=\"#hellow-world\" class=\"headerlink\" title=\"hellow world\"></a>hellow world</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># php的运行环境</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// 定义变量</span></span><br><span class=\"line\">$str = <span class=\"string\">'hellow'</span>;</span><br><span class=\"line\"><span class=\"comment\"># echo 像浏览器输出信息</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $str. <span class=\"string\">'world'</span></span><br><span class=\"line\"><span class=\"comment\">// . 在php里面是连接符</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"php时间\"><a href=\"#php时间\" class=\"headerlink\" title=\"php时间\"></a>php时间</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time() 这个函数获取时间戳</span><br><span class=\"line\"><span class=\"comment\">// 时间戳并不是我们想要的 转换为具体日期</span></span><br><span class=\"line\">date(<span class=\"string\">\"Y-m-d H:i:s\"</span>, time())</span><br></pre></td></tr></table></figure>\n<p>使用 date() 这个系统函数，可以将时间戳格式化成任何你想要的格式。<br>YmdHis 都是什么意思呢？<br>Y 代表4位数的年份，比如 2016<br>y 代表2位数的年份，比如 16<br>m 月<br>d 日<br>H 时<br>i 分<br>s 秒</p>\n<h3 id=\"链接数据库\"><a href=\"#链接数据库\" class=\"headerlink\" title=\"链接数据库\"></a>链接数据库</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$db = <span class=\"keyword\">new</span> mysqli(<span class=\"string\">'localhost'</span>, <span class=\"string\">'root'</span>, <span class=\"string\">'123456'</span>, <span class=\"string\">'sodevel'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$db 对象，所有后续操作都基于该对象。</span><br><span class=\"line\"></span><br><span class=\"line\">mysqli 扩展内置的类，我们拿来就用，具体的属性和方法要看手册。</span><br><span class=\"line\">localhost 数据库的IP地址，这个代表本机</span><br><span class=\"line\">root 连接账号</span><br><span class=\"line\"><span class=\"number\">123456</span> 连接密码</span><br><span class=\"line\">sodevel 要连接的数据库名称</span><br></pre></td></tr></table></figure>\n<p>判断连接是否成功</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>( $db-&gt;connect_errno &gt; <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"错误码：\"</span>.$mysqli-&gt;connect_errno;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"提示语：\"</span>.$mysqli-&gt;connect_error;</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$db-&gt;connect_errno 错误代码，无错误的话 = <span class=\"number\">0</span></span><br><span class=\"line\">$mysqli-&gt;connect_error 错误信息，出错问题的文字说明</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行数据库查询\"><a href=\"#执行数据库查询\" class=\"headerlink\" title=\"执行数据库查询\"></a>执行数据库查询</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$is = $db-&gt;query(<span class=\"string\">\"SQL语句\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$db 上一节连接数据库后得到的对象</span><br><span class=\"line\">query() 执行对象中的方法。</span><br><span class=\"line\">SQL语句，计划让数据库执行的命令语句</span><br><span class=\"line\"></span><br><span class=\"line\">$is 在增删改的操作中，得到一个 布尔值，<span class=\"keyword\">true</span> 表示操作成功，<span class=\"keyword\">false</span> 表示操作失败。</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入乱码\"><a href=\"#插入乱码\" class=\"headerlink\" title=\"插入乱码\"></a>插入乱码</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义当前连接，使用UTF8编码，你也可以使用GBK等</span></span><br><span class=\"line\">$db-&gt;query(<span class=\"string\">\"SET NAMES UTF8\"</span>);</span><br></pre></td></tr></table></figure>\n","excerpt":"hellow world12345678# php的运行环境&lt;?php// 定义变量$str = 'hellow';# echo 像浏览器输出信息echo $str. 'world'// . 在php里面是连接符?&gt;","categories":[],"tags":[{"name":"后台","slug":"后台","permalink":"http://www.ding1996.cn/tags/后台/"},{"name":"php","slug":"php","permalink":"http://www.ding1996.cn/tags/php/"}]},{"title":"算法小白——基本排序算法入门","date":"2017-06-08T01:34:10.000Z","path":"2017/06/08/it-js-suanfa/","text":"计算的 时间复杂度（最差、平均、和最好性能），依据列表（list）的大小(n)。一般而言，好的性能是O(n log n)，且坏的性能是O(n^2)。对于一个排序理想的性能是O(n)。仅使用一个抽象关键比较运算的排序算法总平均上总是至少需要O(n log n)。 插入排序(insertion sort)插入排序应该算是最简单和容易理解的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。具有n个元素时它需要经过n-1趟排序。对于p = 1到p = n-1趟，插入排序保证从位置0到位置p上的元素为已排序状态。它就是基于这个事实来排序的。 1234567891011121314151617function sort(arr) &#123; if(arr.length &lt;= 1) &#123; return arr &#125; for(var i=0; i&lt;arr.length; i++) &#123; for(var j=i-1; j&gt;=0; j--) &#123; if(arr[j+1] &lt; arr[j]) &#123; var temp = arr[j+1]; arr[j+1] = arr[j]; arr[j] = temp &#125; &#125; &#125; return arr&#125; 如果目标是把n个元素的序列升序排列，那么采用插入排序存在最好情况和最坏情况。最好情况就是，序列已经是升序排列了，在这种情况下，需要进行的比较操作需(n-1)次即可。最坏情况就是，序列是降序排列，那么此时需要进行的比较共有n(n-1)/2次。插入排序的赋值操作是比较操作的次数减去(n-1)次。平均来说插入排序算法复杂度为O(n^2)。因而，插入排序不适合对于数据量比较大的排序应用。但是，如果需要排序的数据量很小，例如，量级小于千，那么插入排序还是一个不错的选择。 插入排序在工业级库中也有着广泛的应用，在STL的sort算法和stdlib的qsort算法中，都将插入排序作为快速排序的补充，用于少量元素的排序（通常为8个或以下） 冒泡排序(bubble sort)冒泡排序是与插入排序拥有相等的运行时间，但是两种算法在需要的交换次数却很大地不同。在最好的情况，冒泡排序需要O(n^2 )次交换，而插入排序只要最多O(n)交换。冒泡排序的实现（类似下面）通常会对已经排序好的数列拙劣地运行O(n^2 )而插入排序在这个例子只需要O(n)个运算。因此很多现代的算法教科书避免使用冒泡排序，而用插入排序替换之。冒泡排序如果能在内部循环第一次运行时，使用一个旗标来表示有无需要交换的可能，也可以把最好的复杂度降低到O(n)。在这个情况，已经排序好的数列就无交换的需要。若在每次走访数列时，把走访顺序反过来，也可以稍微地改进效率。有时候称为鸡尾酒排序，因为算法会从数列的一端到另一端之间穿梭往返。 冒泡排序算法的运作如下： 比较相邻的元素。如果第一个比第二个大，就交换他们两个。 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。 针对所有的元素重复以上的步骤，除了最后一个。 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。 由于它的简洁，冒泡排序通常被用来对于程序设计入门的学生介绍算法的概念。 12345678910111213141516function bubbleSort(arr) &#123; if(arr.length &lt;= 1) &#123; return arr; &#125; for(var j=0; j&lt;arr.length; j++) &#123; for(var i=0; i&lt;arr.length-j; i++) &#123; if(arr[i] &gt; arr[i+1]) &#123; var tmp = arr[i]; arr[i] = arr[i+1]; arr[i+1] = tmp; &#125; &#125; &#125; return arr;&#125; 选择排序(selection sort)选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对n个元素的表进行排序总共进行至多n-1次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。 复杂度分析选择排序的交换操作介于 0 和(n-1)次之间。选择排序的比较操作为n(n-1)/2次之间。选择排序的赋值操作介于0和3(n-1)次之间。比较次数O(n^2)，比较次数与关键字的初始状态无关，总的比较次数 N=(n-1)+(n-2)+…+1=n(n-1)/2。交换次数O(n),最好情况是，已经有序，交换0次；最坏情况是，逆序，交换n-1次。交换次数比冒泡排序较少，由于交换所需CPU时间比比较所需的CPU时间多, n值较小时，选择排序比冒泡排序快。原地操作几乎是选择排序的唯一优点，当空间复杂度要求较高时，可以考虑选择排序；实际适用的场合非常罕见。 123456789101112131415161718function selectionSort(arr) &#123; if(arr.length &lt;= 1) &#123; return arr &#125; var i, j, min; var temp; for (i = 0; i &lt; arr.length - 1; i++) &#123; min = i; for (j = i + 1; j &lt; arr.length; j++) &#123; if (arr[min] &gt; arr[j]) min = j; temp = arr[min]; arr[min] = arr[i]; arr[i] = temp; &#125; &#125; return arr&#125; 快速排序(quick sort)快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。 步骤为： 从数列中挑出一个元素，称为”基准”（pivot）， 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。 递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。 正如它的名字，快速排序是在时间中最快的已知排序算法，它的平均运行时间是O(NlogN)。快速排序也是一种分治的递归算法。将数组S排序的基本算法由下列简单的四步组成： 如果S中元素个数是0或1，则返回 取S中任一元素v，称之为枢纽元 将S - {v}分成两个不相交的集合：S1 = {x∈S - {v} | x ≤ v}和S2 = {x∈S - {v} | x ≥ v} 返回{quicksort(S1)}，继续v，继而quicksort(S2) 由于对枢纽元的处理会导致第三步中的分割不唯一，因此，我们希望把等于枢纽元的大约一半的关键字分到S1中，而另外一半分到S2中，那怎么去选择一个好的枢纽元呢？选取枢纽元一种错误的方法通常的，没有经过充分考虑的选择是将第一个元素用作枢纽元。如果输入是随机的，那么这是可以接受的，但是如果输入是预排序或是反序的，那么这样的枢纽元就会产生一个劣质的分割，因为所有的元素不是都被划入S1就是被划入S2。一种安全的作法一种安全的方针是随机选取枢纽元。但是另一方面，随机数的生成一般是昂贵的，根本减少不了算法奇遇部分的平均运行时间。三数中值分割法一组N个数的中值是第Math.ceil(N/2)个最大的数。枢纽元的最好的选择是数组的中值。不幸的是，这很难算出，且会减慢快速排序的速度。因此一般的做法是使用左端、右端和中心位置上的三个元素的中值作为枢纽元。例如，输入为8, 1, 4, 9, 6, 3, 5, 2, 7, 0，它的左边元素是8，右边元素是0，中心位置为Math.floor((left + right) / 2)上的元素是6，于是枢纽元v=6。 12345678910111213141516171819function quickSort(arr) &#123; if (arr.length &lt;= 1) &#123; return arr.slice(0); &#125; var left = []; var right = []; var mid = [arr[0]]; //first number as a pivot for (var i = 1; i &lt; arr.length; i++) &#123; if (arr[i] &lt; mid[0]) &#123; left.push(arr[i]); &#125; else &#123; right.push(arr[i]); &#125; &#125; return quickSort(left).concat(mid.concat(quickSort(right)));&#125;","content":"<p>计算的 时间复杂度（最差、平均、和最好性能），依据列表（list）的大小(n)。一般而言，好的性能是O(n log n)，且坏的性能是O(n^2)。对于一个排序理想的性能是O(n)。仅使用一个抽象关键比较运算的排序算法总平均上总是至少需要O(n log n)。</p>\n<h3 id=\"插入排序-insertion-sort\"><a href=\"#插入排序-insertion-sort\" class=\"headerlink\" title=\"插入排序(insertion sort)\"></a>插入排序(insertion sort)</h3><p>插入排序应该算是最简单和容易理解的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。具有n个元素时它需要经过n-1趟排序。对于p = 1到p = n-1趟，插入排序保证从位置0到位置p上的元素为已排序状态。它就是基于这个事实来排序的。</p>\n<a id=\"more\"></a>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0f/Insertion-sort-example-300px.gif/220px-Insertion-sort-example-300px.gif\" alt=\"\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(arr.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i<span class=\"number\">-1</span>; j&gt;=<span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(arr[j+<span class=\"number\">1</span>] &lt; arr[j]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">        arr[j+<span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">        arr[j] = temp</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果目标是把n个元素的序列升序排列，那么采用插入排序存在最好情况和最坏情况。最好情况就是，序列已经是升序排列了，在这种情况下，需要进行的比较操作需(n-1)次即可。最坏情况就是，序列是降序排列，那么此时需要进行的比较共有n(n-1)/2次。插入排序的赋值操作是比较操作的次数减去(n-1)次。平均来说插入排序算法复杂度为O(n^2)。<br>因而，插入排序不适合对于数据量比较大的排序应用。但是，如果需要排序的数据量很小，例如，量级小于千，那么插入排序还是一个不错的选择。 插入排序在工业级库中也有着广泛的应用，在STL的sort算法和stdlib的qsort算法中，都将插入排序作为快速排序的补充，用于少量元素的排序（通常为8个或以下）</p>\n<h3 id=\"冒泡排序-bubble-sort\"><a href=\"#冒泡排序-bubble-sort\" class=\"headerlink\" title=\"冒泡排序(bubble sort)\"></a>冒泡排序(bubble sort)</h3><p>冒泡排序是与插入排序拥有相等的运行时间，但是两种算法在需要的交换次数却很大地不同。在最好的情况，冒泡排序需要O(n^2 )<br>次交换，而插入排序只要最多O(n)交换。冒泡排序的实现（类似下面）通常会对已经排序好的数列拙劣地运行O(n^2 )<br>而插入排序在这个例子只需要O(n)个运算。因此很多现代的算法教科书避免使用冒泡排序，而用插入排序替换之。冒泡排序如果能在内部循环第一次运行时，使用一个旗标来表示有无需要交换的可能，也可以把最好的复杂度降低到O(n)。在这个情况，已经排序好的数列就无交换的需要。若在每次走访数列时，把走访顺序反过来，也可以稍微地改进效率。有时候称为鸡尾酒排序，因为算法会从数列的一端到另一端之间穿梭往返。<br><img src=\"https://upload.wikimedia.org/wikipedia/commons/0/06/Bubble-sort.gif\" alt=\"\"></p>\n<p>冒泡排序算法的运作如下：</p>\n<ul>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个。</li>\n<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>\n</ul>\n<p>由于它的简洁，冒泡排序通常被用来对于程序设计入门的学生介绍算法的概念。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(arr.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>; j&lt;arr.length; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length-j; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(arr[i] &gt; arr[i+<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tmp = arr[i];</span><br><span class=\"line\">        arr[i] = arr[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">        arr[i+<span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"选择排序-selection-sort\"><a href=\"#选择排序-selection-sort\" class=\"headerlink\" title=\"选择排序(selection sort)\"></a>选择排序(selection sort)</h3><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。<br>选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对n个元素的表进行排序总共进行至多n-1次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。<br><img src=\"http://www.codingconnect.net/wp-content/uploads/2016/09/Selection-Sort.gif\" alt=\"\"></p>\n<h5 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h5><p>选择排序的交换操作介于 0 和(n-1)次之间。选择排序的比较操作为n(n-1)/2次之间。选择排序的赋值操作介于0和3(n-1)次之间。比较次数O(n^2)，比较次数与关键字的初始状态无关，总的比较次数 N=(n-1)+(n-2)+…+1=n(n-1)/2。交换次数O(n),最好情况是，已经有序，交换0次；最坏情况是，逆序，交换n-1次。交换次数比冒泡排序较少，由于交换所需CPU时间比比较所需的CPU时间多, n值较小时，选择排序比冒泡排序快。<br>原地操作几乎是选择排序的唯一优点，当空间复杂度要求较高时，可以考虑选择排序；实际适用的场合非常罕见。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i, j, min;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        min = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[min] &gt; arr[j])</span><br><span class=\"line\">                min = j;</span><br><span class=\"line\">                temp = arr[min];</span><br><span class=\"line\">                arr[min] = arr[i];</span><br><span class=\"line\">                arr[i] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"快速排序-quick-sort\"><a href=\"#快速排序-quick-sort\" class=\"headerlink\" title=\"快速排序(quick sort)\"></a>快速排序(quick sort)</h3><p>快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/9/9c/Quicksort-example.gif\" alt=\"\"></p>\n<p>步骤为：</p>\n<ol>\n<li>从数列中挑出一个元素，称为”基准”（pivot），</li>\n<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li>\n<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>\n<li>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</li>\n</ol>\n<p>正如它的名字，快速排序是在时间中最快的已知排序算法，它的平均运行时间是O(NlogN)。快速排序也是一种分治的递归算法。将数组S排序的基本算法由下列简单的四步组成：</p>\n<ol>\n<li>如果S中元素个数是0或1，则返回</li>\n<li>取S中任一元素v，称之为枢纽元</li>\n<li>将S - {v}分成两个不相交的集合：S1 = {x∈S - {v} | x ≤ v}和S2 = {x∈S - {v} | x ≥ v}</li>\n<li>返回{quicksort(S1)}，继续v，继而quicksort(S2)</li>\n</ol>\n<p>由于对枢纽元的处理会导致第三步中的分割不唯一，因此，我们希望把等于枢纽元的大约一半的关键字分到S1中，而另外一半分到S2中，那怎么去选择一个好的枢纽元呢？<br>选取枢纽元<br>一种错误的方法<br>通常的，没有经过充分考虑的选择是将第一个元素用作枢纽元。如果输入是随机的，那么这是可以接受的，但是如果输入是预排序或是反序的，那么这样的枢纽元就会产生一个劣质的分割，因为所有的元素不是都被划入S1就是被划入S2。<br>一种安全的作法<br>一种安全的方针是随机选取枢纽元。但是另一方面，随机数的生成一般是昂贵的，根本减少不了算法奇遇部分的平均运行时间。<br>三数中值分割法<br>一组N个数的中值是第Math.ceil(N/2)个最大的数。枢纽元的最好的选择是数组的中值。不幸的是，这很难算出，且会减慢快速排序的速度。因此一般的做法是使用左端、右端和中心位置上的三个元素的中值作为枢纽元。例如，输入为8, 1, 4, 9, 6, 3, 5, 2, 7, 0，它的左边元素是8，右边元素是0，中心位置为Math.floor((left + right) / 2)上的元素是6，于是枢纽元v=6。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.slice(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> left = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> right = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> mid = [arr[<span class=\"number\">0</span>]]; <span class=\"comment\">//first number as a pivot</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &lt; mid[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">      left.push(arr[i]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      right.push(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> quickSort(left).concat(mid.concat(quickSort(right)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"计算的 时间复杂度（最差、平均、和最好性能），依据列表（list）的大小(n)。一般而言，好的性能是O(n log n)，且坏的性能是O(n^2)。对于一个排序理想的性能是O(n)。仅使用一个抽象关键比较运算的排序算法总平均上总是至少需要O(n log n)。 插入排序(insertion sort)插入排序应该算是最简单和容易理解的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。具有n个元素时它需要经过n-1趟排序。对于p = 1到p = n-1趟，插入排序保证从位置0到位置p上的元素为已排序状态。它就是基于这个事实来排序的。","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"Flex入门","date":"2017-06-07T01:34:10.000Z","path":"2017/06/07/it-css-flex/","text":"Flex布局是什么？W3C针对布局设计的新标准，相对float和position会更加灵活处理父元素和子元素之间布局关系，让布局更加直观和灵活简单。有效的针对不同屏幕宽度大小的情况下，让元素自动有效合理处理布局结构。适用范围弹性盒子布局主要适用于应用程序的组件及小规模的布局，而（新兴的）栅格布局则针对大规模的布局。 Flex布局基本概念 弹性容器(Flex container)通过设置 display 属性的值为 flex 或 inline-flex来定义弹性容器。 弹性项目(Flex item)弹性容器里子元素自动成为弹性项目，并且弹性项目的float、clear和vertical-align属性将失效。 轴(Axis) 主轴（main axis） 交叉轴（cross axis）这个2个轴决定了容器里的项目整体布局效果。 Flex容器属性 flex-direction flex-wrap flex-flow justify-content align-items align-content flex-direction flex-direction决定主轴方向，默认情况下，元素都是从左到右地分布在主轴上 4个取值： 123456flex-direction: row | row-reverse | column column-reverse;row（默认值）：主轴为水平方向，起点在左端。row-reverse：主轴为水平方向，起点在右端。column：主轴为垂直方向，起点在上沿。column-reverse：主轴为垂直方向，起点在下沿。 flex-wrap是否可以换行（默认不换行），以及如果可以换行，如何排列3个取值 1234flex-wrap: nowrap | wrap | wrap-reverse;nowrap: 默认不换行wrap: 可以多行，第一行在上方wrap-reverse: 可以多行，第一行在下方 flex-flowflex-direction 和 flex-wrap 的简写,默认row nowrap 1flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;; justify-content决定项目在主轴上的对齐方式5种取值： 1234567justify-content: flex-start | flex-end | center | space-between | space-around;flex-start: 左对齐（默认）flex-end: 右对齐center: 居中对齐space-between: 两端对齐，项目之间的间距相等space-around: 均匀对齐，每个项目两端的间距相等 align-items决定交叉轴的对齐方式 1234567align-items: flex-start | flex-end | center | baseline | stretch;flex-start: 交叉轴起点对齐flex-end: 交叉轴终点对齐center: 交叉轴居中对齐baseline: 第一行文字的底部对齐stretch: （默认）如果项目木有设置高度或者高度为auto,那么项目拉伸充满整个交叉轴空间 注意：记住justify-content是沿着主轴的，align-items是沿着交叉轴的，而flex-direction是转换主轴的。这对整体移动元素很关键。 align-content定义多行轴线的对齐方式（如果只有一行，该属性不起作用） 1234567align-content: flex-start | flex-end | center | space-between | space-around | stretch;flex-start: 交叉轴起点对齐flex-end: 交叉轴终点对齐space-between: 交叉轴两端对齐，行之间间距相等space-around: 交叉轴均匀对齐，行两端间距相等stretch: 平均分配交叉轴空间，相邻行间距相等（默认，前提如果项目木有设置高度或者高度为auto） 注意：当项目的高度之和小于容器的高度并且项目高度固定时，会以交叉轴起点对齐并且项目之间间距相等，但不是flex-start对齐方式，如果此时设置flex-start是没有间距的。 这里项目设置了固定高度，所以stretch无效 Flex项目属性 order align-self flex-grow flex-shrink flex-basis order根据order的值定义项目排列顺序。数值越小，排列越靠前，默认为0align-self定义单个项目在交叉轴的对齐方式，可覆盖align-items属性取值和align-items一样： flex-grow定义项目放大比例，默认为0，当容器有剩余空间时不放大.重点在于，每个方块的 flex-grow 和其他方块的是成比例的。 1flex-grow: &lt;number&gt;; /* default 0 */ 第3个项目flex-grow 为3,其他5个项目为1，共 5+3 = 8,第3个占比为3/8,其他为1/8. flex-shrink定义项目缩小比例。默认为1，随着容器缩小而等比例缩小。如果设置为0，项目将不缩小。基本和flex-grow类似，不过一个是缩小，一个是放大。 1flex-shrink: &lt;number&gt;; /* default 1 */ flex-basis定义项目占据的主轴空间（main size）,默认是auto.还有就是它可能被其他flex属性所影响。 1flex-basis: &lt;length&gt; | auto; /* default auto */ 下面这个 GIF 表示的是它和 width 属性是可以互换的。（但是不完全是这样）注意：flex-basis 和 width 不同的地方是，它是和 flex 坐标轴保持一致的，flex-basis是影响主轴上大小。 下面保持flex-basis不变，改变主轴方向 这个时候改变height，而不是width，flex-basis 根据 flex-direction 的不同会影响到 width 或者 height。 flexflex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。 12345678910/*简写auto (1 1 auto) none (0 0 auto)*/.square#one &#123; flex: 2 1 300px;&#125;.square#two &#123; flex: 1 2 300px;&#125; 最后注意：主轴和交叉轴需要特别注意方向，因为flex属性大部分是作用与轴上的,而方向不同就会导致不同布局效果。","content":"<h3 id=\"Flex布局是什么？\"><a href=\"#Flex布局是什么？\" class=\"headerlink\" title=\"Flex布局是什么？\"></a>Flex布局是什么？</h3><p>W3C针对布局设计的新标准，相对float和position会更加灵活处理父元素和子元素之间布局关系，让布局更加直观和灵活简单。有效的针对不同屏幕宽度大小的情况下，让元素自动有效合理处理布局结构。<br>适用范围<br>弹性盒子布局主要适用于应用程序的组件及小规模的布局，而（新兴的）栅格布局则针对大规模的布局。</p>\n<h3 id=\"Flex布局基本概念\"><a href=\"#Flex布局基本概念\" class=\"headerlink\" title=\"Flex布局基本概念\"></a>Flex布局基本概念</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/5138806-07a31a6debb07b84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h4 id=\"弹性容器-Flex-container\"><a href=\"#弹性容器-Flex-container\" class=\"headerlink\" title=\"弹性容器(Flex container)\"></a>弹性容器(Flex container)</h4><p>通过设置 display 属性的值为 flex 或 inline-flex<br>来定义弹性容器。</p>\n<h4 id=\"弹性项目-Flex-item\"><a href=\"#弹性项目-Flex-item\" class=\"headerlink\" title=\"弹性项目(Flex item)\"></a>弹性项目(Flex item)</h4><p>弹性容器里子元素自动成为弹性项目，并且弹性项目的float、clear和vertical-align属性将失效。</p>\n<h4 id=\"轴-Axis\"><a href=\"#轴-Axis\" class=\"headerlink\" title=\"轴(Axis)\"></a>轴(Axis)</h4><ul>\n<li>主轴（main axis）</li>\n<li>交叉轴（cross axis）<br>这个2个轴决定了容器里的项目整体布局效果。</li>\n</ul>\n<h3 id=\"Flex容器属性\"><a href=\"#Flex容器属性\" class=\"headerlink\" title=\"Flex容器属性\"></a>Flex容器属性</h3><ol>\n<li>flex-direction</li>\n<li>flex-wrap</li>\n<li>flex-flow</li>\n<li>justify-content</li>\n<li>align-items</li>\n<li>align-content</li>\n</ol>\n<p><strong>flex-direction</strong></p>\n<p>flex-direction决定主轴方向，默认情况下，元素都是从左到右地分布在主轴上</p>\n<p>4个取值：</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flex-directi<span class=\"symbol\">on:</span> <span class=\"built_in\">row</span> | <span class=\"built_in\">row</span>-reverse | <span class=\"built_in\">column</span> <span class=\"built_in\">column</span>-reverse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">row</span>（默认值）：主轴为水平方向，起点在左端。</span><br><span class=\"line\"><span class=\"built_in\">row</span>-reverse：主轴为水平方向，起点在右端。</span><br><span class=\"line\"><span class=\"built_in\">column</span>：主轴为垂直方向，起点在上沿。</span><br><span class=\"line\"><span class=\"built_in\">column</span>-reverse：主轴为垂直方向，起点在下沿。</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5138806-ca324851139075da.gif?imageMogr2/auto-orient/strip\" alt=\"\"><br><img src=\"http://upload-images.jianshu.io/upload_images/5138806-1cb307d9c8bdb40a.gif?imageMogr2/auto-orient/strip\" alt=\"\"><br><strong>flex-wrap</strong><br>是否可以换行（默认不换行），以及如果可以换行，如何排列<br>3个取值</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flex-<span class=\"built_in\">wrap</span>: nowrap | <span class=\"built_in\">wrap</span> | <span class=\"built_in\">wrap</span>-<span class=\"built_in\">reverse</span>;</span><br><span class=\"line\">nowrap: 默认不换行</span><br><span class=\"line\"><span class=\"built_in\">wrap</span>: 可以多行，第一行在上方</span><br><span class=\"line\"><span class=\"built_in\">wrap</span>-<span class=\"built_in\">reverse</span>: 可以多行，第一行在下方</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5138806-0906bff7831be461.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>flex-flow</strong><br>flex-direction 和 flex-wrap 的简写,默认row nowrap</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flex-flow: <span class=\"tag\">&lt;<span class=\"name\">flex-direction</span>&gt;</span> || <span class=\"tag\">&lt;<span class=\"name\">flex-wrap</span>&gt;</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>justify-content</strong><br>决定项目在主轴上的对齐方式<br>5种取值：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justify-content: flex-<span class=\"keyword\">start</span> | flex-<span class=\"keyword\">end</span> | center | <span class=\"keyword\">space</span>-<span class=\"keyword\">between</span> | <span class=\"keyword\">space</span>-around;</span><br><span class=\"line\"></span><br><span class=\"line\">flex-<span class=\"keyword\">start</span>: 左对齐（默认）</span><br><span class=\"line\">flex-<span class=\"keyword\">end</span>: 右对齐</span><br><span class=\"line\">center: 居中对齐</span><br><span class=\"line\"><span class=\"keyword\">space</span>-<span class=\"keyword\">between</span>: 两端对齐，项目之间的间距相等</span><br><span class=\"line\"><span class=\"keyword\">space</span>-around: 均匀对齐，每个项目两端的间距相等</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5138806-99026f446ad3b020.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<p><strong>align-items</strong><br>决定交叉轴的对齐方式</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">align-items: flex-start | <span class=\"type\">flex</span>-<span class=\"keyword\">end</span> | <span class=\"type\">center</span> | <span class=\"type\">baseline</span> | <span class=\"type\">stretch</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">flex-start: 交叉轴起点对齐</span><br><span class=\"line\">flex-<span class=\"keyword\">end</span>: 交叉轴终点对齐</span><br><span class=\"line\">center: 交叉轴居中对齐</span><br><span class=\"line\">baseline: 第一行文字的底部对齐</span><br><span class=\"line\">stretch: （默认）如果项目木有设置高度或者高度为<span class=\"built_in\">auto</span>,那么项目拉伸充满整个交叉轴空间</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5138806-ec26abbafb5f9156.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<p>注意：记住justify-content是沿着主轴的，align-items是沿着交叉轴的，而flex-direction是转换主轴的。这对整体移动元素很关键。<br><img src=\"http://upload-images.jianshu.io/upload_images/5138806-150965ba6c5b61e6.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<p><strong>align-content</strong><br>定义多行轴线的对齐方式（如果只有一行，该属性不起作用）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">align-content: flex-<span class=\"keyword\">start</span> | flex-<span class=\"keyword\">end</span> | center | <span class=\"keyword\">space</span>-<span class=\"keyword\">between</span> | <span class=\"keyword\">space</span>-around | stretch;</span><br><span class=\"line\"></span><br><span class=\"line\">flex-<span class=\"keyword\">start</span>: 交叉轴起点对齐</span><br><span class=\"line\">flex-<span class=\"keyword\">end</span>: 交叉轴终点对齐</span><br><span class=\"line\"><span class=\"keyword\">space</span>-<span class=\"keyword\">between</span>: 交叉轴两端对齐，行之间间距相等</span><br><span class=\"line\"><span class=\"keyword\">space</span>-around: 交叉轴均匀对齐，行两端间距相等</span><br><span class=\"line\">stretch: 平均分配交叉轴空间，相邻行间距相等（默认，前提如果项目木有设置高度或者高度为<span class=\"keyword\">auto</span>）</span><br></pre></td></tr></table></figure>\n<p>注意：当项目的高度之和小于容器的高度并且项目高度固定时，会以交叉轴起点对齐并且项目之间间距相等，但不是flex-start对齐方式，如果此时设置flex-start是没有间距的。</p>\n<p>这里项目设置了固定高度，所以stretch无效<br><img src=\"http://upload-images.jianshu.io/upload_images/5138806-71d044f79ed26fa0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"Flex项目属性\"><a href=\"#Flex项目属性\" class=\"headerlink\" title=\"Flex项目属性\"></a>Flex项目属性</h3><ul>\n<li>order</li>\n<li>align-self</li>\n<li>flex-grow</li>\n<li>flex-shrink</li>\n<li>flex-basis</li>\n</ul>\n<p><strong>order</strong><br>根据order的值定义项目排列顺序。数值越小，排列越靠前，默认为0<br><img src=\"http://upload-images.jianshu.io/upload_images/5138806-2f88fa3bd7f3f118.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>align-self</strong><br>定义单个项目在交叉轴的对齐方式，可覆盖align-items属性<br>取值和align-items一样：<br><img src=\"http://upload-images.jianshu.io/upload_images/5138806-9333f597411f618c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>flex-grow</strong><br>定义项目放大比例，默认为0，当容器有剩余空间时不放大.<br>重点在于，每个方块的 flex-grow 和其他方块的是成比例的。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">flex-grow</span>: &lt;number&gt;; <span class=\"comment\">/* default 0 */</span></span><br></pre></td></tr></table></figure>\n<p>第3个项目flex-grow 为3,其他5个项目为1，共 5+3 = 8,第3个占比为3/8,其他为1/8.<br><img src=\"http://upload-images.jianshu.io/upload_images/5138806-f35c86e614a3d80b.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<p><strong>flex-shrink</strong><br>定义项目缩小比例。默认为1，随着容器缩小而等比例缩小。<br>如果设置为0，项目将不缩小。<br>基本和flex-grow类似，不过一个是缩小，一个是放大。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">flex-shrink</span>: &lt;number&gt;; <span class=\"comment\">/* default 1 */</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5138806-9dc8e0053f71c01f.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<p><strong>flex-basis</strong><br>定义项目占据的主轴空间（main size）,默认是auto.<br>还有就是它可能被其他flex属性所影响。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"comment\">/* default auto */</span></span><br></pre></td></tr></table></figure>\n<p>下面这个 GIF 表示的是它和 width 属性是可以互换的。（但是不完全是这样）<br><img src=\"http://upload-images.jianshu.io/upload_images/5138806-b7f18bfa88b83752.gif?imageMogr2/auto-orient/strip\" alt=\"\"><br>注意：flex-basis 和 width 不同的地方是，它是和 flex 坐标轴保持一致的，flex-basis是影响主轴上大小。</p>\n<p>下面保持flex-basis不变，改变主轴方向</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5138806-6155698a8e2b0f1d.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<p>这个时候改变height，而不是width，flex-basis 根据 flex-direction 的不同会影响到 width 或者 height。</p>\n<p><strong>flex</strong><br>flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*简写</span></span><br><span class=\"line\"><span class=\"comment\">auto (1 1 auto) </span></span><br><span class=\"line\"><span class=\"comment\">none (0 0 auto)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.square</span><span class=\"selector-id\">#one</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">2</span> <span class=\"number\">1</span> <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.square</span><span class=\"selector-id\">#two</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5138806-8eda6fdfe8524d76.gif?imageMogr2/auto-orient/strip\" alt=\"\"><br>最后注意：主轴和交叉轴需要特别注意方向，因为flex属性大部分是作用与轴上的,而方向不同就会导致不同布局效果。</p>\n","excerpt":"Flex布局是什么？W3C针对布局设计的新标准，相对float和position会更加灵活处理父元素和子元素之间布局关系，让布局更加直观和灵活简单。有效的针对不同屏幕宽度大小的情况下，让元素自动有效合理处理布局结构。适用范围弹性盒子布局主要适用于应用程序的组件及小规模的布局，而（新兴的）栅格布局则针对大规模的布局。 Flex布局基本概念","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://www.ding1996.cn/tags/css/"}]},{"title":"正则表达式之入门","date":"2017-06-06T01:34:10.000Z","path":"2017/06/06/it-js-reg/","text":"直接量字符 字符 匹配 字符和数字字符 自身 字符和数字字符 自身 o NUL字符(u0000) t 制表符(u0009) n 换行符(u000A) v 垂直制表符(u000B) f 换页符(u000C) r 回车符(u000D) 字符类将直接量字符单独放进方括号([])内就组成了字符类。一个字符类可以匹配它所包含的任意字符。字符类可以使用连字符来表示字符范围。 字符 匹配 […] 方括号内的任意字符 [^ …] 不在方括号内的任意字符 . 除换行符和其他Unicode行终止符之外的任意字符 w 任何ASCⅡ字符组成的单词，等价于[a-zA-Z0-9] W 任何ASCⅡ字符组成的单词，等价于[^ a-zA-Z0-9] s 任何Unicode空白符 S 任何非Unicode空白符（注意区分w与S） d 任何ASCⅡ数字，等价于[0-9] D 除了ASCⅡ数字之外的任何字符，等价于[^0-9] b 退格直接量（特例） 注：特殊转义字符也可以组成字符类（写在方括号内），比如/[sd]/匹配任意空白符或者数字。 重复重复字符语法 代码/语法 说明 * 重复零次或更多次 + 重复一次或更多次 ? 重复零次或一次 {n} 重复n次 {n,} 重复n次或更多次 {n,m} 重复n到m次 非贪婪的重复 上表中列出的匹配重复字符是尽可能多地匹配，而且允许后续的正则表达式继续匹配，即“贪婪匹配”在重复字符后跟随一个问号来进行非贪婪匹配如：+?、{1,5}?注：使用/a+?b/来匹配“aaab”的匹配结果同/a+b/一样为“aaab”而不是“ab”，因为匹配过程中并没有引起回溯。 指定匹配位置正则表达式中的锚字符 代码/语法 说明 ^ 匹配字符串的开头 $ 匹配字符串的结尾 b 匹配一个单词的边界，即位于字符w和W之间的位置或w和字符串开头、结尾之间的位置 B 匹配非单词边界的位置 (?=exp) 零宽正向先行断言。断言自身出现的位置的后面能匹配表达式exp。比如bw+(?=ingb)，匹配以ing结尾的单词的前面部分(除了ing以外的部分) (?!exp) 零宽负向先行断言。断言此位置的后面不能匹配表达式exp。例如：d{3}(?!d)匹配三位数字，而且这三位数字的后面不能是数字 正则表达式修饰符 代码/语法 说明 i 执行不区分大小写的匹配 g 执行全局匹配，即找到所有的匹配，而不是在找到一个之后就停止 m 多行匹配，^匹配一行的开头，$匹配行的结束 用于模式匹配的String方法123456789101112131415161718192021222324// search方法返回第一个与之匹配子串的起始位置，找不到则返回-1// 强制转换参数为RegExp类型// 不支持全局检索，忽略正则中的g修饰符'JavaScript'.search(/script/i)// 不强制正则参数// 第二个参数可以为函数，动态计算替换字符串'javascript'.replace(/javascript/gi, 'JavaScript')/* * 重点 * 替换字符串中可以使用\"$n\"取得正则中子表达式匹配的文本 * n为正则中从左到右的索引编号 */ // 最常用match方法 '1 plus 2 equals 3'.match(/d+/g) // ['1', '2', '3'] // 接受唯一正则参数，如不是正则则自行调用RegExp // match方法返回一个数组 // arr[0]存放的谁完整的匹配 // arr[n]存放的是正则中第n个用圆括号括起来的表达式匹配的子串($n的内容) // 如果传入的参数时一个非全局的正则，则返回结果同调用正则的exec() // split()方法也可以接受正则参数 '1, 2, 3, 4'.split(/s*,s*/) // ['1', '2', '3', '4'] RegExp的属性和方法5个属性 source 只读字符串，包含正则的文本 global 只读布尔值，正则是否带有修饰符g ignoreCase 只读布尔值，正则是否带有修饰符i multiline 只读布尔值，正则是否带有修饰符m lastIndex 可读写的整数，如果匹配模式带有g修饰符，这个属性存放整个字符串下一次检索的开始位置2个方法 1234567891011121314151617// exec() 与字符串的match方法不同的是，不管正则有没有g修饰符，exec()都会返回一样的数组，即总是返回一个匹配结果，并提供本次匹配的完整信息// 当调用exec()的正则带有g修饰符时，它将当前正则对象的lastIndex设置为紧挨着匹配子串的字符位置。当同一正则第二次调用exec()时，他将从lastIndex属性所指示的字符串处开始检索// 如果exec()没有发现任何匹配结果，它会安静lastIndex重置为0// 任何时候都可以将lastIndex手动重置为0// 以上特性使在使用正则匹配字符串过程中反复调用exec():var pattern = /Java/gvar text = 'JavaScript is more fun then Java'var resultwhile ((result = pattern.exec(text)) != null) &#123;alert('Matched \"' + result[0] + '\"'' at position ' + result.index +'; next search begins at ' + pattern.lastIndex)&#125;// 第二个方法是test()// 调用test()和调用exec()等价，当exec()的返回结果不是null时，test()返回truevar pattern = /java/ipattern.test('JavaScript') // true","content":"<h3 id=\"直接量字符\"><a href=\"#直接量字符\" class=\"headerlink\" title=\"直接量字符\"></a>直接量字符</h3><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>字符和数字字符</td>\n<td>自身</td>\n</tr>\n<tr>\n<td>字符和数字字符</td>\n<td>自身</td>\n</tr>\n<tr>\n<td>o</td>\n<td>NUL字符(u0000)</td>\n</tr>\n<tr>\n<td>t</td>\n<td>制表符(u0009)</td>\n</tr>\n<tr>\n<td>n</td>\n<td>换行符(u000A)</td>\n</tr>\n<tr>\n<td>v</td>\n<td>垂直制表符(u000B)</td>\n</tr>\n<tr>\n<td>f</td>\n<td>换页符(u000C)</td>\n</tr>\n<tr>\n<td>r</td>\n<td>回车符(u000D)</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<h3 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h3><p>将直接量字符单独放进方括号([])内就组成了字符类。一个字符类可以匹配它所包含的任意字符。<br>字符类可以使用连字符来表示字符范围。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字符</th>\n<th style=\"text-align:left\">匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">[…]</td>\n<td style=\"text-align:left\">方括号内的任意字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^ …]</td>\n<td style=\"text-align:left\">不在方括号内的任意字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">.</td>\n<td style=\"text-align:left\">除换行符和其他Unicode行终止符之外的任意字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">w</td>\n<td style=\"text-align:left\">任何ASCⅡ字符组成的单词，等价于[a-zA-Z0-9]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">W</td>\n<td style=\"text-align:left\">任何ASCⅡ字符组成的单词，等价于[^ a-zA-Z0-9]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s</td>\n<td style=\"text-align:left\">任何Unicode空白符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">S</td>\n<td style=\"text-align:left\">任何非Unicode空白符（注意区分w与S）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">d</td>\n<td style=\"text-align:left\">任何ASCⅡ数字，等价于[0-9]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">D</td>\n<td style=\"text-align:left\">除了ASCⅡ数字之外的任何字符，等价于[^0-9]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">b</td>\n<td style=\"text-align:left\">退格直接量（特例）</td>\n</tr>\n</tbody>\n</table>\n<p>注：特殊转义字符也可以组成字符类（写在方括号内），比如/[sd]/匹配任意空白符或者数字。</p>\n<h3 id=\"重复\"><a href=\"#重复\" class=\"headerlink\" title=\"重复\"></a>重复</h3><p><strong>重复字符语法</strong></p>\n<table>\n<thead>\n<tr>\n<th>代码/语法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>重复零次或更多次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>重复一次或更多次</td>\n</tr>\n<tr>\n<td>?</td>\n<td>重复零次或一次</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>重复n次</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>重复n次或更多次</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>重复n到m次</td>\n</tr>\n</tbody>\n</table>\n<p><strong>非贪婪的重复</strong></p>\n<p>上表中列出的匹配重复字符是尽可能多地匹配，而且允许后续的正则表达式继续匹配，即“贪婪匹配”<br>在重复字符后跟随一个问号来进行非贪婪匹配如：+?、{1,5}?<br>注：使用/a+?b/来匹配“aaab”的匹配结果同/a+b/一样为“aaab”而不是“ab”，因为匹配过程中并没有引起回溯。</p>\n<h3 id=\"指定匹配位置\"><a href=\"#指定匹配位置\" class=\"headerlink\" title=\"指定匹配位置\"></a>指定匹配位置</h3><p><strong>正则表达式中的锚字符</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码/语法</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td style=\"text-align:left\">匹配字符串的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$</td>\n<td style=\"text-align:left\">匹配字符串的结尾</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">b</td>\n<td style=\"text-align:left\">匹配一个单词的边界，即位于字符w和W之间的位置或w和字符串开头、结尾之间的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">B</td>\n<td style=\"text-align:left\">匹配非单词边界的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?=exp)</td>\n<td style=\"text-align:left\">零宽正向先行断言。断言自身出现的位置的后面能匹配表达式exp。比如bw+(?=ingb)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?!exp)</td>\n<td style=\"text-align:left\">零宽负向先行断言。断言此位置的后面不能匹配表达式exp。例如：d{3}(?!d)匹配三位数字，而且这三位数字的后面不能是数字</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"正则表达式修饰符\"><a href=\"#正则表达式修饰符\" class=\"headerlink\" title=\"正则表达式修饰符\"></a>正则表达式修饰符</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">代码/语法</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">i</td>\n<td style=\"text-align:left\">执行不区分大小写的匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">g</td>\n<td style=\"text-align:left\">执行全局匹配，即找到所有的匹配，而不是在找到一个之后就停止</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">m</td>\n<td style=\"text-align:left\">多行匹配，^匹配一行的开头，$匹配行的结束</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"用于模式匹配的String方法\"><a href=\"#用于模式匹配的String方法\" class=\"headerlink\" title=\"用于模式匹配的String方法\"></a>用于模式匹配的String方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// search方法返回第一个与之匹配子串的起始位置，找不到则返回-1</span></span><br><span class=\"line\"><span class=\"comment\">// 强制转换参数为RegExp类型</span></span><br><span class=\"line\"><span class=\"comment\">// 不支持全局检索，忽略正则中的g修饰符</span></span><br><span class=\"line\"><span class=\"string\">'JavaScript'</span>.search(<span class=\"regexp\">/script/i</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不强制正则参数</span></span><br><span class=\"line\"><span class=\"comment\">// 第二个参数可以为函数，动态计算替换字符串</span></span><br><span class=\"line\"><span class=\"string\">'javascript'</span>.replace(<span class=\"regexp\">/javascript/gi</span>, <span class=\"string\">'JavaScript'</span>)</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 重点</span></span><br><span class=\"line\"><span class=\"comment\"> * 替换字符串中可以使用\"$n\"取得正则中子表达式匹配的文本</span></span><br><span class=\"line\"><span class=\"comment\"> * n为正则中从左到右的索引编号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span> </span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 最常用match方法</span></span><br><span class=\"line\"> <span class=\"string\">'1 plus 2 equals 3'</span>.match(<span class=\"regexp\">/d+/g</span>) <span class=\"comment\">// ['1', '2', '3']</span></span><br><span class=\"line\"> <span class=\"comment\">// 接受唯一正则参数，如不是正则则自行调用RegExp</span></span><br><span class=\"line\"> <span class=\"comment\">// match方法返回一个数组</span></span><br><span class=\"line\"> <span class=\"comment\">// arr[0]存放的谁完整的匹配</span></span><br><span class=\"line\"> <span class=\"comment\">// arr[n]存放的是正则中第n个用圆括号括起来的表达式匹配的子串($n的内容)</span></span><br><span class=\"line\"> <span class=\"comment\">// 如果传入的参数时一个非全局的正则，则返回结果同调用正则的exec()</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// split()方法也可以接受正则参数</span></span><br><span class=\"line\"> <span class=\"string\">'1, 2, 3, 4'</span>.split(<span class=\"regexp\">/s*,s*/</span>) <span class=\"comment\">// ['1', '2', '3', '4']</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"RegExp的属性和方法\"><a href=\"#RegExp的属性和方法\" class=\"headerlink\" title=\"RegExp的属性和方法\"></a>RegExp的属性和方法</h3><p><strong>5个属性</strong></p>\n<ol>\n<li>source 只读字符串，包含正则的文本</li>\n<li>global 只读布尔值，正则是否带有修饰符g</li>\n<li>ignoreCase 只读布尔值，正则是否带有修饰符i</li>\n<li>multiline 只读布尔值，正则是否带有修饰符m</li>\n<li>lastIndex 可读写的整数，如果匹配模式带有g修饰符，这个属性存放整个字符串下一次检索的开始位置<br><strong>2个方法</strong></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// exec() 与字符串的match方法不同的是，不管正则有没有g修饰符，exec()都会返回一样的数组，即总是返回一个匹配结果，并提供本次匹配的完整信息</span></span><br><span class=\"line\"><span class=\"comment\">// 当调用exec()的正则带有g修饰符时，它将当前正则对象的lastIndex设置为紧挨着匹配子串的字符位置。当同一正则第二次调用exec()时，他将从lastIndex属性所指示的字符串处开始检索</span></span><br><span class=\"line\"><span class=\"comment\">// 如果exec()没有发现任何匹配结果，它会安静lastIndex重置为0</span></span><br><span class=\"line\"><span class=\"comment\">// 任何时候都可以将lastIndex手动重置为0</span></span><br><span class=\"line\"><span class=\"comment\">// 以上特性使在使用正则匹配字符串过程中反复调用exec():</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"regexp\">/Java/g</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">'JavaScript is more fun then Java'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((result = pattern.exec(text)) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">alert(<span class=\"string\">'Matched \"'</span> + result[<span class=\"number\">0</span>] + <span class=\"string\">'\"'</span></span><br><span class=\"line\"><span class=\"string\">' at position '</span> + result.index +</span><br><span class=\"line\"><span class=\"string\">'; next search begins at '</span> + pattern.lastIndex)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 第二个方法是test()</span></span><br><span class=\"line\"><span class=\"comment\">// 调用test()和调用exec()等价，当exec()的返回结果不是null时，test()返回true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"regexp\">/java/i</span></span><br><span class=\"line\">pattern.test(<span class=\"string\">'JavaScript'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n","excerpt":"直接量字符 字符 匹配 字符和数字字符 自身 字符和数字字符 自身 o NUL字符(u0000) t 制表符(u0009) n 换行符(u000A) v 垂直制表符(u000B) f 换页符(u000C) r 回车符(u000D)","categories":[],"tags":[{"name":"正则","slug":"正则","permalink":"http://www.ding1996.cn/tags/正则/"}]},{"title":"前端开发者指南（2017）","date":"2017-06-05T09:07:08.000Z","path":"2017/06/05/it-data-2017FE/","text":"作者：科迪·林黎（Cody Lindley），由「前端大师（Frontend Masters）」倾情赞助。 这是一本可供任何人使用的指南，用于学习前端开发实践。该指南大体上勾勒出了前端工程的轮廓，同时也讨论了前端工程的实践：2017 年，如何学习前端工程，用什么工具来实践？ 笔者有意将本书打造为一份专业资料，为想要或正在实践的前端开发者们提供学习材料和开发工具。其次，它同样可供主管、CTO、讲师和猎头们深入探索前端开发实践。 本书内容偏向于 WEB 技术（HTML、CSS、DOM、JavaScript）和以这些技术为根基直接构建而成的开源技术。书中引用和讨论的材料要么就是同类翘楚，要么就是解决问题的流行方案。 本书不是一本囊括所有前端可用资源的综合纲领。其价值在于为恰好够用的分类信息搜罗简洁、聚焦且符合时宜的甄选内容，以免在特别话题下钻了牛角尖。 预期本书每年都迭代一次内容。 本书分为三部分。 第一部分：前端实践第一部分概述了前端工程实践。 第二部分：学习前端开发第二部分指出了学习成为一个前端开发者所需的自学资源和教学资源（译者注：教学资源包括有讲师指导的付费课程、计划、学院和训练营）。 第三部分：前端开发工具第三部分简要地介绍和指出了一些前端圈內的工具。 文章目录 前端开发者是什么？ 2016 前端开发回顾 展望 2017 第一部分. 前端实践 前端职称 前端开发者所使用的技术 前端开发技能 前端开发者为 … 而开发 团队里的前端 全能型人才/全栈神话 前端面试 前端开发职位公示 前端开发薪资 前端开发者是如何诞生的 第二部分：学习前端开发 自学 关于互联网／WEB 学习 Web 浏览器 学习域名系统（又叫 DNS） 学习 HTTP/Networks（包括 CORS 和 WebSockets） 学习网页寄存（通称虚拟主机） 学习前端开发 学习用户界面／交互设计 学习 HTML 和 CSS 学习搜索引擎优化 学习 JavaScript 学习 Web 动画 学习 DOM、BOM 和 jQuery 学习网页字体 &amp; 图标 学习可访问性相关知识 学习 web／浏览器 API 学习 JSON (JavaScript 对象表示法) 学习 JS 模板 学习静态网页生成器 通过JS学习计算机科学 学习前端应用架构 学习数据（例如，JSON）API 的设计 学习 React &amp; Redux 学习渐进式 Web 应用 学习设计 JS API 学习web开发工具 学习命令行的使用 学习 Node.js 学习 JS 模块系统 学习模块加载和打包工具 学习包管理工具 学习版本控制 学习构建及任务自动化技术 学习网站性能优化 学习测试 学习无头浏览器 学习离线开发 学习网络／浏览器／应用的安全 多平台开发学习 导向学习 前端课程 前端开发学习的起点 前端资讯、新闻站和播客 第三部分：前端开发工具 Doc/API 浏览工具 SEO 工具 原型设计和线框图工具 制图工具 HTTP / 网络工具 代码编辑工具 浏览器上的神兵利器 HTML 工具 CSS 工具 DOM 工具 JavaScript 工具 静态网页构建工具 无障碍访问工具 应用程序框架工具（台式机、手机、平板电脑等） 渐进式 Web 应用工具 脚手架工具 常规前端开发工具 模版／数据绑定工具 UI 组件 &amp; 组件包 数据可视化工具（例如图表） 图形工具（例如 SVG、canvas、webGL） 动画工具 JSON 工具 占位符内容工具 测试工具 前端数据存储工具 (例如客户端的数据存储方案) 模块加载／打包工具 模块／包管理工具 托管工具 项目管理以及代码托管工具 协作与沟通工具 内容管理 托管／API 工具 后端即服务工具 离线工具 安全工具 构建工具 部署工具 网站／应用监控工具 JavaScript 错误报告／监控 性能工具 寻找工具的工具 下载 .pdf、.epub、或 .mobi 格式的电子书: 中文：https://www.gitbook.com/book/sqrtthree/front-end-handbook-2017/details 英文：https://www.gitbook.com/book/frontendmasters/front-end-handbook-2017/details 贡献内容、提建议或者修复 GitHub 上的 bugs: https://github.com/xitu/front-end-handbook-2017 本文档基于 Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License 协议发布。 致谢 沪江Web前端团队 掘金翻译计划","content":"<p><a href=\"https://github.com/xitu/gold-miner/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://rawgit.com/aleen42/badges/master/src/juejin_translation.svg\" alt=\"掘金翻译计划\"></a><br><a href=\"https://github.com/hujiang-fe\" target=\"_blank\" rel=\"noopener\"><img src=\"https://cdn.rawgit.com/Hujiang-FE/icons/fff32467/logo.svg\" alt=\"沪江Web前端团队\"></a></p>\n<p><img src=\"http://frontendmasters.com/books/front-end-handbook/2017/cover.jpg\" alt=\"cover-img\"></p>\n<p>作者：<a href=\"http://codylindley.com/\" target=\"_blank\" rel=\"noopener\">科迪·林黎（Cody Lindley）</a>，由<a href=\"https://frontendmasters.com/\" target=\"_blank\" rel=\"noopener\">「前端大师（Frontend Masters）」</a>倾情赞助。</p>\n<a id=\"more\"></a>\n<p>这是一本可供任何人使用的指南，用于学习前端开发实践。该指南大体上勾勒出了前端工程的轮廓，同时也讨论了前端工程的实践：2017 年，如何学习前端工程，用什么工具来实践？</p>\n<p>笔者有意将本书打造为一份专业资料，为想要或正在实践的前端开发者们提供学习材料和开发工具。其次，它同样可供主管、CTO、讲师和猎头们深入探索前端开发实践。</p>\n<p>本书内容偏向于 WEB 技术（HTML、CSS、DOM、JavaScript）和以这些技术为根基直接构建而成的开源技术。书中引用和讨论的材料要么就是同类翘楚，要么就是解决问题的流行方案。</p>\n<p>本书不是一本囊括所有前端可用资源的综合纲领。其价值在于为恰好够用的分类信息搜罗简洁、聚焦且符合时宜的甄选内容，以免在特别话题下钻了牛角尖。</p>\n<p>预期本书每年都迭代一次内容。</p>\n<p>本书分为三部分。</p>\n<h2 id=\"第一部分：前端实践\"><a href=\"#第一部分：前端实践\" class=\"headerlink\" title=\"第一部分：前端实践\"></a>第一部分：前端实践</h2><p>第一部分概述了前端工程实践。</p>\n<h2 id=\"第二部分：学习前端开发\"><a href=\"#第二部分：学习前端开发\" class=\"headerlink\" title=\"第二部分：学习前端开发\"></a>第二部分：学习前端开发</h2><p>第二部分指出了学习成为一个前端开发者所需的自学资源和教学资源（译者注：教学资源包括有讲师指导的付费课程、计划、学院和训练营）。</p>\n<h2 id=\"第三部分：前端开发工具\"><a href=\"#第三部分：前端开发工具\" class=\"headerlink\" title=\"第三部分：前端开发工具\"></a>第三部分：前端开发工具</h2><p>第三部分简要地介绍和指出了一些前端圈內的工具。</p>\n<h1 id=\"文章目录\"><a href=\"#文章目录\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h1><ul>\n<li><a href=\"what-is-a-FD.md\">前端开发者是什么？</a></li>\n<li><a href=\"recap.md\">2016 前端开发回顾</a></li>\n<li><a href=\"2017.md\">展望 2017</a></li>\n<li><a href=\"practice.md\">第一部分. 前端实践</a><ul>\n<li><a href=\"practice/types-of-front-end-dev.md\">前端职称</a></li>\n<li><a href=\"practice/tech-employed-by-fd.md\">前端开发者所使用的技术</a></li>\n<li><a href=\"practice/skills.md\">前端开发技能</a></li>\n<li><a href=\"practice/fd-dev-for.md\">前端开发者为 … 而开发</a></li>\n<li><a href=\"practice/team.md\">团队里的前端</a><!--- * [Front-End Terms](template.md) --></li>\n<li><a href=\"practice/myth.md\">全能型人才/全栈神话</a></li>\n<li><a href=\"practice/interview-q.md\">前端面试</a></li>\n<li><a href=\"practice/jobboards.md\">前端开发职位公示</a></li>\n<li><a href=\"practice/salaries.md\">前端开发薪资</a></li>\n<li><a href=\"practice/making-fd.md\">前端开发者是如何诞生的</a></li>\n</ul>\n</li>\n<li><a href=\"learning.md\">第二部分：学习前端开发</a><ul>\n<li><a href=\"learning/self-direct-learning.md\">自学</a><ul>\n<li><a href=\"learning/internet.md\">关于互联网／WEB</a></li>\n<li><a href=\"learning/browsers.md\">学习 Web 浏览器</a></li>\n<li><a href=\"learning/dns.md\">学习域名系统（又叫 DNS）</a></li>\n<li><a href=\"learning/http-networks.md\">学习 HTTP/Networks（包括 CORS 和 WebSockets）</a></li>\n<li><a href=\"learning/hosting.md\">学习网页寄存（通称虚拟主机）</a></li>\n<li><a href=\"learning/front-end.md\">学习前端开发</a></li>\n<li><a href=\"learning/ui-design-patterns.md\">学习用户界面／交互设计</a></li>\n<li><a href=\"learning/html-css.md\">学习 HTML 和 CSS</a></li>\n<li><a href=\"learning/seo.md\">学习搜索引擎优化</a></li>\n<li><a href=\"learning/javascript.md\">学习 JavaScript</a></li>\n<li><a href=\"learning/animation.md\">学习 Web 动画</a></li>\n<li><a href=\"learning/dom.md\">学习 DOM、BOM 和 jQuery</a></li>\n<li><a href=\"learning/fonts.md\">学习网页字体 &amp; 图标</a></li>\n<li><a href=\"learning/accessibility.md\">学习可访问性相关知识</a></li>\n<li><a href=\"learning/web-api.md\">学习 web／浏览器 API</a></li>\n<li><a href=\"learning/json.md\">学习 JSON (JavaScript 对象表示法)</a></li>\n<li><a href=\"learning/templates.md\">学习 JS 模板</a></li>\n<li><a href=\"learning/static.md\">学习静态网页生成器</a></li>\n<li><a href=\"learning/cs.md\">通过JS学习计算机科学</a></li>\n<li><a href=\"learning/front-end-apps.md\">学习前端应用架构</a></li>\n<li><a href=\"learning/data-api.md\">学习数据（例如，JSON）API 的设计</a></li>\n<li><a href=\"learning/react-redux.md\">学习 React &amp; Redux</a></li>\n<li><a href=\"learning/pwa.md\">学习渐进式 Web 应用</a></li>\n<li><a href=\"learning/js-api.md\">学习设计 JS API</a></li>\n<li><a href=\"learning/browser-dev-tools.md\">学习web开发工具</a></li>\n<li><a href=\"learning/cli.md\">学习命令行的使用</a></li>\n<li><a href=\"learning/node.md\">学习 Node.js</a></li>\n<li><a href=\"learning/module.md\">学习 JS 模块系统</a></li>\n<li><a href=\"learning/module-bundlers-loaders.md\">学习模块加载和打包工具</a></li>\n<li><a href=\"learning/package-manager.md\">学习包管理工具</a></li>\n<li><a href=\"learning/version-control.md\">学习版本控制</a></li>\n<li><a href=\"learning/build.md\">学习构建及任务自动化技术</a></li>\n<li><a href=\"learning/perf.md\">学习网站性能优化</a></li>\n<li><a href=\"learning/test.md\">学习测试</a></li>\n<li><a href=\"learning/headless-browsers.md\">学习无头浏览器</a></li>\n<li><a href=\"learning/offline.md\">学习离线开发</a></li>\n<li><a href=\"learning/security.md\">学习网络／浏览器／应用的安全</a></li>\n<li><a href=\"learning/multi-device-dev.md\">多平台开发学习</a></li>\n</ul>\n</li>\n<li><a href=\"learning/direct-learning.md\">导向学习</a><ul>\n<li><a href=\"learning/courses.md\">前端课程</a></li>\n</ul>\n</li>\n<li><a href=\"learning/learn-from.md\">前端开发学习的起点</a></li>\n<li><a href=\"learning/news-podcasts.md\">前端资讯、新闻站和播客</a></li>\n</ul>\n</li>\n<li><a href=\"tools.md\">第三部分：前端开发工具</a><ul>\n<li><a href=\"tools/browsedocs.md\">Doc/API 浏览工具</a></li>\n<li><a href=\"tools/seo.md\">SEO 工具</a></li>\n<li><a href=\"tools/proto.md\">原型设计和线框图工具</a></li>\n<li><a href=\"tools/diagram.md\">制图工具</a></li>\n<li><a href=\"tools/http.md\">HTTP / 网络工具</a></li>\n<li><a href=\"tools/code-editor.md\">代码编辑工具</a></li>\n<li><a href=\"tools/browser.md\">浏览器上的神兵利器</a></li>\n<li><a href=\"tools/html.md\">HTML 工具</a></li>\n<li><a href=\"tools/css.md\">CSS 工具</a></li>\n<li><a href=\"tools/dom.md\">DOM 工具</a></li>\n<li><a href=\"tools/js.md\">JavaScript 工具</a></li>\n<li><a href=\"tools/static.md\">静态网页构建工具</a></li>\n<li><a href=\"tools/accessibility.md\">无障碍访问工具</a></li>\n<li><a href=\"tools/apps.md\">应用程序框架工具（台式机、手机、平板电脑等）</a></li>\n<li><a href=\"tools/pwa.md\">渐进式 Web 应用工具</a></li>\n<li><a href=\"tools/scaffolding.md\">脚手架工具</a></li>\n<li><a href=\"tools/dev-tools.md\">常规前端开发工具</a></li>\n<li><a href=\"tools/templates.md\">模版／数据绑定工具</a></li>\n<li><a href=\"tools/ui.md\">UI 组件 &amp; 组件包</a></li>\n<li><a href=\"tools/charting.md\">数据可视化工具（例如图表）</a></li>\n<li><a href=\"tools/graphics.md\">图形工具（例如 SVG、canvas、webGL）</a></li>\n<li><a href=\"tools/animation.md\">动画工具</a></li>\n<li><a href=\"tools/json.md\">JSON 工具</a></li>\n<li><a href=\"tools/placeholder.md\">占位符内容工具</a></li>\n<li><a href=\"tools/testing.md\">测试工具</a></li>\n<li><a href=\"tools/db.md\">前端数据存储工具 (例如客户端的数据存储方案)</a></li>\n<li><a href=\"tools/loaders.md\">模块加载／打包工具</a></li>\n<li><a href=\"tools/repo.md\">模块／包管理工具</a></li>\n<li><a href=\"tools/hosting.md\">托管工具</a></li>\n<li><a href=\"tools/project-hosting.md\">项目管理以及代码托管工具</a></li>\n<li><a href=\"tools/comm.md\">协作与沟通工具</a></li>\n<li><a href=\"tools/cms.md\">内容管理 托管／API 工具</a></li>\n<li><a href=\"tools/baas.md\">后端即服务工具</a></li>\n<li><a href=\"tools/offline.md\">离线工具</a></li>\n<li><a href=\"tools/security.md\">安全工具</a></li>\n<li><a href=\"tools/task.md\">构建工具</a></li>\n<li><a href=\"tools/deploy.md\">部署工具</a></li>\n<li><a href=\"tools/uptime.md\">网站／应用监控工具</a></li>\n<li><a href=\"tools/error.md\">JavaScript 错误报告／监控</a></li>\n<li><a href=\"tools/perf.md\">性能工具</a></li>\n<li><a href=\"tools/find-tools.md\">寻找工具的工具</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>下载 .pdf、.epub、或 .mobi 格式的电子书</strong>:</p>\n<ul>\n<li>中文：<a href=\"https://www.gitbook.com/book/sqrtthree/front-end-handbook-2017/details\" target=\"_blank\" rel=\"noopener\">https://www.gitbook.com/book/sqrtthree/front-end-handbook-2017/details</a></li>\n<li>英文：<a href=\"https://www.gitbook.com/book/frontendmasters/front-end-handbook-2017/details\" target=\"_blank\" rel=\"noopener\">https://www.gitbook.com/book/frontendmasters/front-end-handbook-2017/details</a></li>\n</ul>\n<p><strong>贡献内容、提建议或者修复 GitHub 上的 bugs</strong>:</p>\n<ul>\n<li><a href=\"https://github.com/xitu/front-end-handbook-2017\" target=\"_blank\" rel=\"noopener\">https://github.com/xitu/front-end-handbook-2017</a></li>\n</ul>\n<hr>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/\" target=\"_blank\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png\"></a><br>本文档基于 <a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/\" target=\"_blank\">Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License</a> 协议发布。</p>\n<h2 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h2><ul>\n<li><a href=\"https://github.com/hujiang-fe\" target=\"_blank\" rel=\"noopener\">沪江Web前端团队</a></li>\n<li><a href=\"https://github.com/xitu/gold-miner/\" target=\"_blank\" rel=\"noopener\">掘金翻译计划</a></li>\n</ul>\n","excerpt":"作者：科迪·林黎（Cody Lindley），由「前端大师（Frontend Masters）」倾情赞助。","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"http://www.ding1996.cn/tags/前端/"}]},{"title":"杀死进程的N种方法","date":"2017-05-25T07:43:48.000Z","path":"2017/05/25/it-cmd-process/","text":"编程的时候命令行总是少不了的下面说常用结束进程的几个命令 首先，用ps查看进程，方法如下： 1$ ps -ef ……smx 1822 1 0 11:38 ? 00:00:49 gnome-terminalsmx 1823 1822 0 11:38 ? 00:00:00 gnome-pty-helpersmx 1824 1822 0 11:38 pts/0 00:00:02 bashsmx 1827 1 4 11:38 ? 00:26:28 /usr/lib/firefox-3.6.18/firefox-binsmx 1857 1822 0 11:38 pts/1 00:00:00 bashsmx 1880 1619 0 11:38 ? 00:00:00 update-notifier……smx 11946 1824 0 21:41 pts/0 00:00:00 ps -ef或者：1$ ps -aux ……smx 1822 0.1 0.8 58484 18152 ? Sl 11:38 0:49 gnome-terminalsmx 1823 0.0 0.0 1988 712 ? S 11:38 0:00 gnome-pty-helpersmx 1824 0.0 0.1 6820 3776 pts/0 Ss 11:38 0:02 bashsmx 1827 4.3 5.8 398196 119568 ? Sl 11:38 26:13 /usr/lib/firefox-3.6.18/firefox-binsmx 1857 0.0 0.1 6688 3644 pts/1 Ss 11:38 0:00 bashsmx 1880 0.0 0.6 41536 12620 ? S 11:38 0:00 update-notifier……smx 11953 0.0 0.0 2716 1064 pts/0 R+ 21:42 0:00 ps -aux 此时如果我想杀了火狐的进程就在终端输入： 1$ kill -s 9 1827 其中-s 9 制定了传递给进程的信号是９，即强制、尽快终止进程。各个终止信号及其作用见附录。 1827则是上面ps查到的火狐的PID。 简单吧，但有个问题，进程少了则无所谓，进程多了，就会觉得痛苦了，无论是ps -ef 还是ps -aux，每次都要在一大串进程信息里面查找到要杀的进程，看的眼都花了。 进阶篇：改进１： 把ps的查询结果通过管道给grep查找包含特定字符串的进程。管道符“|”用来隔开两个命令，管道符左边命令的输出会作为管道符右边命令的输入。 1$ ps -ef | grep firefox smx 1827 1 4 11:38 ? 00:27:33 /usr/lib/firefox-3.6.18/firefox-binsmx 12029 1824 0 21:54 pts/0 00:00:00 grep –color=auto firefox 这次就清爽了。然后就是 1$kill -s 9 1827 还是嫌打字多？ 改进２——使用pgrep： 一看到pgrep首先会想到什么？没错，grep！pgrep的p表明了这个命令是专门用于进程查询的grep。 $ pgrep firefox1827 看到了什么？没错火狐的PID，接下来又要打字了： $kill -s 9 1827 改进３——使用pidof： 看到pidof想到啥？没错pid of xx，字面翻译过来就是 xx的PID。 $ pidof firefox-bin1827和pgrep相比稍显不足的是，pidof必须给出进程的全名。然后就是老生常谈： $kill -s 9 1827 无论使用ps 然后慢慢查找进程PID 还是用grep查找包含相应字符串的进程，亦或者用pgrep直接查找包含相应字符串的进程ＰＩＤ，然后手动输入给ｋｉｌｌ杀掉，都稍显麻烦。有没有更方便的方法？有！ 改进４： $ps -ef | grep firefox | grep -v grep | cut -c 9-15 | xargs kill -s 9 说明： “grep firefox”的输出结果是，所有含有关键字“firefox”的进程。 “grep -v grep”是在列出的进程中去除含有关键字“grep”的进程。 “cut -c 9-15”是截取输入行的第9个字符到第15个字符，而这正好是进程号PID。 “xargs kill -s 9”中的xargs命令是用来把前面命令的输出结果（PID）作为“kill -s 9”命令的参数，并执行该命令。“kill -s 9”会强行杀掉指定进程。 难道你不想抱怨点什么？没错太长了 改进５： 知道pgrep和pidof两个命令，干嘛还要打那么长一串！$ pgrep firefox | xargs kill -s 9 改进６：$ ps -ef | grep firefox | awk ‘{print $2}’ | xargs kill -9kill: No such process有一个比较郁闷的地方，进程已经正确找到并且终止了，但是执行完却提示找不到进程。 其中awk ‘{print $2}’ 的作用就是打印（print）出第二列的内容。根据常规篇，可以知道ps输出的第二列正好是PID。就把进程相应的PID通过xargs传递给kill作参数，杀掉对应的进程。 改进７：难道每次都要调用xargs把PID传递给kill？答案是否定的：$kill -s 9 ps -aux | grep firefox | awk &#39;{print $2}&#39; 改进８： 没错，命令依然有点长，换成pgrep。$kill -s 9 pgrep firefox 改进9——pkill： 看到pkill想到了什么？没错pgrep和kill！pkill＝pgrep+kill。 $pkill -９ firefox 说明：”-9” 即发送的信号是9，pkill与kill在这点的差别是：pkill无须 “ｓ”，终止信号等级直接跟在 “-“ 后面。之前我一直以为是 “-s 9”，结果每次运行都无法终止进程。 改进10——killall： killall和pkill是相似的,不过如果给出的进程名不完整，killall会报错。pkill或者pgrep只要给出进程名的一部分就可以终止进程。 $killall -9 firefox 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<blockquote>\n<p>编程的时候命令行总是少不了的下面说常用结束进程的几个命令</p>\n</blockquote>\n<p>首先，用ps查看进程，方法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps -ef</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>……<br>smx       1822     1  0 11:38 ?        00:00:49 gnome-terminal<br>smx       1823  1822  0 11:38 ?        00:00:00 gnome-pty-helper<br>smx       1824  1822  0 11:38 pts/0    00:00:02 bash<br>smx       1827     1  4 11:38 ?        00:26:28 /usr/lib/firefox-3.6.18/firefox-bin<br>smx       1857  1822  0 11:38 pts/1    00:00:00 bash<br>smx       1880  1619  0 11:38 ?        00:00:00 update-notifier<br>……<br>smx      11946  1824  0 21:41 pts/0    00:00:00 ps -ef<br>或者：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps -aux</span><br></pre></td></tr></table></figure></p>\n<p>……<br>smx       1822  0.1  0.8  58484 18152 ?        Sl   11:38   0:49 gnome-terminal<br>smx       1823  0.0  0.0   1988   712 ?        S    11:38   0:00 gnome-pty-helper<br>smx       1824  0.0  0.1   6820  3776 pts/0    Ss   11:38   0:02 bash<br>smx       1827  4.3  5.8 398196 119568 ?       Sl   11:38  26:13 /usr/lib/firefox-3.6.18/firefox-bin<br>smx       1857  0.0  0.1   6688  3644 pts/1    Ss   11:38   0:00 bash<br>smx       1880  0.0  0.6  41536 12620 ?        S    11:38   0:00 update-notifier<br>……<br>smx      11953  0.0  0.0   2716  1064 pts/0    R+   21:42   0:00 ps -aux</p>\n<p>此时如果我想杀了火狐的进程就在终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">kill</span> -s 9 1827</span><br></pre></td></tr></table></figure>\n<p>其中-s 9 制定了传递给进程的信号是９，即强制、尽快终止进程。各个终止信号及其作用见附录。</p>\n<p>1827则是上面ps查到的火狐的PID。</p>\n<p>简单吧，但有个问题，进程少了则无所谓，进程多了，就会觉得痛苦了，无论是ps -ef 还是ps -aux，每次都要在一大串进程信息里面查找到要杀的进程，看的眼都花了。</p>\n<h3 id=\"进阶篇：\"><a href=\"#进阶篇：\" class=\"headerlink\" title=\"进阶篇：\"></a>进阶篇：</h3><p><strong>改进１：</strong></p>\n<p>把ps的查询结果通过管道给grep查找包含特定字符串的进程。管道符“|”用来隔开两个命令，管道符左边命令的输出会作为管道符右边命令的输入。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps -ef | grep firefox</span><br></pre></td></tr></table></figure>\n<p>smx       1827     1  4 11:38 ?        00:27:33 /usr/lib/firefox-3.6.18/firefox-bin<br>smx      12029  1824  0 21:54 pts/0    00:00:00 grep –color=auto firefox</p>\n<p>这次就清爽了。然后就是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$kill</span> -s 9 1827</span><br></pre></td></tr></table></figure>\n<p>还是嫌打字多？</p>\n<p><strong>改进２——使用pgrep：</strong></p>\n<p>一看到pgrep首先会想到什么？没错，grep！pgrep的p表明了这个命令是专门用于进程查询的grep。</p>\n<p>$ pgrep firefox<br>1827</p>\n<p>看到了什么？没错火狐的PID，接下来又要打字了：</p>\n<p>$kill -s 9 1827</p>\n<p><strong>改进３——使用pidof：</strong></p>\n<p>看到pidof想到啥？没错pid of xx，字面翻译过来就是 xx的PID。</p>\n<p>$ pidof firefox-bin<br>1827<br>和pgrep相比稍显不足的是，pidof必须给出进程的全名。然后就是老生常谈：</p>\n<p>$kill -s 9 1827</p>\n<p>无论使用ps 然后慢慢查找进程PID 还是用grep查找包含相应字符串的进程，亦或者用pgrep直接查找包含相应字符串的进程ＰＩＤ，然后手动输入给ｋｉｌｌ杀掉，都稍显麻烦。有没有更方便的方法？有！</p>\n<p><strong>改进４：</strong></p>\n<p>$ps -ef | grep firefox | grep -v grep | cut -c 9-15 | xargs kill -s 9</p>\n<p>说明：</p>\n<p>“grep firefox”的输出结果是，所有含有关键字“firefox”的进程。</p>\n<p>“grep -v grep”是在列出的进程中去除含有关键字“grep”的进程。</p>\n<p>“cut -c 9-15”是截取输入行的第9个字符到第15个字符，而这正好是进程号PID。</p>\n<p>“xargs kill -s 9”中的xargs命令是用来把前面命令的输出结果（PID）作为“kill -s 9”命令的参数，并执行该命令。“kill -s 9”会强行杀掉指定进程。</p>\n<p>难道你不想抱怨点什么？没错太长了</p>\n<p><strong>改进５：</strong></p>\n<p>知道pgrep和pidof两个命令，干嘛还要打那么长一串！<br>$ pgrep firefox | xargs kill -s 9</p>\n<p><strong>改进６：</strong><br>$ ps -ef | grep firefox | awk ‘{print $2}’ | xargs kill -9<br>kill: No such process<br>有一个比较郁闷的地方，进程已经正确找到并且终止了，但是执行完却提示找不到进程。</p>\n<p>其中awk ‘{print $2}’ 的作用就是打印（print）出第二列的内容。根据常规篇，可以知道ps输出的第二列正好是PID。就把进程相应的PID通过xargs传递给kill作参数，杀掉对应的进程。</p>\n<p><strong>改进７：</strong><br>难道每次都要调用xargs把PID传递给kill？答案是否定的：<br>$kill -s 9 <code>ps -aux | grep firefox | awk &#39;{print $2}&#39;</code></p>\n<p><strong>改进８：</strong></p>\n<p>没错，命令依然有点长，换成pgrep。<br>$kill -s 9 <code>pgrep firefox</code></p>\n<p><strong>改进9——pkill：</strong></p>\n<p>看到pkill想到了什么？没错pgrep和kill！pkill＝pgrep+kill。</p>\n<p>$pkill -９ firefox</p>\n<p>说明：”-9” 即发送的信号是9，pkill与kill在这点的差别是：pkill无须 “ｓ”，终止信号等级直接跟在 “-“ 后面。之前我一直以为是 “-s 9”，结果每次运行都无法终止进程。</p>\n<p><strong>改进10——killall：</strong></p>\n<p>killall和pkill是相似的,不过如果给出的进程名不完整，killall会报错。pkill或者pgrep只要给出进程名的一部分就可以终止进程。</p>\n<p>$killall -9 firefox</p>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n\n","excerpt":"编程的时候命令行总是少不了的下面说常用结束进程的几个命令 首先，用ps查看进程，方法如下： 1$ ps -ef","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"http://www.ding1996.cn/tags/mac/"}]},{"title":"mysql常用命令","date":"2017-05-25T06:20:18.000Z","path":"2017/05/25/it-env-mysql/","text":"mysql如何使用 1 开机 mysql.server start 开机 2 登陆 mysql -uroot -p Mysql 基本命令:关闭 mysql.server stop开启 mysql.server start登录 mysql 服务器: mysql -uroot -p查看数据库: show databases;切换到 test 数据库: use test;查看表: show tables;查看表字段: desc user;查看表数据:select * from user;查看 user 表中所有字段中的所有数据 #id,username,passsword,age 数据库操作:1.创建数据库create database smallegg;2.删除数据库drop database smallegg;3.切换数据库use smallegg; 表操作:1.删除表drop table post;2.修改表名rename table user to user1;3.创建表mysql&gt; create table user(-&gt; id int,-&gt; username varchar(50) -&gt; ); 数据列类型:1.数值类型 int int(3)不够 3 位左侧补零2.字符串类型 char(3) varchar(3) text #最大3位3.日期时间类型 int 列属性:1.无符号 unsigned2.零填充 zerofill3.允许为 null null4.不允许为 null not null5.自动增加 auto_incrment6.默认值 default创建表的完整例子: mysql&gt; create table user10(-&gt; id int unsigned not null auto_increment, -&gt; username varchar(50) not null,-&gt; age int not null,-&gt; primary key(id)-&gt; );Query OK, 0 rows affected (0.08 sec)插入数据:insert into user10(username,age) values(‘user1’,20);删除数据:delete from user10 where id&gt;=2;查询数据:select * from user10;更改数据:update user10 set username=’user123’ where id=1; 字符集:1.服务器字符集-utf82.客户端字符集-utf8 mysql_query(‘set names utf8’);修改服务器字符集: my.ini[mysqld] character-set-server = utf8 字段索引:1.主键索引 一个表只能有一个主键索引 2.普通索引 每一列都可以设置普通索引删除表中的所有记录: delete from user10;清空表中所有数据:truncate user10; #它会把表中的自增列表清空，再添加数据从 1 开始查看 sql 性能:desc select from user10 where id=5\\G复制自己的数据:mysql&gt; insert into user10(username,age) select username,age from user 10;快速查询表的总行数:mysql&gt; select count() from user10;添加普通索引:alter table user10 add index index_username(username);删除普通索引:alter table user10 drop index index_username; 字段管理:1.添加字段alter table user add age int not null;2.删除字段alter table user drop age;3.修改字段alter table user modify age int null;alter table user change age age1 int not null; 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<p>mysql如何使用 </p>\n<p>1 开机 mysql.server start  开机 </p>\n<p>2 登陆 mysql -uroot -p</p>\n<a id=\"more\"></a>\n<h3 id=\"Mysql-基本命令\"><a href=\"#Mysql-基本命令\" class=\"headerlink\" title=\"Mysql 基本命令:\"></a>Mysql 基本命令:</h3><p>关闭 mysql.server stop<br>开启 mysql.server start<br>登录 mysql 服务器: mysql -uroot -p<br>查看数据库: show databases;<br>切换到 test 数据库: use test;<br>查看表: show tables;<br>查看表字段: desc user;<br>查看表数据:select * from user;<br>查看 user 表中所有字段中的所有数据 #id,username,passsword,age</p>\n<h3 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作:\"></a>数据库操作:</h3><p>1.创建数据库<br>create database smallegg;<br>2.删除数据库<br>drop database smallegg;<br>3.切换数据库<br>use smallegg;</p>\n<h3 id=\"表操作\"><a href=\"#表操作\" class=\"headerlink\" title=\"表操作:\"></a>表操作:</h3><p>1.删除表<br>drop table post;<br>2.修改表名<br>rename table user to user1;<br>3.创建表<br>mysql&gt; create table user(<br>-&gt; id int,<br>-&gt; username varchar(50) -&gt; );</p>\n<h3 id=\"数据列类型\"><a href=\"#数据列类型\" class=\"headerlink\" title=\"数据列类型:\"></a>数据列类型:</h3><p>1.数值类型 int int(3)不够 3 位左侧补零<br>2.字符串类型 char(3) varchar(3) text #最大3位<br>3.日期时间类型 int</p>\n<h3 id=\"列属性\"><a href=\"#列属性\" class=\"headerlink\" title=\"列属性:\"></a>列属性:</h3><p>1.无符号 unsigned<br>2.零填充 zerofill<br>3.允许为 null null<br>4.不允许为 null not null<br>5.自动增加 auto_incrment<br>6.默认值 default<br>创建表的完整例子: mysql&gt; create table user10(<br>-&gt; id int unsigned not null auto_increment, -&gt; username varchar(50) not null,<br>-&gt; age int not null,<br>-&gt; primary key(id)<br>-&gt; );<br>Query OK, 0 rows affected (0.08 sec)<br>插入数据:<br>insert into user10(username,age) values(‘user1’,20);<br>删除数据:<br>delete from user10 where id&gt;=2;<br>查询数据:<br>select * from user10;<br>更改数据:<br>update user10 set username=’user123’ where id=1;</p>\n<h3 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集:\"></a>字符集:</h3><p>1.服务器字符集-utf8<br>2.客户端字符集-utf8 mysql_query(‘set names utf8’);<br>修改服务器字符集: my.ini[mysqld] character-set-server = utf8</p>\n<h3 id=\"字段索引\"><a href=\"#字段索引\" class=\"headerlink\" title=\"字段索引:\"></a>字段索引:</h3><p>1.主键索引 一个表只能有一个主键索引 2.普通索引 每一列都可以设置普通索引<br>删除表中的所有记录: delete from user10;<br>清空表中所有数据:<br>truncate user10; #它会把表中的自增列表清空，再添加数据从 1 开始<br>查看 sql 性能:<br>desc select <em> from user10 where id=5\\G<br>复制自己的数据:<br>mysql&gt; insert into user10(username,age) select username,age from user 10;<br>快速查询表的总行数:<br>mysql&gt; select count(</em>) from user10;<br>添加普通索引:<br>alter table user10 add index index_username(username);<br>删除普通索引:<br>alter table user10 drop index index_username;</p>\n<h3 id=\"字段管理\"><a href=\"#字段管理\" class=\"headerlink\" title=\"字段管理:\"></a>字段管理:</h3><p>1.添加字段<br>alter table user add age int not null;<br>2.删除字段<br>alter table user drop age;<br>3.修改字段<br>alter table user modify age int null;<br>alter table user change age age1 int not null;</p>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n","excerpt":"mysql如何使用 1 开机 mysql.server start 开机 2 登陆 mysql -uroot -p","categories":[],"tags":[{"name":"环境","slug":"环境","permalink":"http://www.ding1996.cn/tags/环境/"},{"name":"后台","slug":"后台","permalink":"http://www.ding1996.cn/tags/后台/"}]},{"title":"Ngnix配置字段详解","date":"2017-05-24T06:17:14.000Z","path":"2017/05/24/it-env-nginx/","text":"最近在倒腾后台的东西 用的是nginx服务器下面是nginx配置的字段详解 欢迎查看 nginx -s reload ：修改配置后重新加载生效nginx -s reopen ：重新打开日志文件nginx -t -c /path/to/nginx.conf 测试nginx配置文件是否正确 关闭nginx：nginx -s stop :快速停止nginx quit ：完整有序的停止nginx 其他的停止nginx 方式： ps -ef | grep nginx kill -QUIT 主进程号 ：从容停止Nginxkill -TERM 主进程号 ：快速停止Nginxpkill -9 nginx ：强制停止Nginx 启动nginx:sudo nginx 平滑重启nginx：kill -HUP 主进程号 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125#运行用户user nobody;#启动进程,通常设置成和cpu的数量相等worker_processes 1; #全局错误日志及PID文件#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info; #pid logs/nginx.pid; #工作模式及连接数上限events &#123; #epoll是多路复用IO(I/O Multiplexing)中的一种方式, #仅用于linux2.6以上内核,可以大大提高nginx的性能 use epoll; #单个后台worker process进程的最大并发链接数 worker_connections 1024; # 并发总数是 worker_processes 和 worker_connections 的乘积 # 即 max_clients = worker_processes * worker_connections # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4 为什么 # 为什么上面反向代理要除以4，应该说是一个经验值 # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000 # worker_connections 值的设置跟物理内存大小有关 # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数 # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右 # 我们来看看360M内存的VPS可以打开的文件句柄数是多少： # $ cat /proc/sys/fs/file-max # 输出 34336 # 32000 &lt; 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内 # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置 # 使得并发总数小于操作系统可以打开的最大文件数目 # 其实质也就是根据主机的物理CPU和内存进行配置 # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。 # ulimit -SHn 65535 &#125; http &#123; #设定mime类型,类型由mime.type文件定义 include mime.types; default_type application/octet-stream; #设定日志格式 log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; access_log logs/access.log main; #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件， #对于普通应用，必须设为 on, #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off， #以平衡磁盘与网络I/O处理速度，降低系统的uptime. sendfile on; #tcp_nopush on; #连接超时时间 #keepalive_timeout 0; keepalive_timeout 65; tcp_nodelay on; #开启gzip压缩 gzip on; gzip_disable \"MSIE [1-6].\"; #设定请求缓冲 client_header_buffer_size 128k; large_client_header_buffers 4 128k; #设定虚拟主机配置 server &#123; #侦听80端口 listen 80; #定义使用 www.nginx.cn访问 server_name www.nginx.cn; #定义服务器的默认网站根目录位置 root html; #设定本虚拟主机的访问日志 access_log logs/nginx.access.log main; #默认请求 location / &#123; #定义首页索引文件的名称 index index.php index.html index.htm; &#125; # 定义错误提示页面 error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; #静态文件，nginx自己处理 location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123; #过期30天，静态文件不怎么更新，过期可以设大一点， #如果频繁更新，则可以设置得小一点。 expires 30d; &#125; #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置. location ~ .php$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; #禁止访问 .htxxx 文件 location ~ /.ht &#123; deny all; &#125; &#125;&#125;","content":"<p>最近在倒腾后台的东西 用的是nginx服务器<br>下面是nginx配置的字段详解 欢迎查看</p>\n<a id=\"more\"></a>\n<p>nginx -s reload  ：修改配置后重新加载生效<br>nginx -s reopen  ：重新打开日志文件<br>nginx -t -c /path/to/nginx.conf 测试nginx配置文件是否正确</p>\n<p>关闭nginx：<br>nginx -s stop  :快速停止nginx<br>         quit  ：完整有序的停止nginx</p>\n<p>其他的停止nginx 方式：</p>\n<p>ps -ef | grep nginx</p>\n<p>kill -QUIT 主进程号     ：从容停止Nginx<br>kill -TERM 主进程号     ：快速停止Nginx<br>pkill -9 nginx          ：强制停止Nginx</p>\n<p>启动nginx:<br>sudo nginx</p>\n<p>平滑重启nginx：<br>kill -HUP 主进程号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行用户</span></span><br><span class=\"line\">user nobody;</span><br><span class=\"line\"><span class=\"comment\">#启动进程,通常设置成和cpu的数量相等</span></span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#全局错误日志及PID文件</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  notice;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  info;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#pid        logs/nginx.pid;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#工作模式及连接数上限</span></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    <span class=\"comment\">#epoll是多路复用IO(I/O Multiplexing)中的一种方式,</span></span><br><span class=\"line\">    <span class=\"comment\">#仅用于linux2.6以上内核,可以大大提高nginx的性能</span></span><br><span class=\"line\">    use   epoll; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">#单个后台worker process进程的最大并发链接数    </span></span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># 并发总数是 worker_processes 和 worker_connections 的乘积</span></span><br><span class=\"line\">    <span class=\"comment\"># 即 max_clients = worker_processes * worker_connections</span></span><br><span class=\"line\">    <span class=\"comment\"># 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么</span></span><br><span class=\"line\">    <span class=\"comment\"># 为什么上面反向代理要除以4，应该说是一个经验值</span></span><br><span class=\"line\">    <span class=\"comment\"># 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000</span></span><br><span class=\"line\">    <span class=\"comment\"># worker_connections 值的设置跟物理内存大小有关</span></span><br><span class=\"line\">    <span class=\"comment\"># 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数</span></span><br><span class=\"line\">    <span class=\"comment\"># 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右</span></span><br><span class=\"line\">    <span class=\"comment\"># 我们来看看360M内存的VPS可以打开的文件句柄数是多少：</span></span><br><span class=\"line\">    <span class=\"comment\"># $ cat /proc/sys/fs/file-max</span></span><br><span class=\"line\">    <span class=\"comment\"># 输出 34336</span></span><br><span class=\"line\">    <span class=\"comment\"># 32000 &lt; 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内</span></span><br><span class=\"line\">    <span class=\"comment\"># 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置</span></span><br><span class=\"line\">    <span class=\"comment\"># 使得并发总数小于操作系统可以打开的最大文件数目</span></span><br><span class=\"line\">    <span class=\"comment\"># 其实质也就是根据主机的物理CPU和内存进行配置</span></span><br><span class=\"line\">    <span class=\"comment\"># 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。</span></span><br><span class=\"line\">    <span class=\"comment\"># ulimit -SHn 65535</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\">#设定mime类型,类型由mime.type文件定义</span></span><br><span class=\"line\">    include    mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    <span class=\"comment\">#设定日志格式</span></span><br><span class=\"line\">    log_format  main  <span class=\"string\">'$remote_addr - $remote_user [$time_local] \"$request\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'$status $body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'\"$http_user_agent\" \"$http_x_forwarded_for\"'</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    access_log  logs/access.log  main;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">#sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，</span></span><br><span class=\"line\">    <span class=\"comment\">#对于普通应用，必须设为 on,</span></span><br><span class=\"line\">    <span class=\"comment\">#如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，</span></span><br><span class=\"line\">    <span class=\"comment\">#以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span></span><br><span class=\"line\">    sendfile     on;</span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">#连接超时时间</span></span><br><span class=\"line\">    <span class=\"comment\">#keepalive_timeout  0;</span></span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    tcp_nodelay     on;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">#开启gzip压缩</span></span><br><span class=\"line\">    gzip  on;</span><br><span class=\"line\">    gzip_disable <span class=\"string\">\"MSIE [1-6].\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">#设定请求缓冲</span></span><br><span class=\"line\">    client_header_buffer_size    128k;</span><br><span class=\"line\">    large_client_header_buffers  4 128k;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">#设定虚拟主机配置</span></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        <span class=\"comment\">#侦听80端口</span></span><br><span class=\"line\">        listen    80;</span><br><span class=\"line\">        <span class=\"comment\">#定义使用 www.nginx.cn访问</span></span><br><span class=\"line\">        server_name  www.nginx.cn;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">#定义服务器的默认网站根目录位置</span></span><br><span class=\"line\">        root html;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">#设定本虚拟主机的访问日志</span></span><br><span class=\"line\">        access_log  logs/nginx.access.log  main;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">#默认请求</span></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">#定义首页索引文件的名称</span></span><br><span class=\"line\">            index index.php index.html index.htm;   </span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># 定义错误提示页面</span></span><br><span class=\"line\">        error_page   500 502 503 504 /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">#静态文件，nginx自己处理</span></span><br><span class=\"line\">        location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">#过期30天，静态文件不怎么更新，过期可以设大一点，</span></span><br><span class=\"line\">            <span class=\"comment\">#如果频繁更新，则可以设置得小一点。</span></span><br><span class=\"line\">            expires 30d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">#PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.</span></span><br><span class=\"line\">        location ~ .php$ &#123;</span><br><span class=\"line\">            fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">            fastcgi_index index.php;</span><br><span class=\"line\">            fastcgi_param  SCRIPT_FILENAME  <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">            include fastcgi_params;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">#禁止访问 .htxxx 文件</span></span><br><span class=\"line\">            location ~ /.ht &#123;</span><br><span class=\"line\">            deny all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"最近在倒腾后台的东西 用的是nginx服务器下面是nginx配置的字段详解 欢迎查看","categories":[],"tags":[{"name":"环境","slug":"环境","permalink":"http://www.ding1996.cn/tags/环境/"},{"name":"后台","slug":"后台","permalink":"http://www.ding1996.cn/tags/后台/"}]},{"title":"mac 常用命令","date":"2017-05-24T06:17:14.000Z","path":"2017/05/24/it-mac-mingling/","text":"熟练使用命令行能提升工作效率 我会把经常使用的命令放在这里收藏 12345source ~/.bash_profile # 这个命令式 让坏境变量生效cat ~/.bash_profile # 查看电脑环境变量echo $USER # 查看当前电脑账户ps aux|grep php-fpm # 查看php-fpm进程kill -g pid #杀死进程 ok~have fun!","content":"<p>熟练使用命令行能提升工作效率 </p>\n<p>我会把经常使用的命令放在这里收藏</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile  <span class=\"comment\"># 这个命令式 让坏境变量生效</span></span><br><span class=\"line\">cat ~/.bash_profile  <span class=\"comment\"># 查看电脑环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$USER</span> <span class=\"comment\"># 查看当前电脑账户</span></span><br><span class=\"line\">ps aux|grep php-fpm <span class=\"comment\"># 查看php-fpm进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -g pid <span class=\"comment\">#杀死进程</span></span><br></pre></td></tr></table></figure>\n<p>ok~have fun!</p>\n","excerpt":"","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"http://www.ding1996.cn/tags/mac/"}]},{"title":"全新安装 Mac OS Sierra (10.12) 并使用 HomeBrew 安装 ZSH + MNMP (Mac + Nginx + MySQL + PHP) 开发环境","date":"2017-05-24T06:17:14.000Z","path":"2017/05/24/it-php-env/","text":"原文地址 跳转原文 一时心血来潮想玩玩后台，之前用windos电脑直接下载个wamp集成环境安装特别方便 换了mac不知道怎么弄了 ~在网上找了篇博客跟着操作，出现了很多问题 花了半天才把环境安装好。需要环境 php mysql nginx 听说现在服务器都比较流行nginx setp 11bewr install mysql setp21b","content":"<p>原文地址 <a href=\"https://laravel-china.org/topics/3129/new-installation-mac-os-sierra-1012-and-use-homebrew-to-install-zsh-mnmp-mac-nginx-mysql-php-development-environment\" target=\"_blank\" rel=\"noopener\">跳转原文</a></p>\n<p>一时心血来潮想玩玩后台，之前用windos电脑直接下载个wamp集成环境安装特别方便 换了mac不知道怎么弄了 ~<br>在网上找了篇博客跟着操作，出现了很多问题 花了半天才把环境安装好。<br>需要环境 php mysql nginx 听说现在服务器都比较流行nginx </p>\n<h4 id=\"setp-1\"><a href=\"#setp-1\" class=\"headerlink\" title=\"setp 1\"></a>setp 1</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bewr install mysql</span><br></pre></td></tr></table></figure>\n<h4 id=\"setp2\"><a href=\"#setp2\" class=\"headerlink\" title=\"setp2\"></a>setp2</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n","excerpt":"原文地址 跳转原文 一时心血来潮想玩玩后台，之前用windos电脑直接下载个wamp集成环境安装特别方便 换了mac不知道怎么弄了 ~在网上找了篇博客跟着操作，出现了很多问题 花了半天才把环境安装好。需要环境 php mysql nginx 听说现在服务器都比较流行nginx setp 11bewr install mysql setp21b","categories":[],"tags":[{"name":"后台","slug":"后台","permalink":"http://www.ding1996.cn/tags/后台/"},{"name":"php","slug":"php","permalink":"http://www.ding1996.cn/tags/php/"}]},{"title":"axios全攻略","date":"2017-05-22T07:41:47.000Z","path":"2017/05/22/it-js-vue-axios/","text":"随着 vuejs 作者尤雨溪发布消息，不再继续维护vue-resource，并推荐大家使用 axios 开始，axios 被越来越多的人所了解。本来想在网上找找详细攻略，突然发现，axios 的官方文档本身就非常详细！！有这个还要什么自行车！！所以推荐大家学习这种库，最好详细阅读其官方文档。大概翻译了一下 axios 的官方文档，相信大家只要吃透本文再加以实践，axios 就是小意思啦！！ 如果您觉得本文对您有帮助，不妨点个赞或关注收藏一下，您的鼓励对我非常重要。 axios 简介axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征： 从浏览器中创建 XMLHttpRequest 从 node.js 发出 http 请求 支持 Promise API 拦截请求和响应 转换请求和响应数据 取消请求 自动转换JSON数据 客户端支持防止 CSRF/XSRF 浏览器兼容性 引入方式：12345$ npm install axios$ cnpm install axios //taobao源$ bower install axios或者使用cdn：&lt;script src=\"https://unpkg.com/axios/dist/axios.min.js\"&gt;&lt;/script&gt; 举个栗子：执行 GET 请求 123456789101112131415161718192021// 向具有指定ID的用户发出请求axios.get('/user?ID=12345').then(function (response) &#123;console.log(response);&#125;).catch(function (error) &#123;console.log(error);&#125;); // 也可以通过 params 对象传递参数axios.get('/user', &#123;params: &#123;ID: 12345&#125;&#125;).then(function (response) &#123;console.log(response);&#125;).catch(function (error) &#123;console.log(error);&#125;); 执行 POST 请求 12345678910axios.post('/user', &#123;firstName: 'Fred',lastName: 'Flintstone'&#125;).then(function (response) &#123;console.log(response);&#125;).catch(function (error) &#123;console.log(error);&#125;); 执行多个并发请求 123456789101112function getUserAccount() &#123;return axios.get('/user/12345');&#125; function getUserPermissions() &#123;return axios.get('/user/12345/permissions');&#125; axios.all([getUserAccount(), getUserPermissions()]).then(axios.spread(function (acct, perms) &#123;//两个请求现已完成&#125;)); axios API可以通过将相关配置传递给 axios 来进行请求。axios(config) 123456789// 发送一个 POST 请求axios(&#123;method: 'post',url: '/user/12345',data: &#123;firstName: 'Fred',lastName: 'Flintstone'&#125;&#125;); axios(url[, config]) 12// 发送一个 GET 请求 (GET请求是默认请求模式)axios('/user/12345'); 请求方法别名 为了方便起见，已经为所有支持的请求方法提供了别名。 axios.request（config） axios.get（url [，config]） axios.delete（url [，config]） axios.head（url [，config]） axios.post（url [，data [，config]]） axios.put（url [，data [，config]]） axios.patch（url [，data [，config]]） 注意当使用别名方法时，不需要在config中指定url，method和data属性。并发帮助函数处理并发请求。 axios.all（iterable） axios.spread（callback） 创建实例 您可以使用自定义配置创建axios的新实例。 axios.create（[config]） 12345var instance = axios.create(&#123;baseURL: 'https://some-domain.com/api/',timeout: 1000,headers: &#123;'X-Custom-Header': 'foobar'&#125;&#125;); 实例方法 可用的实例方法如下所示。 指定的配置将与实例配置合并。 axios＃request（config）axios＃get（url [，config]）axios＃delete（url [，config]）axios＃head（url [，config]）axios＃post（url [，data [，config]]）axios＃put（url [，data [，config]]）axios＃patch（url [，data [，config]]） 请求配置这些是用于发出请求的可用配置选项。 只有url是必需的。 如果未指定方法，请求将默认为GET。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131&#123;// `url`是将用于请求的服务器URLurl: '/user', // `method`是发出请求时使用的请求方法method: 'get', // 默认 // `baseURL`将被添加到`url`前面，除非`url`是绝对的。// 可以方便地为 axios 的实例设置`baseURL`，以便将相对 URL 传递给该实例的方法。baseURL: 'https://some-domain.com/api/', // `transformRequest`允许在请求数据发送到服务器之前对其进行更改// 这只适用于请求方法'PUT'，'POST'和'PATCH'// 数组中的最后一个函数必须返回一个字符串，一个 ArrayBuffer或一个 Stream transformRequest: [function (data) &#123;// 做任何你想要的数据转换 return data;&#125;], // `transformResponse`允许在 then / catch之前对响应数据进行更改transformResponse: [function (data) &#123;// Do whatever you want to transform the data return data;&#125;], // `headers`是要发送的自定义 headersheaders: &#123;'X-Requested-With': 'XMLHttpRequest'&#125;, // `params`是要与请求一起发送的URL参数// 必须是纯对象或URLSearchParams对象params: &#123;ID: 12345&#125;, // `paramsSerializer`是一个可选的函数，负责序列化`params`// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)paramsSerializer: function(params) &#123;return Qs.stringify(params, &#123;arrayFormat: 'brackets'&#125;)&#125;, // `data`是要作为请求主体发送的数据// 仅适用于请求方法“PUT”，“POST”和“PATCH”// 当没有设置`transformRequest`时，必须是以下类型之一：// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams// - Browser only: FormData, File, Blob// - Node only: Streamdata: &#123;firstName: 'Fred'&#125;, // `timeout`指定请求超时之前的毫秒数。// 如果请求的时间超过'timeout'，请求将被中止。timeout: 1000, // `withCredentials`指示是否跨站点访问控制请求// should be made using credentialswithCredentials: false, // default // `adapter'允许自定义处理请求，这使得测试更容易。// 返回一个promise并提供一个有效的响应（参见[response docs]（＃response-api））adapter: function (config) &#123;/* ... */&#125;, // `auth'表示应该使用 HTTP 基本认证，并提供凭据。// 这将设置一个`Authorization'头，覆盖任何现有的`Authorization'自定义头，使用`headers`设置。auth: &#123;username: 'janedoe',password: 's00pers3cret'&#125;, // “responseType”表示服务器将响应的数据类型// 包括 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'responseType: 'json', // default //`xsrfCookieName`是要用作 xsrf 令牌的值的cookie的名称xsrfCookieName: 'XSRF-TOKEN', // default // `xsrfHeaderName`是携带xsrf令牌值的http头的名称xsrfHeaderName: 'X-XSRF-TOKEN', // default // `onUploadProgress`允许处理上传的进度事件onUploadProgress: function (progressEvent) &#123;// 使用本地 progress 事件做任何你想要做的&#125;, // `onDownloadProgress`允许处理下载的进度事件onDownloadProgress: function (progressEvent) &#123;// Do whatever you want with the native progress event&#125;, // `maxContentLength`定义允许的http响应内容的最大大小maxContentLength: 2000, // `validateStatus`定义是否解析或拒绝给定的promise// HTTP响应状态码。如果`validateStatus`返回`true`（或被设置为`null` promise将被解析;否则，promise将被 // 拒绝。validateStatus: function (status) &#123;return status &gt;= 200 &amp;&amp; status &lt; 300; // default&#125;, // `maxRedirects`定义在node.js中要遵循的重定向的最大数量。// 如果设置为0，则不会遵循重定向。maxRedirects: 5, // 默认 // `httpAgent`和`httpsAgent`用于定义在node.js中分别执行http和https请求时使用的自定义代理。// 允许配置类似`keepAlive`的选项，// 默认情况下不启用。httpAgent: new http.Agent(&#123; keepAlive: true &#125;),httpsAgent: new https.Agent(&#123; keepAlive: true &#125;), // 'proxy'定义代理服务器的主机名和端口// `auth`表示HTTP Basic auth应该用于连接到代理，并提供credentials。// 这将设置一个`Proxy-Authorization` header，覆盖任何使用`headers`设置的现有的`Proxy-Authorization` 自定义 headers。proxy: &#123;host: '127.0.0.1',port: 9000,auth: : &#123;username: 'mikeymike',password: 'rapunz3l'&#125;&#125;, // “cancelToken”指定可用于取消请求的取消令牌// (see Cancellation section below for details)cancelToken: new CancelToken(function (cancel) &#123;&#125;)&#125; 使用 then 时，您将收到如下响应： 12345678axios.get('/user/12345').then(function(response) &#123;console.log(response.data);console.log(response.status);console.log(response.statusText);console.log(response.headers);console.log(response.config);&#125;); 配置默认值您可以指定将应用于每个请求的配置默认值。 全局axios默认值 123axios.defaults.baseURL = 'https://api.example.com';axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'; 自定义实例默认值 1234567//在创建实例时设置配置默认值var instance = axios.create（&#123; baseURL：'https://api.example.com'&#125;）; //在实例创建后改变默认值instance.defaults.headers.common ['Authorization'] = AUTH_TOKEN; 配置优先级顺序 配置将与优先顺序合并。 顺序是lib / defaults.js中的库默认值，然后是实例的defaults属性，最后是请求的config参数。 后者将优先于前者。 这里有一个例子。 123456789101112//使用库提供的配置默认值创建实例//此时，超时配置值为`0`，这是库的默认值var instance = axios.create（）; //覆盖库的超时默认值//现在所有请求将在超时前等待2.5秒instance.defaults.timeout = 2500; //覆盖此请求的超时，因为它知道需要很长时间instance.get（'/ longRequest'，&#123; timeout：5000&#125;）; 拦截器你可以截取请求或响应在被 then 或者 catch 处理之前 1234567891011121314151617//添加请求拦截器axios.interceptors.request.use（function（config）&#123; //在发送请求之前做某事 return config; &#125;，function（error）&#123; //请求错误时做些事 return Promise.reject（error）; &#125;）; //添加响应拦截器axios.interceptors.response.use（function（response）&#123; //对响应数据做些事 return response; &#125;，function（error）&#123; //请求错误时做些事 return Promise.reject（error）; &#125;）; 如果你以后可能需要删除拦截器。 12var myInterceptor = axios.interceptors.request.use(function () &#123;/*...*/&#125;);axios.interceptors.request.eject(myInterceptor); 你可以将拦截器添加到axios的自定义实例。 12var instance = axios.create();instance.interceptors.request.use(function () &#123;/*...*/&#125;); 处理错误1234567891011121314axios.get（'/ user / 12345'） .catch（function（error）&#123; if（error.response）&#123; //请求已发出，但服务器使用状态代码进行响应 //落在2xx的范围之外 console.log（error.response.data）; console.log（error.response.status）; console.log（error.response.headers）; &#125; else &#123; //在设置触发错误的请求时发生了错误 console.log（'Error'，error.message）; &#125;&#125; console.log（error.config）; &#125;）; 您可以使用validateStatus配置选项定义自定义HTTP状态码错误范围。 12345axios.get（'/ user / 12345'，&#123; validateStatus：function（status）&#123; return status &lt; 500; //仅当状态代码大于或等于500时拒绝 &#125;&#125;&#125; 消除您可以使用取消令牌取消请求。 axios cancel token API基于可取消的promise提议，目前处于阶段1。 您可以使用CancelToken.source工厂创建一个取消令牌，如下所示： 123456789101112131415var CancelToken = axios.CancelToken;var source = CancelToken.source（）; axios.get('/user/12345', &#123;cancelToken: source.token&#125;).catch(function(thrown) &#123;if (axios.isCancel(thrown)) &#123;console.log('Request canceled', thrown.message);&#125; else &#123;// 处理错误&#125;&#125;); //取消请求（消息参数是可选的）source.cancel（'操作被用户取消。'）; 您还可以通过将执行器函数传递给CancelToken构造函数来创建取消令牌： 123456789101112var CancelToken = axios.CancelToken;var cancel; axios.get（'/ user / 12345'，&#123; cancelToken：new CancelToken（function executor（c）&#123; //一个执行器函数接收一个取消函数作为参数 cancel = c; &#125;）&#125;）; // 取消请求clear(); 注意：您可以使用相同的取消令牌取消几个请求。 使用application / x-www-form-urlencoded格式默认情况下，axios将JavaScript对象序列化为JSON。 要以应用程序/ x-www-form-urlencoded格式发送数据，您可以使用以下选项之一。 浏览器 在浏览器中，您可以使用URLSearchParams API，如下所示： 1234var params = new URLSearchParams();params.append('param1', 'value1');params.append('param2', 'value2');axios.post('/foo', params); 请注意，所有浏览器都不支持URLSearchParams，但是有一个polyfill可用（确保polyfill全局环境）。 或者，您可以使用qs库对数据进行编码： 12var qs = require('qs');axios.post('/foo', qs.stringify(&#123; 'bar': 123 &#125;); Node.js在node.js中，可以使用querystring模块，如下所示： 12var querystring = require('querystring');axios.post('http://something.com/', querystring.stringify(&#123; foo: 'bar' &#125;); 你也可以使用qs库。 Promiseaxios 依赖本机要支持ES6 Promise实现。 如果您的环境不支持ES6 Promises，您可以使用polyfill。 TypeScriptaxios包括TypeScript定义。 12import axios from 'axios';axios.get('/user?ID=12345'); axios在很大程度上受到Angular提供的$http服务的启发。 最终，axios努力提供一个在Angular外使用的独立的$http-like服务。 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<p>随着 vuejs 作者尤雨溪发布消息，不再继续维护vue-resource，并推荐大家使用 axios 开始，axios 被越来越多的人所了解。本来想在网上找找详细攻略，突然发现，axios 的官方文档本身就非常详细！！有这个还要什么自行车！！所以推荐大家学习这种库，最好详细阅读其官方文档。大概翻译了一下 axios 的官方文档，相信大家只要吃透本文再加以实践，axios 就是小意思啦！！</p>\n<p>如果您觉得本文对您有帮助，不妨点个赞或关注收藏一下，您的鼓励对我非常重要。</p>\n<a id=\"more\"></a>\n<h3 id=\"axios-简介\"><a href=\"#axios-简介\" class=\"headerlink\" title=\"axios 简介\"></a>axios 简介</h3><p>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：</p>\n<ul>\n<li>从浏览器中创建 XMLHttpRequest</li>\n<li>从 node.js 发出 http 请求</li>\n<li>支持 Promise API</li>\n<li>拦截请求和响应</li>\n<li>转换请求和响应数据</li>\n<li>取消请求</li>\n<li>自动转换JSON数据</li>\n<li>客户端支持防止 CSRF/XSRF</li>\n</ul>\n<h3 id=\"浏览器兼容性\"><a href=\"#浏览器兼容性\" class=\"headerlink\" title=\"浏览器兼容性\"></a>浏览器兼容性</h3><p><img src=\"http://p1.bpimg.com/567571/991b798df8c9a528.png?_=6445356\" alt=\"\"></p>\n<h3 id=\"引入方式：\"><a href=\"#引入方式：\" class=\"headerlink\" title=\"引入方式：\"></a>引入方式：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install axios</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cnpm install axios //taobao源</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> bower install axios</span></span><br><span class=\"line\">或者使用cdn：</span><br><span class=\"line\">&lt;script src=\"https://unpkg.com/axios/dist/axios.min.js\"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"举个栗子：\"><a href=\"#举个栗子：\" class=\"headerlink\" title=\"举个栗子：\"></a>举个栗子：</h3><p><strong>执行 GET 请求</strong></p>\n<figure class=\"highlight scilab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向具有指定ID的用户发出请求</span></span><br><span class=\"line\">axios.get(<span class=\"string\">'/user?ID=12345'</span>)</span><br><span class=\"line\">.<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(response)</span> &#123;</span></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(response);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"keyword\">catch</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(error)</span> &#123;</span></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"built_in\">error</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 也可以通过 params 对象传递参数</span></span><br><span class=\"line\">axios.get(<span class=\"string\">'/user'</span>, &#123;</span><br><span class=\"line\">params: &#123;</span><br><span class=\"line\">ID: <span class=\"number\">12345</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(response)</span> &#123;</span></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(response);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"keyword\">catch</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(error)</span> &#123;</span></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"built_in\">error</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>执行 POST 请求</strong></p>\n<figure class=\"highlight scilab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.post(<span class=\"string\">'/user'</span>, &#123;</span><br><span class=\"line\">firstName: <span class=\"string\">'Fred'</span>,</span><br><span class=\"line\">lastName: <span class=\"string\">'Flintstone'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(response)</span> &#123;</span></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(response);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"keyword\">catch</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(error)</span> &#123;</span></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"built_in\">error</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>执行多个并发请求</strong></p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title\">getUserAccount</span>() &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"type\">axios.get('/user/12345')</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title\">getUserPermissions</span>() &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"type\">axios.get('/user/12345/permissions')</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">axios.<span class=\"keyword\">all</span>([getUserAccount(), getUserPermissions()])</span><br><span class=\"line\">.<span class=\"keyword\">then</span>(axios.spread(<span class=\"keyword\">function</span> <span class=\"title\"></span>(acct, perms) &#123;</span><br><span class=\"line\">//两个请求现已完成</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<h3 id=\"axios-API\"><a href=\"#axios-API\" class=\"headerlink\" title=\"axios API\"></a>axios API</h3><p>可以通过将相关配置传递给 axios 来进行请求。<br><strong>axios(config)</strong></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送一个 POST 请求</span></span><br><span class=\"line\"><span class=\"selector-tag\">axios</span>(&#123;</span><br><span class=\"line\"><span class=\"attribute\">method</span>: <span class=\"string\">'post'</span>,</span><br><span class=\"line\"><span class=\"attribute\">url</span>: <span class=\"string\">'/user/12345'</span>,</span><br><span class=\"line\"><span class=\"attribute\">data</span>: &#123;</span><br><span class=\"line\"><span class=\"attribute\">firstName</span>: <span class=\"string\">'Fred'</span>,</span><br><span class=\"line\"><span class=\"attribute\">lastName</span>: <span class=\"string\">'Flintstone'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>axios(url[, config])</strong></p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送一个 GET 请求 (GET请求是默认请求模式)</span></span><br><span class=\"line\">axios('/user/<span class=\"number\">1234</span>5');</span><br></pre></td></tr></table></figure>\n<p><strong>请求方法别名</strong></p>\n<p>为了方便起见，已经为所有支持的请求方法提供了别名。</p>\n<ul>\n<li>axios.request（config）</li>\n<li>axios.get（url [，config]）</li>\n<li>axios.delete（url [，config]）</li>\n<li>axios.head（url [，config]）</li>\n<li>axios.post（url [，data [，config]]）</li>\n<li>axios.put（url [，data [，config]]）</li>\n<li>axios.patch（url [，data [，config]]）</li>\n</ul>\n<p><strong>注意</strong><br>当使用别名方法时，不需要在config中指定url，method和data属性。<br><strong>并发</strong><br>帮助函数处理并发请求。</p>\n<ul>\n<li>axios.all（iterable）</li>\n<li>axios.spread（callback）</li>\n</ul>\n<p><strong>创建实例</strong></p>\n<p>您可以使用自定义配置创建axios的新实例。</p>\n<p>axios.create（[config]）</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var<span class=\"built_in\"> instance </span>= axios.create(&#123;</span><br><span class=\"line\">baseURL: 'https://some-domain.com/api/',</span><br><span class=\"line\">timeout: 1000,</span><br><span class=\"line\">headers: &#123;'X-Custom-Header': 'foobar'&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>实例方法</strong></p>\n<p>可用的实例方法如下所示。 指定的配置将与实例配置合并。</p>\n<p>axios＃request（config）<br>axios＃get（url [，config]）<br>axios＃delete（url [，config]）<br>axios＃head（url [，config]）<br>axios＃post（url [，data [，config]]）<br>axios＃put（url [，data [，config]]）<br>axios＃patch（url [，data [，config]]）</p>\n<h3 id=\"请求配置\"><a href=\"#请求配置\" class=\"headerlink\" title=\"请求配置\"></a>请求配置</h3><p>这些是用于发出请求的可用配置选项。 只有url是必需的。 如果未指定方法，请求将默认为GET。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">// `url`是将用于请求的服务器URL</span></span><br><span class=\"line\"><span class=\"string\">url:</span> <span class=\"string\">'/user'</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// `method`是发出请求时使用的请求方法</span></span><br><span class=\"line\"><span class=\"string\">method:</span> <span class=\"string\">'get'</span>, <span class=\"comment\">// 默认</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// `baseURL`将被添加到`url`前面，除非`url`是绝对的。</span></span><br><span class=\"line\"><span class=\"comment\">// 可以方便地为 axios 的实例设置`baseURL`，以便将相对 URL 传递给该实例的方法。</span></span><br><span class=\"line\"><span class=\"string\">baseURL:</span> <span class=\"string\">'https://some-domain.com/api/'</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// `transformRequest`允许在请求数据发送到服务器之前对其进行更改</span></span><br><span class=\"line\"><span class=\"comment\">// 这只适用于请求方法'PUT'，'POST'和'PATCH'</span></span><br><span class=\"line\"><span class=\"comment\">// 数组中的最后一个函数必须返回一个字符串，一个 ArrayBuffer或一个 Stream</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"string\">transformRequest:</span> [function (data) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 做任何你想要的数据转换</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">return</span> data;</span><br><span class=\"line\">&#125;],</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// `transformResponse`允许在 then / catch之前对响应数据进行更改</span></span><br><span class=\"line\"><span class=\"string\">transformResponse:</span> [function (data) &#123;</span><br><span class=\"line\"><span class=\"comment\">// Do whatever you want to transform the data</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">return</span> data;</span><br><span class=\"line\">&#125;],</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// `headers`是要发送的自定义 headers</span></span><br><span class=\"line\"><span class=\"string\">headers:</span> &#123;<span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span>&#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// `params`是要与请求一起发送的URL参数</span></span><br><span class=\"line\"><span class=\"comment\">// 必须是纯对象或URLSearchParams对象</span></span><br><span class=\"line\"><span class=\"string\">params:</span> &#123;</span><br><span class=\"line\"><span class=\"string\">ID:</span> <span class=\"number\">12345</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// `paramsSerializer`是一个可选的函数，负责序列化`params`</span></span><br><span class=\"line\"><span class=\"comment\">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class=\"line\"><span class=\"string\">paramsSerializer:</span> function(params) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> Qs.stringify(params, &#123;<span class=\"string\">arrayFormat:</span> <span class=\"string\">'brackets'</span>&#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// `data`是要作为请求主体发送的数据</span></span><br><span class=\"line\"><span class=\"comment\">// 仅适用于请求方法“PUT”，“POST”和“PATCH”</span></span><br><span class=\"line\"><span class=\"comment\">// 当没有设置`transformRequest`时，必须是以下类型之一：</span></span><br><span class=\"line\"><span class=\"comment\">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class=\"line\"><span class=\"comment\">// - Browser only: FormData, File, Blob</span></span><br><span class=\"line\"><span class=\"comment\">// - Node only: Stream</span></span><br><span class=\"line\"><span class=\"string\">data:</span> &#123;</span><br><span class=\"line\"><span class=\"string\">firstName:</span> <span class=\"string\">'Fred'</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// `timeout`指定请求超时之前的毫秒数。</span></span><br><span class=\"line\"><span class=\"comment\">// 如果请求的时间超过'timeout'，请求将被中止。</span></span><br><span class=\"line\"><span class=\"string\">timeout:</span> <span class=\"number\">1000</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// `withCredentials`指示是否跨站点访问控制请求</span></span><br><span class=\"line\"><span class=\"comment\">// should be made using credentials</span></span><br><span class=\"line\"><span class=\"string\">withCredentials:</span> <span class=\"literal\">false</span>, <span class=\"comment\">// default</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// `adapter'允许自定义处理请求，这使得测试更容易。</span></span><br><span class=\"line\"><span class=\"comment\">// 返回一个promise并提供一个有效的响应（参见[response docs]（＃response-api））</span></span><br><span class=\"line\"><span class=\"string\">adapter:</span> function (config) &#123;</span><br><span class=\"line\"><span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// `auth'表示应该使用 HTTP 基本认证，并提供凭据。</span></span><br><span class=\"line\"><span class=\"comment\">// 这将设置一个`Authorization'头，覆盖任何现有的`Authorization'自定义头，使用`headers`设置。</span></span><br><span class=\"line\"><span class=\"string\">auth:</span> &#123;</span><br><span class=\"line\"><span class=\"string\">username:</span> <span class=\"string\">'janedoe'</span>,</span><br><span class=\"line\"><span class=\"string\">password:</span> <span class=\"string\">'s00pers3cret'</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// “responseType”表示服务器将响应的数据类型</span></span><br><span class=\"line\"><span class=\"comment\">// 包括 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span></span><br><span class=\"line\"><span class=\"string\">responseType:</span> <span class=\"string\">'json'</span>, <span class=\"comment\">// default</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//`xsrfCookieName`是要用作 xsrf 令牌的值的cookie的名称</span></span><br><span class=\"line\"><span class=\"string\">xsrfCookieName:</span> <span class=\"string\">'XSRF-TOKEN'</span>, <span class=\"comment\">// default</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// `xsrfHeaderName`是携带xsrf令牌值的http头的名称</span></span><br><span class=\"line\"><span class=\"string\">xsrfHeaderName:</span> <span class=\"string\">'X-XSRF-TOKEN'</span>, <span class=\"comment\">// default</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// `onUploadProgress`允许处理上传的进度事件</span></span><br><span class=\"line\"><span class=\"string\">onUploadProgress:</span> function (progressEvent) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 使用本地 progress 事件做任何你想要做的</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// `onDownloadProgress`允许处理下载的进度事件</span></span><br><span class=\"line\"><span class=\"string\">onDownloadProgress:</span> function (progressEvent) &#123;</span><br><span class=\"line\"><span class=\"comment\">// Do whatever you want with the native progress event</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// `maxContentLength`定义允许的http响应内容的最大大小</span></span><br><span class=\"line\"><span class=\"string\">maxContentLength:</span> <span class=\"number\">2000</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// `validateStatus`定义是否解析或拒绝给定的promise</span></span><br><span class=\"line\"><span class=\"comment\">// HTTP响应状态码。如果`validateStatus`返回`true`（或被设置为`null` promise将被解析;否则，promise将被</span></span><br><span class=\"line\">  <span class=\"comment\">// 拒绝。</span></span><br><span class=\"line\"><span class=\"string\">validateStatus:</span> function (status) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> status &gt;= <span class=\"number\">200</span> &amp;&amp; status &lt; <span class=\"number\">300</span>; <span class=\"comment\">// default</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// `maxRedirects`定义在node.js中要遵循的重定向的最大数量。</span></span><br><span class=\"line\"><span class=\"comment\">// 如果设置为0，则不会遵循重定向。</span></span><br><span class=\"line\"><span class=\"string\">maxRedirects:</span> <span class=\"number\">5</span>, <span class=\"comment\">// 默认</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// `httpAgent`和`httpsAgent`用于定义在node.js中分别执行http和https请求时使用的自定义代理。</span></span><br><span class=\"line\"><span class=\"comment\">// 允许配置类似`keepAlive`的选项，</span></span><br><span class=\"line\"><span class=\"comment\">// 默认情况下不启用。</span></span><br><span class=\"line\"><span class=\"string\">httpAgent:</span> <span class=\"keyword\">new</span> http.Agent(&#123; <span class=\"string\">keepAlive:</span> <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\"><span class=\"string\">httpsAgent:</span> <span class=\"keyword\">new</span> https.Agent(&#123; <span class=\"string\">keepAlive:</span> <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 'proxy'定义代理服务器的主机名和端口</span></span><br><span class=\"line\"><span class=\"comment\">// `auth`表示HTTP Basic auth应该用于连接到代理，并提供credentials。</span></span><br><span class=\"line\"><span class=\"comment\">// 这将设置一个`Proxy-Authorization` header，覆盖任何使用`headers`设置的现有的`Proxy-Authorization` 自定义 headers。</span></span><br><span class=\"line\"><span class=\"string\">proxy:</span> &#123;</span><br><span class=\"line\"><span class=\"string\">host:</span> <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\"><span class=\"string\">port:</span> <span class=\"number\">9000</span>,</span><br><span class=\"line\"><span class=\"string\">auth:</span> : &#123;</span><br><span class=\"line\"><span class=\"string\">username:</span> <span class=\"string\">'mikeymike'</span>,</span><br><span class=\"line\"><span class=\"string\">password:</span> <span class=\"string\">'rapunz3l'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// “cancelToken”指定可用于取消请求的取消令牌</span></span><br><span class=\"line\"><span class=\"comment\">// (see Cancellation section below for details)</span></span><br><span class=\"line\"><span class=\"string\">cancelToken:</span> <span class=\"keyword\">new</span> CancelToken(function (cancel) &#123;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 then 时，您将收到如下响应：</p>\n<figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"keyword\">get</span>(<span class=\"comment\">'/user/12345')</span></span><br><span class=\"line\">.<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(<span class=\"built_in\">response</span>) &#123;</span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"built_in\">response</span>.data);</span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"built_in\">response</span>.status);</span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"built_in\">response</span>.statusText);</span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"built_in\">response</span>.headers);</span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"built_in\">response</span>.config);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置默认值\"><a href=\"#配置默认值\" class=\"headerlink\" title=\"配置默认值\"></a>配置默认值</h3><p>您可以指定将应用于每个请求的配置默认值。</p>\n<p><strong>全局axios默认值</strong></p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.defaults.baseURL = <span class=\"string\">'https://api.example.com'</span>;</span><br><span class=\"line\">axios.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = <span class=\"symbol\">AUTH_TOKEN</span>;</span><br><span class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded'</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>自定义实例默认值</strong></p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在创建实例时设置配置默认值</span><br><span class=\"line\">var<span class=\"built_in\"> instance </span>= axios.create（&#123;</span><br><span class=\"line\">   baseURL：'https://api.example.com'</span><br><span class=\"line\">&#125;）;</span><br><span class=\"line\"> </span><br><span class=\"line\">//在实例创建后改变默认值</span><br><span class=\"line\">instance.defaults.headers.common ['Authorization'] = AUTH_TOKEN;</span><br></pre></td></tr></table></figure>\n<p><strong>配置优先级顺序</strong></p>\n<p>配置将与优先顺序合并。 顺序是lib / defaults.js中的库默认值，然后是实例的defaults属性，最后是请求的config参数。 后者将优先于前者。 这里有一个例子。</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用库提供的配置默认值创建实例</span><br><span class=\"line\">//此时，超时配置值为`0`，这是库的默认值</span><br><span class=\"line\">var<span class=\"built_in\"> instance </span>= axios.create（）;</span><br><span class=\"line\"> </span><br><span class=\"line\">//覆盖库的超时默认值</span><br><span class=\"line\">//现在所有请求将在超时前等待2.5秒</span><br><span class=\"line\">instance.defaults.timeout = 2500;</span><br><span class=\"line\"> </span><br><span class=\"line\">//覆盖此请求的超时，因为它知道需要很长时间</span><br><span class=\"line\">instance.get（'/ longRequest'，&#123;</span><br><span class=\"line\">   timeout：5000</span><br><span class=\"line\">&#125;）;</span><br></pre></td></tr></table></figure>\n<h3 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h3><p>你可以截取请求或响应在被 then 或者 catch 处理之前</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//添加请求拦截器</span></span><br><span class=\"line\">axios.interceptors.request.use（<span class=\"function\"><span class=\"keyword\">function</span>（<span class=\"title\">config</span>）</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//在发送请求之前做某事</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">   &#125;，<span class=\"function\"><span class=\"keyword\">function</span>（<span class=\"title\">error</span>）</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//请求错误时做些事</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject（error）;</span><br><span class=\"line\">   &#125;）;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//添加响应拦截器</span></span><br><span class=\"line\">axios.interceptors.response.use（<span class=\"function\"><span class=\"keyword\">function</span>（<span class=\"title\">response</span>）</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//对响应数据做些事</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">   &#125;，<span class=\"function\"><span class=\"keyword\">function</span>（<span class=\"title\">error</span>）</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//请求错误时做些事</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject（error）;</span><br><span class=\"line\">   &#125;）;</span><br></pre></td></tr></table></figure>\n<p>如果你以后可能需要删除拦截器。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myInterceptor = axios.interceptors.request.<span class=\"keyword\">use</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;<span class=\"comment\">/*...*/</span>&#125;);</span><br><span class=\"line\">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure>\n<p>你可以将拦截器添加到axios的自定义实例。</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var<span class=\"built_in\"> instance </span>= axios.create();</span><br><span class=\"line\">instance.interceptors.request.use(function () &#123;/*...*/&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"处理错误\"><a href=\"#处理错误\" class=\"headerlink\" title=\"处理错误\"></a>处理错误</h3><figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get（<span class=\"string\">'/ user / 12345'</span>）</span><br><span class=\"line\">   .<span class=\"keyword\">catch</span>（function（<span class=\"keyword\">error</span>）&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>（<span class=\"keyword\">error</span>.response）&#123;</span><br><span class=\"line\">       <span class=\"comment\">//请求已发出，但服务器使用状态代码进行响应</span></span><br><span class=\"line\">       <span class=\"comment\">//落在2xx的范围之外</span></span><br><span class=\"line\">       console.<span class=\"keyword\">log</span>（<span class=\"keyword\">error</span>.response.data）;</span><br><span class=\"line\">       console.<span class=\"keyword\">log</span>（<span class=\"keyword\">error</span>.response.status）;</span><br><span class=\"line\">       console.<span class=\"keyword\">log</span>（<span class=\"keyword\">error</span>.response.headers）;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//在设置触发错误的请求时发生了错误</span></span><br><span class=\"line\">       console.<span class=\"keyword\">log</span>（<span class=\"string\">'Error'</span>，<span class=\"keyword\">error</span>.message）;</span><br><span class=\"line\">     &#125;&#125;</span><br><span class=\"line\">     console.<span class=\"keyword\">log</span>（<span class=\"keyword\">error</span>.config）;</span><br><span class=\"line\">   &#125;）;</span><br></pre></td></tr></table></figure>\n<p>您可以使用validateStatus配置选项定义自定义HTTP状态码错误范围。</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get（<span class=\"string\">'/ user / 12345'</span>，&#123;</span><br><span class=\"line\">   validateStatus：<span class=\"function\"><span class=\"keyword\">function</span></span>（<span class=\"keyword\">status</span>）&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">status</span> &lt; <span class=\"number\">500</span>; //仅当状态代码大于或等于<span class=\"number\">500</span>时拒绝</span><br><span class=\"line\">   &#125;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"消除\"><a href=\"#消除\" class=\"headerlink\" title=\"消除\"></a>消除</h3><p>您可以使用取消令牌取消请求。</p>\n<blockquote>\n<p>axios cancel token API基于可取消的promise提议，目前处于阶段1。</p>\n</blockquote>\n<p>您可以使用CancelToken.source工厂创建一个取消令牌，如下所示：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CancelToken = axios.CancelToken;</span><br><span class=\"line\"><span class=\"keyword\">var</span> source = CancelToken.source（）;</span><br><span class=\"line\"> </span><br><span class=\"line\">axios.<span class=\"keyword\">get</span>(<span class=\"string\">'/user/12345'</span>, &#123;</span><br><span class=\"line\">cancelToken: <span class=\"type\">source</span>.token</span><br><span class=\"line\">&#125;).<span class=\"keyword\">catch</span>(<span class=\"function\"><span class=\"keyword\">function</span></span>(thrown) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (axios.isCancel(thrown)) &#123;</span><br><span class=\"line\">console.log(<span class=\"string\">'Request canceled'</span>, thrown.message);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 处理错误</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//取消请求（消息参数是可选的）</span></span><br><span class=\"line\">source.cancel（<span class=\"string\">'操作被用户取消。'</span>）;</span><br></pre></td></tr></table></figure>\n<p>您还可以通过将执行器函数传递给CancelToken构造函数来创建取消令牌：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CancelToken = axios.CancelToken;</span><br><span class=\"line\"><span class=\"keyword\">var</span> cancel;</span><br><span class=\"line\"> </span><br><span class=\"line\">axios.get（<span class=\"string\">'/ user / 12345'</span>，&#123;</span><br><span class=\"line\">   cancelToken：<span class=\"keyword\">new</span> CancelToken（<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executor</span>（<span class=\"title\">c</span>）</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//一个执行器函数接收一个取消函数作为参数</span></span><br><span class=\"line\">     cancel = c;</span><br><span class=\"line\">   &#125;）</span><br><span class=\"line\">&#125;）;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 取消请求</span></span><br><span class=\"line\">clear();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：您可以使用相同的取消令牌取消几个请求。</p>\n</blockquote>\n<h3 id=\"使用application-x-www-form-urlencoded格式\"><a href=\"#使用application-x-www-form-urlencoded格式\" class=\"headerlink\" title=\"使用application / x-www-form-urlencoded格式\"></a>使用application / x-www-form-urlencoded格式</h3><p>默认情况下，axios将JavaScript对象序列化为JSON。 要以应用程序/ x-www-form-urlencoded格式发送数据，您可以使用以下选项之一。</p>\n<p><strong>浏览器</strong></p>\n<p>在浏览器中，您可以使用URLSearchParams API，如下所示：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">params</span> = <span class=\"keyword\">new</span> URLSearchParams();</span><br><span class=\"line\"><span class=\"keyword\">params</span>.append(<span class=\"string\">'param1'</span>, <span class=\"string\">'value1'</span>);</span><br><span class=\"line\"><span class=\"keyword\">params</span>.append(<span class=\"string\">'param2'</span>, <span class=\"string\">'value2'</span>);</span><br><span class=\"line\">axios.post(<span class=\"string\">'/foo'</span>, <span class=\"keyword\">params</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>请注意，所有浏览器都不支持URLSearchParams，但是有一个polyfill可用（确保polyfill全局环境）。</p>\n</blockquote>\n<p>或者，您可以使用qs库对数据进行编码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> qs = <span class=\"built_in\">require</span>(<span class=\"string\">'qs'</span>);</span><br><span class=\"line\">axios.post(<span class=\"string\">'/foo'</span>, qs.stringify(&#123; <span class=\"string\">'bar'</span>: <span class=\"number\">123</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>Node.js</strong><br>在node.js中，可以使用querystring模块，如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</span><br><span class=\"line\">axios.post(<span class=\"string\">'http://something.com/'</span>, querystring.stringify(&#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>你也可以使用qs库。</p>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><p>axios 依赖本机要支持ES6 Promise实现。 如果您的环境不支持ES6 Promises，您可以使用polyfill。</p>\n<h3 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h3><p>axios包括TypeScript定义。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios from <span class=\"string\">'axios'</span>;</span><br><span class=\"line\">axios.<span class=\"built_in\">get</span>(<span class=\"string\">'/user?ID=12345'</span>);</span><br></pre></td></tr></table></figure>\n<p>axios在很大程度上受到Angular提供的$http服务的启发。 最终，axios努力提供一个在Angular外使用的独立的$http-like服务。</p>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n\n","excerpt":"随着 vuejs 作者尤雨溪发布消息，不再继续维护vue-resource，并推荐大家使用 axios 开始，axios 被越来越多的人所了解。本来想在网上找找详细攻略，突然发现，axios 的官方文档本身就非常详细！！有这个还要什么自行车！！所以推荐大家学习这种库，最好详细阅读其官方文档。大概翻译了一下 axios 的官方文档，相信大家只要吃透本文再加以实践，axios 就是小意思啦！！ 如果您觉得本文对您有帮助，不妨点个赞或关注收藏一下，您的鼓励对我非常重要。","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://www.ding1996.cn/tags/vue/"}]},{"title":"近期感悟","date":"2017-05-22T02:40:12.000Z","path":"2017/05/22/20170522/","text":"最近变得有点秃废，一转眼距离上次写博客说要好好学习貌似已经过了一个月了。时间总是这么无情，不管你是谁 他都毫不留情的从你身边头也不回的走过~ 今天和以前的同学聊了会天，他是我推荐去学技术的 那时候他学的是PHP，短短的不到一年的时间见证了他的成长，从零基础的菜鸟变成现在应对工作游刃有余的小码农~ 不比不知道，一比下一跳我是那种有好胜心的人，人总是这样不怕陌生人有钱，就怕自己朋友发了财的这种，所以我觉得人会妒忌别人比你好这是天生的本性 so 现在我自己知道和别人的差距 想要超越别人只有比他们更努力 时间花在哪里，成就在哪里 ~ 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<p>最近变得有点秃废，一转眼距离上次写博客说要好好学习貌似已经过了一个月了。时间总是这么无情，不管你是谁 他都毫不留情的从你身边头也不回的走过~</p>\n<p>今天和以前的同学聊了会天，他是我推荐去学技术的 那时候他学的是PHP，短短的不到一年的时间见证了他的成长，从零基础的菜鸟变成现在应对工作游刃有余的小码农~</p>\n<p>不比不知道，一比下一跳我是那种有好胜心的人，人总是这样不怕陌生人有钱，就怕自己朋友发了财的这种，所以我觉得人会妒忌别人比你好这是天生的本性 so 现在我自己知道和别人的差距 想要超越别人只有比他们更努力</p>\n<p>时间花在哪里，成就在哪里 ~ </p>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n","excerpt":"","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://www.ding1996.cn/tags/随笔/"}]},{"title":"JavaScript 设计模式 ② 巧用'工厂模式'和'创建者'模式","date":"2017-04-28T01:28:24.000Z","path":"2017/04/28/it-20170428js/","text":"我为什么把他们两个放在一起讲？我觉得这两个设计模式有相似之处，有时候会一个设计模式不能满足你的需求而采用另一种设计模式。基于这点考虑，而且为了大家更好地理解，我放到了一起，加深大家的印象，活学活用。 [这里我为了能更好的体现下设计模式与JS本体语言的结合，我用了一点继承关系.有的同学都不知道JS能继承，就算大家不懂继承也希望大家能看下去，弄懂它！] 工厂模式 创建对象跟对不同需求进行不同的实例化 在我们Team协作开发过程当中，不同于我们写个人项目，对全局变量的限制很大，我们要尽量少的使用全局变量，对于一类对象在不同需求上的不同使用，甚至将一些有些类似的方法抽象化，可以用工厂模式来负责创建这些对象，调用者可以使用一部分资源也可以在基础上私人订制一套资源。 就拿昨天入群的小伙伴举个栗子：他设计一个网页播放器有四个按钮： 我们不讨论他的实现方式，我们按照工厂模式来简单创建一个吧！ 12345678910111213141516171819202122232425262728293031323334353637function wangyiMusicAction(action)&#123; var o = new Object; o.vender = '网易云音乐'; o.playingMusic = 'see you again' switch (action)&#123; case 'last': o.information = &#123;currentMusic:'Ich will',status:'200|404',message:'上一曲'&#125; break case 'next': o.information = &#123;currentMusic:'一人我编程累',status:'200|404',message:'下一曲'&#125; break case 'play': o.information = &#123;currentMusic:'see you again',status:'200|500',message:'播放'&#125; break case 'mute': o.information = &#123;currentMusic:'see you again',status:'200|500',message:'静音'&#125; break &#125; return o;&#125;var music = wangyiMusicAction('next')console.log('音乐提供商 : '+music.vender);console.log('正在播放 : '+music.playingMusic);console.log('执行动作 : ' +music.information.message);console.log('接口状态 : ' +music.information.status);console.log('执行动作后歌曲 : ' +music.information.currentMusic);----------执行结果--------音乐提供商 : 网易云音乐正在播放 : see you again执行动作 : 下一曲接口状态 : 200|404执行动作后歌曲 : 一人我编程累 这其实使我们经常使用的，不过这是面向过程的，不太符合我们的设计模式。我们用上篇学到的模式：对象 我们可以修改一下： 1234567891011121314151617181920212223242526272829303132333435363738394041var WangyiMusicAction = function(action)&#123; this.vender = '网易云音乐'; this.playingMusic = 'see you again'&#125;WangyiMusicAction.prototype = &#123; last : function() &#123; this.information = &#123;currentMusic:'Ich will',status:'200|404',message:'上一曲'&#125; &#125;, next : function() &#123; this.information = &#123;currentMusic:'一人我编程累',status:'200|404',message:'下一曲'&#125; &#125;, play : function() &#123; this.information = &#123;currentMusic:'see you again',status:'200|500',message:'播放'&#125; &#125;, mute : function() &#123; this.information = &#123;currentMusic:'see you again',status:'200|500',message:'静音'&#125; &#125;&#125;var music = new WangyiMusicAction()music.next(); //执行下一曲动作console.log('音乐提供商 : '+music.vender);console.log('正在播放 : '+music.playingMusic);console.log('执行动作 : ' +music.information.message);console.log('接口状态 : ' +music.information.status);console.log('执行动作后歌曲 : ' +music.information.currentMusic);音乐提供商 : 网易云音乐正在播放 : see you again执行动作 : 下一曲接口状态 : 200|400----------执行结果--------执行动作后歌曲 : 一人我编程累 这样就算是面向对象的了，虽然达到目的，但是上面所说的，但是这算是Music的网易云音乐实现版本、总不能再来一个QQMusic、XiaMiMusic吧？我们建立一个Factory工厂来管理所有的音乐： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182var WangyiMusicAction = function(action)&#123; this.vender = '网易云音乐'; this.playingMusic = 'see you again'&#125;//为网易音乐提供共有方法WangyiMusicAction.prototype = &#123; last : function() &#123; this.information = &#123;currentMusic:'Ich will',status:'200|404',message:'上一曲'&#125; &#125;, next : function() &#123; this.information = &#123;currentMusic:'一人我编程累',status:'200|404',message:'下一曲'&#125; &#125;, play : function() &#123; this.information = &#123;currentMusic:'see you again',status:'200|500',message:'播放'&#125; &#125;, mute : function() &#123; this.information = &#123;currentMusic:'see you again',status:'200|500',message:'静音'&#125; &#125;&#125;var QQMusicAction = function(action)&#123; this.vender = 'QQ音乐'; this.playingMusic = '其实我不low'&#125;//为QQ音乐提供共有方法QQMusicAction.prototype = &#123; last : function() &#123; this.information = &#123;currentMusic:'Ich will',status:'200|404',message:'上一曲'&#125; &#125;, next : function() &#123; this.information = &#123;currentMusic:'网易才low',status:'200|404',message:'下一曲'&#125; &#125;, play : function() &#123; this.information = &#123;currentMusic:'see you again',status:'200|500',message:'播放'&#125; &#125;, mute : function() &#123; this.information = &#123;currentMusic:'see you again',status:'200|500',message:'静音'&#125; &#125;&#125;//音乐工厂var MusicFactory = function(type)&#123; switch (type)&#123; case 'qq': return new QQMusicAction(); case 'wangyi': return new WangyiMusicAction() &#125;&#125;var music = new MusicFactory('qq')music.next(); //执行下一曲动作console.log('音乐提供商 : '+music.vender);console.log('正在播放 : '+music.playingMusic);console.log('执行动作 : ' +music.information.message);console.log('接口状态 : ' +music.information.status);console.log('执行动作后歌曲 : ' +music.information.currentMusic);----------执行结果--------音乐提供商 : QQ音乐正在播放 : 其实我不low执行动作 : 下一曲接口状态 : 200|404执行动作后歌曲 : 网易才low 这样调用者需要用音乐接口，只需要记住MusicFactory就可以了，MusicFactory就像一个大工厂，对于music可以返回他要的一切。 好，我们回过头来看一下： 第一种方法:是创建一个新的对象 o 对他来增强 属性 的功能来实现的.第二种方法:是实例化对象来创建的。第二种方法:如果他们继承同一个父类 BaseMusic 那么他们父类的原型方法是可以和它们公用的!第一种方法:我们内部 new 了一个新的个体，就不能与父类共用了. 具体哪种还是看你需求的，不过我更倾向第二种，因为他扩展性高，需求多的时候我们甚至可以将通用的抽离出来放到父类BaseMusic中。 在下面的继承中我运用了类式继承 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768//基类（父类）music方法var BaseMusic = function()&#123; this.playingMusic = 'see you again'&#125;//实现通用方法BaseMusic.prototype = &#123; last : function() &#123; this.information = &#123;status:'200|404',message:'上一曲'&#125; &#125;, next : function() &#123; this.information = &#123;currentMusic:'一人我编程累',status:'200|404',message:'下一曲'&#125; &#125;, play : function() &#123; this.information = &#123;currentMusic:'see you again',status:'200|500',message:'播放'&#125; &#125;, mute : function() &#123; this.information = &#123;currentMusic:'see you again',status:'200|500',message:'静音'&#125; &#125;&#125;//网易云的不同于父类的构造方法var WangyiMusicAction = function(action)&#123; this.vender = '网易云音乐';&#125;//这里通过prototype实现类继承WangyiMusicAction.prototype = new BaseMusic();//这些动作我都放在基类了，达到代码复用的目的//QQvar QQMusicAction = function(action)&#123; this.vender = 'QQ音乐'; this.playingMusic = '其实我不low'&#125;QQMusicAction.prototype = new BaseMusic() //这些动作我都放在基类了，达到代码复用的目的//音乐工厂var MusicFactory = function(type)&#123; switch (type)&#123; case 'qq': return new QQMusicAction(); case 'wangyi': return new WangyiMusicAction() &#125;&#125;var music = new MusicFactory('wangyi')music.next(); //执行下一曲动作console.log('音乐提供商 : '+music.vender);console.log('正在播放 : '+music.playingMusic);console.log('执行动作 : ' +music.information.message);console.log('接口状态 : ' +music.information.status);console.log('执行动作后歌曲 : ' +music.information.currentMusic);----------执行结果--------音乐提供商 : 网易云音乐正在播放 : see you again执行动作 : 下一曲接口状态 : 200|404执行动作后歌曲 : 一人我编程累 这样看起来是不是更好、更简洁呢？ 创建者模式工厂模式职责：我不管你想干啥，我只返回给你一个你想要的对象创建者模式职责：主要针对复杂业务的解耦，算是工厂的一种拆解、拼接。我可以将你的需求分解多个对象创建，更关心的是创建对象的过程。不复杂不能突显出他的魅力,举个稍微复杂栗子： 我们公司是卖车的，用户下单要买车，这个车呢： 品牌：迈巴赫、林肯、宾利、特斯拉[如果不选品牌，默认特斯拉]颜色：赤橙黄绿青蓝紫…[如果不选颜色，默认黄色]动力：燃油、电力、混合动力[如果不选动力，默认电力]购买人的一些备注信息[购买人可能会修改备注需要提供方法]针对购买人选择的车型返回对车型的简单描述[描述可以修改]最终根据用户选择来生成一个订单：想下这用工厂模式是不是要写很多的if else来返回这么一个Car的对象呢？ 我们先将 车 购买人的动作 反馈 分解为三个对象再在最后进行拼接 ： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566//创建一个汽车var Car = function(param)&#123; this.color = param &amp;&amp; param.color || 'yellow'; this.brand = param &amp;&amp; param.brand || 'Tesla'; this.power = param &amp;&amp; param.power || 'electric';&#125;//提供原型方法Car.prototype = &#123; getColor : function () &#123; return this.color; &#125;, getBrand : function () &#123; return this.brand; &#125;, getPower : function () &#123; return this.power; &#125;&#125;//创建一个反馈var FeedBack = function(brand)&#123; var that = this; (function(brand,that)&#123; switch (brand)&#123; case 'Tesla': // that.brand = brand; that.information = '特斯拉是好车' break case 'Rolls' : that.information = '劳斯来时是好车' &#125; &#125;)(brand,that)&#125;FeedBack.prototype.changeBrand = function (information) &#123; this.information = information;&#125;//创建一个顾客var Client = function(name,message)&#123; this.name = name; this.message = message || '无留言';&#125;//顾客修改备注Client.prototype.changeMessage = function(message)&#123; this.message = message;&#125;//然后重点在这里！我们在这里将我们分解的拼接起来。var Order = function(name)&#123; var object = new Car(); object.client = new Client(name); object.feedBack = new FeedBack(object.brand); return object;&#125;var orderCar = new Order('Vendar-MH');console.log('The' + orderCar.client.name + '先生、下单一辆' + orderCar.color + '的' + orderCar.brand +' 留言内容 : ' +orderCar.client.message );orderCar.client.changeMessage('请马上电话联系我')console.log('The' + orderCar.client.name + '先生、下单一辆' + orderCar.color + '的' + orderCar.brand +' 留言内容 : ' +orderCar.client.message );----------执行结果--------TheVendar-MH先生、下单一辆yellow的Tesla 留言内容 : 无留言TheVendar-MH先生、下单一辆yellow的Tesla 留言内容 : 请马上电话联系我 好了,就算是关于这个订单的更加复杂的需求，或者修改需求，不管我们多少各功能在用，我们只要微微一笑，修改下prototype等实现就好了0.0 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<p>我为什么把他们两个放在一起讲？我觉得这两个设计模式有相似之处，有时候会一个设计模式不能满足你的需求而采用另一种设计模式。基于这点考虑，而且为了大家更好地理解，我放到了一起，加深大家的印象，活学活用。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>[这里我为了能更好的体现下设计模式与JS本体语言的结合，我用了一点继承关系.<br>有的同学都不知道JS能继承，就算大家不懂继承也希望大家能看下去，弄懂它！]</p>\n</blockquote>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><ul>\n<li>创建对象跟对不同需求进行不同的实例化</li>\n</ul>\n<p>在我们Team协作开发过程当中，不同于我们写个人项目，对全局变量的限制很大，我们要尽量少的使用全局变量，对于一类对象在不同需求上的不同使用，甚至将一些有些类似的方法抽象化，可以用工厂模式来负责创建这些对象，调用者可以使用一部分资源也可以在基础上私人订制一套资源。</p>\n<p>就拿昨天入群的小伙伴举个栗子：他设计一个网页播放器有四个按钮：</p>\n<p>我们不讨论他的实现方式，我们按照工厂模式来简单创建一个吧！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wangyiMusicAction</span>(<span class=\"params\">action</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>;</span><br><span class=\"line\">    o.vender = <span class=\"string\">'网易云音乐'</span>;</span><br><span class=\"line\">    o.playingMusic = <span class=\"string\">'see you again'</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'last'</span>:</span><br><span class=\"line\">            o.information = &#123;<span class=\"attr\">currentMusic</span>:<span class=\"string\">'Ich will'</span>,<span class=\"attr\">status</span>:<span class=\"string\">'200|404'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'上一曲'</span>&#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'next'</span>:</span><br><span class=\"line\">            o.information = &#123;<span class=\"attr\">currentMusic</span>:<span class=\"string\">'一人我编程累'</span>,<span class=\"attr\">status</span>:<span class=\"string\">'200|404'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'下一曲'</span>&#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'play'</span>:</span><br><span class=\"line\">            o.information = &#123;<span class=\"attr\">currentMusic</span>:<span class=\"string\">'see you again'</span>,<span class=\"attr\">status</span>:<span class=\"string\">'200|500'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'播放'</span>&#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'mute'</span>:</span><br><span class=\"line\">            o.information = &#123;<span class=\"attr\">currentMusic</span>:<span class=\"string\">'see you again'</span>,<span class=\"attr\">status</span>:<span class=\"string\">'200|500'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'静音'</span>&#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> music = wangyiMusicAction(<span class=\"string\">'next'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'音乐提供商 : '</span>+music.vender);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'正在播放 : '</span>+music.playingMusic);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'执行动作 : '</span> +music.information.message);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'接口状态 : '</span> +music.information.status);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'执行动作后歌曲 : '</span> +music.information.currentMusic);</span><br><span class=\"line\"></span><br><span class=\"line\">----------执行结果--------</span><br><span class=\"line\"></span><br><span class=\"line\">音乐提供商 : 网易云音乐</span><br><span class=\"line\">正在播放 : see you again</span><br><span class=\"line\">执行动作 : 下一曲</span><br><span class=\"line\">接口状态 : <span class=\"number\">200</span>|<span class=\"number\">404</span></span><br><span class=\"line\">执行动作后歌曲 : 一人我编程累</span><br></pre></td></tr></table></figure>\n<p>这其实使我们经常使用的，不过这是面向过程的，不太符合我们的设计模式。我们用上篇学到的模式：对象</p>\n<p>我们可以修改一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> WangyiMusicAction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">action</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vender = <span class=\"string\">'网易云音乐'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.playingMusic = <span class=\"string\">'see you again'</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">WangyiMusicAction.prototype = &#123;</span><br><span class=\"line\">    last : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.information = &#123;<span class=\"attr\">currentMusic</span>:<span class=\"string\">'Ich will'</span>,<span class=\"attr\">status</span>:<span class=\"string\">'200|404'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'上一曲'</span>&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    next : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.information = &#123;<span class=\"attr\">currentMusic</span>:<span class=\"string\">'一人我编程累'</span>,<span class=\"attr\">status</span>:<span class=\"string\">'200|404'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'下一曲'</span>&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    play : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.information = &#123;<span class=\"attr\">currentMusic</span>:<span class=\"string\">'see you again'</span>,<span class=\"attr\">status</span>:<span class=\"string\">'200|500'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'播放'</span>&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    mute : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.information = &#123;<span class=\"attr\">currentMusic</span>:<span class=\"string\">'see you again'</span>,<span class=\"attr\">status</span>:<span class=\"string\">'200|500'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'静音'</span>&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> music = <span class=\"keyword\">new</span> WangyiMusicAction()</span><br><span class=\"line\">music.next(); <span class=\"comment\">//执行下一曲动作</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'音乐提供商 : '</span>+music.vender);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'正在播放 : '</span>+music.playingMusic);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'执行动作 : '</span> +music.information.message);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'接口状态 : '</span> +music.information.status);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'执行动作后歌曲 : '</span> +music.information.currentMusic);</span><br><span class=\"line\">音乐提供商 : 网易云音乐</span><br><span class=\"line\">正在播放 : see you again</span><br><span class=\"line\">执行动作 : 下一曲</span><br><span class=\"line\">接口状态 : <span class=\"number\">200</span>|<span class=\"number\">400</span></span><br><span class=\"line\"></span><br><span class=\"line\">----------执行结果--------</span><br><span class=\"line\"></span><br><span class=\"line\">执行动作后歌曲 : 一人我编程累</span><br></pre></td></tr></table></figure>\n<p>这样就算是面向对象的了，虽然达到目的，但是上面所说的，但是这算是Music的网易云音乐实现版本、总不能再来一个QQMusic、XiaMiMusic吧？我们建立一个Factory工厂来管理所有的音乐：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> WangyiMusicAction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">action</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vender = <span class=\"string\">'网易云音乐'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.playingMusic = <span class=\"string\">'see you again'</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为网易音乐提供共有方法</span></span><br><span class=\"line\">WangyiMusicAction.prototype = &#123;</span><br><span class=\"line\">    last : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.information = &#123;<span class=\"attr\">currentMusic</span>:<span class=\"string\">'Ich will'</span>,<span class=\"attr\">status</span>:<span class=\"string\">'200|404'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'上一曲'</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    next : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.information = &#123;<span class=\"attr\">currentMusic</span>:<span class=\"string\">'一人我编程累'</span>,<span class=\"attr\">status</span>:<span class=\"string\">'200|404'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'下一曲'</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    play : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.information = &#123;<span class=\"attr\">currentMusic</span>:<span class=\"string\">'see you again'</span>,<span class=\"attr\">status</span>:<span class=\"string\">'200|500'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'播放'</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    mute : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.information = &#123;<span class=\"attr\">currentMusic</span>:<span class=\"string\">'see you again'</span>,<span class=\"attr\">status</span>:<span class=\"string\">'200|500'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'静音'</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> QQMusicAction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">action</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vender = <span class=\"string\">'QQ音乐'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.playingMusic = <span class=\"string\">'其实我不low'</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为QQ音乐提供共有方法</span></span><br><span class=\"line\">QQMusicAction.prototype = &#123;</span><br><span class=\"line\">    last : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.information = &#123;<span class=\"attr\">currentMusic</span>:<span class=\"string\">'Ich will'</span>,<span class=\"attr\">status</span>:<span class=\"string\">'200|404'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'上一曲'</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    next : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.information = &#123;<span class=\"attr\">currentMusic</span>:<span class=\"string\">'网易才low'</span>,<span class=\"attr\">status</span>:<span class=\"string\">'200|404'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'下一曲'</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    play : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.information = &#123;<span class=\"attr\">currentMusic</span>:<span class=\"string\">'see you again'</span>,<span class=\"attr\">status</span>:<span class=\"string\">'200|500'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'播放'</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    mute : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.information = &#123;<span class=\"attr\">currentMusic</span>:<span class=\"string\">'see you again'</span>,<span class=\"attr\">status</span>:<span class=\"string\">'200|500'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'静音'</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//音乐工厂</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MusicFactory = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (type)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'qq'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> QQMusicAction();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'wangyi'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WangyiMusicAction()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> music = <span class=\"keyword\">new</span> MusicFactory(<span class=\"string\">'qq'</span>)</span><br><span class=\"line\">music.next(); <span class=\"comment\">//执行下一曲动作</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'音乐提供商 : '</span>+music.vender);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'正在播放 : '</span>+music.playingMusic);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'执行动作 : '</span> +music.information.message);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'接口状态 : '</span> +music.information.status);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'执行动作后歌曲 : '</span> +music.information.currentMusic);</span><br><span class=\"line\"></span><br><span class=\"line\">----------执行结果--------</span><br><span class=\"line\"></span><br><span class=\"line\">音乐提供商 : QQ音乐</span><br><span class=\"line\">正在播放 : 其实我不low</span><br><span class=\"line\">执行动作 : 下一曲</span><br><span class=\"line\">接口状态 : <span class=\"number\">200</span>|<span class=\"number\">404</span></span><br><span class=\"line\">执行动作后歌曲 : 网易才low</span><br></pre></td></tr></table></figure>\n<p>这样调用者需要用音乐接口，只需要记住MusicFactory就可以了，MusicFactory就像一个大工厂，对于music可以返回他要的一切。</p>\n<p>好，我们回过头来看一下：</p>\n<p>第一种方法:是创建一个新的对象 o 对他来增强 属性 的功能来实现的.<br>第二种方法:是实例化对象来创建的。<br>第二种方法:如果他们继承同一个父类 BaseMusic 那么他们父类的原型方法是可以和它们公用的!<br>第一种方法:我们内部 new 了一个新的个体，就不能与父类共用了.</p>\n<p>具体哪种还是看你需求的，不过我更倾向第二种，因为他扩展性高，需求多的时候我们甚至可以将通用的抽离出来放到父类BaseMusic中。</p>\n<p>在下面的继承中我运用了类式继承</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//基类（父类）music方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> BaseMusic = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.playingMusic = <span class=\"string\">'see you again'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//实现通用方法</span></span><br><span class=\"line\">BaseMusic.prototype = &#123;</span><br><span class=\"line\">    last : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.information = &#123;<span class=\"attr\">status</span>:<span class=\"string\">'200|404'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'上一曲'</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    next : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.information = &#123;<span class=\"attr\">currentMusic</span>:<span class=\"string\">'一人我编程累'</span>,<span class=\"attr\">status</span>:<span class=\"string\">'200|404'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'下一曲'</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    play : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.information = &#123;<span class=\"attr\">currentMusic</span>:<span class=\"string\">'see you again'</span>,<span class=\"attr\">status</span>:<span class=\"string\">'200|500'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'播放'</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    mute : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.information = &#123;<span class=\"attr\">currentMusic</span>:<span class=\"string\">'see you again'</span>,<span class=\"attr\">status</span>:<span class=\"string\">'200|500'</span>,<span class=\"attr\">message</span>:<span class=\"string\">'静音'</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//网易云的不同于父类的构造方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> WangyiMusicAction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">action</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vender = <span class=\"string\">'网易云音乐'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这里通过prototype实现类继承</span></span><br><span class=\"line\">WangyiMusicAction.prototype = <span class=\"keyword\">new</span> BaseMusic();<span class=\"comment\">//这些动作我都放在基类了，达到代码复用的目的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//QQ</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> QQMusicAction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">action</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vender = <span class=\"string\">'QQ音乐'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.playingMusic = <span class=\"string\">'其实我不low'</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">QQMusicAction.prototype = <span class=\"keyword\">new</span> BaseMusic() <span class=\"comment\">//这些动作我都放在基类了，达到代码复用的目的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//音乐工厂</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MusicFactory = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (type)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'qq'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> QQMusicAction();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'wangyi'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WangyiMusicAction()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> music = <span class=\"keyword\">new</span> MusicFactory(<span class=\"string\">'wangyi'</span>)</span><br><span class=\"line\">music.next(); <span class=\"comment\">//执行下一曲动作</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'音乐提供商 : '</span>+music.vender);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'正在播放 : '</span>+music.playingMusic);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'执行动作 : '</span> +music.information.message);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'接口状态 : '</span> +music.information.status);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'执行动作后歌曲 : '</span> +music.information.currentMusic);</span><br><span class=\"line\"></span><br><span class=\"line\">----------执行结果--------</span><br><span class=\"line\"></span><br><span class=\"line\">音乐提供商 : 网易云音乐</span><br><span class=\"line\">正在播放 : see you again</span><br><span class=\"line\">执行动作 : 下一曲</span><br><span class=\"line\">接口状态 : <span class=\"number\">200</span>|<span class=\"number\">404</span></span><br><span class=\"line\">执行动作后歌曲 : 一人我编程累</span><br></pre></td></tr></table></figure>\n<p>这样看起来是不是更好、更简洁呢？</p>\n<h3 id=\"创建者模式\"><a href=\"#创建者模式\" class=\"headerlink\" title=\"创建者模式\"></a>创建者模式</h3><p>工厂模式职责：我不管你想干啥，我只返回给你一个你想要的对象<br>创建者模式职责：主要针对复杂业务的解耦，算是工厂的一种拆解、拼接。我可以将你的需求分解多个对象创建，更关心的是创建对象的过程。<br>不复杂不能突显出他的魅力,举个稍微复杂栗子：</p>\n<p>我们公司是卖车的，用户下单要买车，这个车呢：</p>\n<p>品牌：迈巴赫、林肯、宾利、特斯拉[如果不选品牌，默认特斯拉]<br>颜色：赤橙黄绿青蓝紫…[如果不选颜色，默认黄色]<br>动力：燃油、电力、混合动力[如果不选动力，默认电力]<br>购买人的一些备注信息[购买人可能会修改备注需要提供方法]<br>针对购买人选择的车型返回对车型的简单描述[描述可以修改]<br>最终根据用户选择来生成一个订单：<br>想下这用工厂模式是不是要写很多的if else来返回这么一个Car的对象呢？</p>\n<p>我们先将 车 购买人的动作 反馈 分解为三个对象再在最后进行拼接 ：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个汽车</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Car  = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">param</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = param &amp;&amp; param.color || <span class=\"string\">'yellow'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.brand = param &amp;&amp; param.brand || <span class=\"string\">'Tesla'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.power = param &amp;&amp; param.power || <span class=\"string\">'electric'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//提供原型方法</span></span><br><span class=\"line\">Car.prototype = &#123;</span><br><span class=\"line\">    getColor : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.color;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getBrand : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.brand;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getPower : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.power;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个反馈</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> FeedBack = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">brand</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">brand,that</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (brand)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'Tesla'</span>:</span><br><span class=\"line\">                <span class=\"comment\">// that.brand = brand;</span></span><br><span class=\"line\">                that.information = <span class=\"string\">'特斯拉是好车'</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'Rolls'</span> :</span><br><span class=\"line\">                that.information = <span class=\"string\">'劳斯来时是好车'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)(brand,that)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FeedBack.prototype.changeBrand = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">information</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.information = information;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个顾客</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Client = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,message</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.message = message || <span class=\"string\">'无留言'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//顾客修改备注</span></span><br><span class=\"line\">Client.prototype.changeMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//然后重点在这里！我们在这里将我们分解的拼接起来。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Order = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> object = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">    object.client  = <span class=\"keyword\">new</span> Client(name);</span><br><span class=\"line\">    object.feedBack = <span class=\"keyword\">new</span> FeedBack(object.brand);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> orderCar = <span class=\"keyword\">new</span> Order(<span class=\"string\">'Vendar-MH'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'The'</span> + orderCar.client.name + <span class=\"string\">'先生、下单一辆'</span> + orderCar.color + <span class=\"string\">'的'</span> + orderCar.brand +<span class=\"string\">' 留言内容 : '</span> +orderCar.client.message );</span><br><span class=\"line\">orderCar.client.changeMessage(<span class=\"string\">'请马上电话联系我'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'The'</span> + orderCar.client.name + <span class=\"string\">'先生、下单一辆'</span> + orderCar.color + <span class=\"string\">'的'</span> + orderCar.brand +<span class=\"string\">' 留言内容 : '</span> +orderCar.client.message );</span><br><span class=\"line\"></span><br><span class=\"line\">----------执行结果--------</span><br><span class=\"line\"></span><br><span class=\"line\">TheVendar-MH先生、下单一辆yellow的Tesla 留言内容 : 无留言</span><br><span class=\"line\">TheVendar-MH先生、下单一辆yellow的Tesla 留言内容 : 请马上电话联系我</span><br></pre></td></tr></table></figure>\n<p>好了,就算是关于这个订单的更加复杂的需求，或者修改需求，不管我们多少各功能在用，我们只要微微一笑，修改下prototype等实现就好了0.0</p>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n\n","excerpt":"我为什么把他们两个放在一起讲？我觉得这两个设计模式有相似之处，有时候会一个设计模式不能满足你的需求而采用另一种设计模式。基于这点考虑，而且为了大家更好地理解，我放到了一起，加深大家的印象，活学活用。","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"vue-cli#2.0 webpack 配置分析","date":"2017-04-26T03:10:48.000Z","path":"2017/04/26/it-js-vue-cli/","text":"前言 作为 Vue 的使用者我们对于 vue-cli 都很熟悉，但是对它的 webpack 配置我们可能关注甚少，今天我们为大家带来 vue-cli#2.0 的 webpack 配置分析 vue-cli 的简介、安装我们不在这里赘述，对它还不熟悉的同学可以直接访问 vue-cli 查看 目录结构 12345678910111213141516171819202122232425.├── README.md├── build│ ├── build.js│ ├── check-versions.js│ ├── dev-client.js│ ├── dev-server.js│ ├── utils.js│ ├── webpack.base.conf.js│ ├── webpack.dev.conf.js│ └── webpack.prod.conf.js├── config│ ├── dev.env.js│ ├── index.js│ └── prod.env.js├── index.html├── package.json├── src│ ├── App.vue│ ├── assets│ │ └── logo.png│ ├── components│ │ └── Hello.vue│ └── main.js└── static 本篇文章的主要关注点在 build - 编译任务的代码 config - webpack 的配置文件 package.json - 项目的基本信息 入口 从 package.json 中我们可以看到 12345\"scripts\": &#123; \"dev\": \"node build/dev-server.js\", \"build\": \"node build/build.js\", \"lint\": \"eslint --ext .js,.vue src\"&#125; 当我们执行 npm run dev / npm run build 时运行的是 node build/dev-server.js 或 node build/build.js dev-server.js让我们先从 build/dev-server.js 入手 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384require('./check-versions')() // 检查 Node 和 npm 版本var config = require('../config') // 获取 config/index.js 的默认配置/* ** 如果 Node 的环境无法判断当前是 dev / product 环境** 使用 config.dev.env.NODE_ENV 作为当前的环境*/if (!process.env.NODE_ENV) process.env.NODE_ENV = JSON.parse(config.dev.env.NODE_ENV)var path = require('path') // 使用 NodeJS 自带的文件路径工具var express = require('express') // 使用 expressvar webpack = require('webpack') // 使用 webpackvar opn = require('opn') // 一个可以强制打开浏览器并跳转到指定 url 的插件var proxyMiddleware = require('http-proxy-middleware') // 使用 proxyTable var webpackConfig = require('./webpack.dev.conf') // 使用 dev 环境的 webpack 配置/* 如果没有指定运行端口，使用 config.dev.port 作为运行端口 */var port = process.env.PORT || config.dev.port/* 使用 config.dev.proxyTable 的配置作为 proxyTable 的代理配置 *//* 项目参考 https://github.com/chimurai/http-proxy-middleware */var proxyTable = config.dev.proxyTable/* 使用 express 启动一个服务 */var app = express()var compiler = webpack(webpackConfig) // 启动 webpack 进行编译/* 启动 webpack-dev-middleware，将 编译后的文件暂存到内存中 */var devMiddleware = require('webpack-dev-middleware')(compiler, &#123; publicPath: webpackConfig.output.publicPath, stats: &#123; colors: true, chunks: false &#125;&#125;)/* 启动 webpack-hot-middleware，也就是我们常说的 Hot-reload */var hotMiddleware = require('webpack-hot-middleware')(compiler)/* 当 html-webpack-plugin 模板更新的时候强制刷新页面 */compiler.plugin('compilation', function (compilation) &#123; compilation.plugin('html-webpack-plugin-after-emit', function (data, cb) &#123; hotMiddleware.publish(&#123; action: 'reload' &#125;) cb() &#125;)&#125;)// 将 proxyTable 中的请求配置挂在到启动的 express 服务上Object.keys(proxyTable).forEach(function (context) &#123; var options = proxyTable[context] if (typeof options === 'string') &#123; options = &#123; target: options &#125; &#125; app.use(proxyMiddleware(context, options))&#125;)// 使用 connect-history-api-fallback 匹配资源，如果不匹配就可以重定向到指定地址app.use(require('connect-history-api-fallback')())// 将暂存到内存中的 webpack 编译后的文件挂在到 express 服务上app.use(devMiddleware)// 将 Hot-reload 挂在到 express 服务上并且输出相关的状态、错误app.use(hotMiddleware)// 拼接 static 文件夹的静态资源路径var staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)// 为静态资源提供响应服务app.use(staticPath, express.static('./static'))// 让我们这个 express 服务监听 port 的请求，并且将此服务作为 dev-server.js 的接口暴露module.exports = app.listen(port, function (err) &#123; if (err) &#123; console.log(err) return &#125; var uri = 'http://localhost:' + port console.log('Listening at ' + uri + '\\n') // 如果不是测试环境，自动打开浏览器并跳到我们的开发地址 if (process.env.NODE_ENV !== 'testing') &#123; opn(uri) &#125;&#125;) webpack.dev.conf.js刚刚我们在 dev-server.js 中用到了 webpack.dev.conf.js 和 index.js，我们先来看一下 webpack.dev.conf.js 1234567891011121314151617181920212223242526272829303132333435363738394041var config = require('../config') // 同样的使用了 config/index.jsvar webpack = require('webpack') // 使用 webpackvar merge = require('webpack-merge') // 使用 webpack 配置合并插件var utils = require('./utils') // 使用一些小工具var baseWebpackConfig = require('./webpack.base.conf') // 加载 webpack.base.conf/* 使用 html-webpack-plugin 插件，这个插件可以帮我们自动生成 html 并且注入到 .html 文件中 */var HtmlWebpackPlugin = require('html-webpack-plugin') // 将 Hol-reload 相对路径添加到 webpack.base.conf 的 对应 entry 前Object.keys(baseWebpackConfig.entry).forEach(function (name) &#123; baseWebpackConfig.entry[name] = ['./build/dev-client'].concat(baseWebpackConfig.entry[name])&#125;)/* 将我们 webpack.dev.conf.js 的配置和 webpack.base.conf.js 的配置合并 */module.exports = merge(baseWebpackConfig, &#123; module: &#123; // 使用 styleLoaders loaders: utils.styleLoaders(&#123; sourceMap: config.dev.cssSourceMap &#125;) &#125;, // 使用 #eval-source-map 模式作为开发工具，此配置可参考 DDFE 往期文章详细了解 devtool: '#eval-source-map', plugins: [ /* definePlugin 接收字符串插入到代码当中, 所以你需要的话可以写上 JS 的字符串 */ new webpack.DefinePlugin(&#123; 'process.env': config.dev.env &#125;), // 参考项目 https://github.com/glenjamin/webpack-hot-middleware#installation--usage new webpack.optimize.OccurenceOrderPlugin(), /* HotModule 插件在页面进行变更的时候只会重回对应的页面模块，不会重绘整个 html 文件 */ new webpack.HotModuleReplacementPlugin(), /* 使用了 NoErrorsPlugin 后页面中的报错不会阻塞，但是会在编译结束后报错 */ new webpack.NoErrorsPlugin(), // 参考项目 https://github.com/ampedandwired/html-webpack-plugin /* 将 index.html 作为入口，注入 html 代码后生成 index.html文件 */ new HtmlWebpackPlugin(&#123; filename: 'index.html', template: 'index.html', inject: true &#125;) ]&#125;) webpack.base.conf.js我们看到在 webpack.dev.conf.js 中又引入了 webpack.base.conf.js， 它看起来很重要的样子，所以我们只能在下一章来看看 config/index.js 了 （摊手） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103var path = require('path') // 使用 NodeJS 自带的文件路径插件var config = require('../config') // 引入 config/index.jsvar utils = require('./utils') // 引入一些小工具var projectRoot = path.resolve(__dirname, '../') // 拼接我们的工作区路径为一个绝对路径/* 将 NodeJS 环境作为我们的编译环境 */var env = process.env.NODE_ENV/* 是否在 dev 环境下开启 cssSourceMap ，在 config/index.js 中可配置 */var cssSourceMapDev = (env === 'development' &amp;&amp; config.dev.cssSourceMap)/* 是否在 production 环境下开启 cssSourceMap ，在 config/index.js 中可配置 */var cssSourceMapProd = (env === 'production' &amp;&amp; config.build.productionSourceMap)/* 最终是否使用 cssSourceMap */var useCssSourceMap = cssSourceMapDev || cssSourceMapProdmodule.exports = &#123; entry: &#123; app: './src/main.js' // 编译文件入口 &#125;, output: &#123; path: config.build.assetsRoot, // 编译输出的静态资源根路径 publicPath: process.env.NODE_ENV === 'production' ? config.build.assetsPublicPath : config.dev.assetsPublicPath, // 正式发布环境下编译输出的上线路径的根路径 filename: '[name].js' // 编译输出的文件名 &#125;, resolve: &#123; // 自动补全的扩展名 extensions: ['', '.js', '.vue'], // 不进行自动补全或处理的文件或者文件夹 fallback: [path.join(__dirname, '../node_modules')], alias: &#123; // 默认路径代理，例如 import Vue from 'vue'，会自动到 'vue/dist/vue.common.js'中寻找 'vue$': 'vue/dist/vue.common.js', 'src': path.resolve(__dirname, '../src'), 'assets': path.resolve(__dirname, '../src/assets'), 'components': path.resolve(__dirname, '../src/components') &#125; &#125;, resolveLoader: &#123; fallback: [path.join(__dirname, '../node_modules')] &#125;, module: &#123; preLoaders: [ // 预处理的文件及使用的 loader &#123; test: /\\.vue$/, loader: 'eslint', include: projectRoot, exclude: /node_modules/ &#125;, &#123; test: /\\.js$/, loader: 'eslint', include: projectRoot, exclude: /node_modules/ &#125; ], loaders: [ // 需要处理的文件及使用的 loader &#123; test: /\\.vue$/, loader: 'vue' &#125;, &#123; test: /\\.js$/, loader: 'babel', include: projectRoot, exclude: /node_modules/ &#125;, &#123; test: /\\.json$/, loader: 'json' &#125;, &#123; test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/, loader: 'url', query: &#123; limit: 10000, name: utils.assetsPath('img/[name].[hash:7].[ext]') &#125; &#125;, &#123; test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/, loader: 'url', query: &#123; limit: 10000, name: utils.assetsPath('fonts/[name].[hash:7].[ext]') &#125; &#125; ] &#125;, eslint: &#123; // eslint 代码检查配置工具 formatter: require('eslint-friendly-formatter') &#125;, vue: &#123; // .vue 文件配置 loader 及工具 (autoprefixer) loaders: utils.cssLoaders(&#123; sourceMap: useCssSourceMap &#125;), postcss: [ require('autoprefixer')(&#123; browsers: ['last 2 versions'] &#125;) ] &#125;&#125; config/index.js终于分析完了 webpack.base.conf.js，来让我们看一下 config/index.js index.js 中有 dev 和 production 两种环境的配置 1234567891011121314151617181920212223242526var path = require('path')module.exports = &#123; build: &#123; // production 环境 env: require('./prod.env'), // 使用 config/prod.env.js 中定义的编译环境 index: path.resolve(__dirname, '../dist/index.html'), // 编译输入的 index.html 文件 assetsRoot: path.resolve(__dirname, '../dist'), // 编译输出的静态资源路径 assetsSubDirectory: 'static', // 编译输出的二级目录 assetsPublicPath: '/', // 编译发布的根目录，可配置为资源服务器域名或 CDN 域名 productionSourceMap: true, // 是否开启 cssSourceMap // Gzip off by default as many popular static hosts such as // Surge or Netlify already gzip all static assets for you. // Before setting to `true`, make sure to: // npm install --save-dev compression-webpack-plugin productionGzip: false, // 是否开启 gzip productionGzipExtensions: ['js', 'css'] // 需要使用 gzip 压缩的文件扩展名 &#125;, dev: &#123; // dev 环境 env: require('./dev.env'), // 使用 config/dev.env.js 中定义的编译环境 port: 8080, // 运行测试页面的端口 assetsSubDirectory: 'static', // 编译输出的二级目录 assetsPublicPath: '/', // 编译发布的根目录，可配置为资源服务器域名或 CDN 域名 proxyTable: &#123;&#125;, // 需要 proxyTable 代理的接口（可跨域） cssSourceMap: false // 是否开启 cssSourceMap(因为一些 bug 此选项默认关闭，详情可参考 https://github.com/webpack/css-loader#sourcemaps) &#125;&#125; 至此，我们的 npm run dev 命令就讲解完毕，下面让我们来看一看执行 npm run build 命令时发生了什么 ～ build.js123456789101112131415161718192021222324252627282930313233343536373839404142require('./check-versions')() // 检查 Node 和 npm 版本require('shelljs/global') // 使用了 shelljs 插件，可以让我们在 node 环境的 js 中使用 shellenv.NODE_ENV = 'production'var path = require('path') // 不再赘述var config = require('../config') // 加载 config.jsvar ora = require('ora') // 一个很好看的 loading 插件var webpack = require('webpack') // 加载 webpackvar webpackConfig = require('./webpack.prod.conf') // 加载 webpack.prod.confconsole.log( // 输出提示信息 ～ 提示用户请在 http 服务下查看本页面，否则为空白页 ' Tip:\\n' + ' Built files are meant to be served over an HTTP server.\\n' + ' Opening index.html over file:// won\\'t work.\\n')var spinner = ora('building for production...') // 使用 ora 打印出 loading + logspinner.start() // 开始 loading 动画/* 拼接编译输出文件路径 */var assetsPath = path.join(config.build.assetsRoot, config.build.assetsSubDirectory)/* 删除这个文件夹 （递归删除） */rm('-rf', assetsPath)/* 创建此文件夹 */ mkdir('-p', assetsPath)/* 复制 static 文件夹到我们的编译输出目录 */cp('-R', 'static/*', assetsPath)// 开始 webpack 的编译webpack(webpackConfig, function (err, stats) &#123; // 编译成功的回调函数 spinner.stop() if (err) throw err process.stdout.write(stats.toString(&#123; colors: true, modules: false, children: false, chunks: false, chunkModules: false &#125;) + '\\n') &#125;) + '\\n')&#125;) webpack.prod.conf.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111require('path') var config = require('../config') // 加载 confi.index.jsvar utils = require('./utils') // 使用一些小工具var webpack = require('webpack') // 加载 webpackvar merge = require('webpack-merge') // 加载 webpack 配置合并工具var baseWebpackConfig = require('./webpack.base.conf') // 加载 webpack.base.conf.js/* 一个 webpack 扩展，可以提取一些代码并且将它们和文件分离开 */ /* 如果我们想将 webpack 打包成一个文件 css js 分离开，那我们需要这个插件 */var ExtractTextPlugin = require('extract-text-webpack-plugin')/* 一个可以插入 html 并且创建新的 .html 文件的插件 */var HtmlWebpackPlugin = require('html-webpack-plugin')var env = config.build.env/* 合并 webpack.base.conf.js */var webpackConfig = merge(baseWebpackConfig, &#123; module: &#123; /* 使用的 loader */ loaders: utils.styleLoaders(&#123; sourceMap: config.build.productionSourceMap, extract: true &#125;) &#125;, /* 是否使用 #source-map 开发工具，更多信息可以查看 DDFE 往期文章 */ devtool: config.build.productionSourceMap ? '#source-map' : false, output: &#123; /* 编译输出目录 */ path: config.build.assetsRoot, /* 编译输出文件名 */ filename: utils.assetsPath('js/[name].[chunkhash].js'), // 我们可以在 hash 后加 :6 决定使用几位 hash 值 // 没有指定输出名的文件输出的文件名 chunkFilename: utils.assetsPath('js/[id].[chunkhash].js') &#125;, vue: &#123; /* 编译 .vue 文件时使用的 loader */ loaders: utils.cssLoaders(&#123; sourceMap: config.build.productionSourceMap, extract: true &#125;) &#125;, plugins: [ /* 使用的插件 */ /* definePlugin 接收字符串插入到代码当中, 所以你需要的话可以写上 JS 的字符串 */ new webpack.DefinePlugin(&#123; 'process.env': env &#125;), /* 压缩 js (同样可以压缩 css) */ new webpack.optimize.UglifyJsPlugin(&#123; compress: &#123; warnings: false &#125; &#125;), new webpack.optimize.OccurrenceOrderPlugin(), /* 将 css 文件分离出来 */ new ExtractTextPlugin(utils.assetsPath('css/[name].[contenthash].css')), /* 构建要输出的 index.html 文件， HtmlWebpackPlugin 可以生成一个 html 并且在其中插入你构建生成的资源 */ new HtmlWebpackPlugin(&#123; filename: config.build.index, // 生成的 html 文件名 template: 'index.html', // 使用的模板 inject: true, // 是否注入 html (有多重注入方式，可以选择注入的位置) minify: &#123; // 压缩的方式 removeComments: true, collapseWhitespace: true, removeAttributeQuotes: true // 更多参数可查看 https://github.com/kangax/html-minifier#options-quick-reference &#125;, chunksSortMode: 'dependency' &#125;), // 此处增加 @OYsun 童鞋补充 // CommonsChunkPlugin用于生成在入口点之间共享的公共模块（比如jquery，vue）的块并将它们分成独立的包。而为什么要new两次这个插件，这是一个很经典的bug的解决方案，在webpack的一个issues有过深入的讨论webpack/webpack#1315 .----为了将项目中的第三方依赖代码抽离出来，官方文档上推荐使用这个插件，当我们在项目里实际使用之后，发现一旦更改了 app.js 内的代码，vendor.js 的 hash 也会改变，那么下次上线时，用户仍然需要重新下载 vendor.js 与 app.js new webpack.optimize.CommonsChunkPlugin(&#123; name: 'vendor', minChunks: function (module, count) &#123; // 依赖的 node_modules 文件会被提取到 vendor 中 return ( module.resource &amp;&amp; /\\.js$/.test(module.resource) &amp;&amp; module.resource.indexOf( path.join(__dirname, '../node_modules') ) === 0 ) &#125; &#125;), new webpack.optimize.CommonsChunkPlugin(&#123; name: 'manifest', chunks: ['vendor'] &#125;) ]&#125;)/* 开启 gzip 的情况下使用下方的配置 */if (config.build.productionGzip) &#123; /* 加载 compression-webpack-plugin 插件 */ var CompressionWebpackPlugin = require('compression-webpack-plugin') /* 向webpackconfig.plugins中加入下方的插件 */ webpackConfig.plugins.push( /* 使用 compression-webpack-plugin 插件进行压缩 */ new CompressionWebpackPlugin(&#123; asset: '[path].gz[query]', algorithm: 'gzip', test: new RegExp( '\\\\.(' + config.build.productionGzipExtensions.join('|') + ')$' ), threshold: 10240, minRatio: 0.8 &#125;) )&#125;module.exports = webpackConfig 总结至此 ～ 我们的 vue-cli#2.0 webpack 配置分析文件就讲解完毕 ～ 对于一些插件的详细 options 我们没有进行讲解，感兴趣的同学可以去 npm 商店搜索对应插件查看 options ~ 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<p><strong>前言</strong></p>\n<blockquote>\n<p>作为 Vue 的使用者我们对于 vue-cli 都很熟悉，但是对它的 webpack 配置我们可能关注甚少，今天我们为大家带来 vue-cli#2.0 的 webpack 配置分析</p>\n</blockquote>\n<p>vue-cli 的简介、安装我们不在这里赘述，对它还不熟悉的同学可以直接访问 vue-cli 查看</p>\n<p>目录结构<br><a id=\"more\"></a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── build</span><br><span class=\"line\">│   ├── build.js</span><br><span class=\"line\">│   ├── check-versions.js</span><br><span class=\"line\">│   ├── dev-client.js</span><br><span class=\"line\">│   ├── dev-server.js</span><br><span class=\"line\">│   ├── utils.js</span><br><span class=\"line\">│   ├── webpack.base.conf.js</span><br><span class=\"line\">│   ├── webpack.dev.conf.js</span><br><span class=\"line\">│   └── webpack.prod.conf.js</span><br><span class=\"line\">├── config</span><br><span class=\"line\">│   ├── dev.env.js</span><br><span class=\"line\">│   ├── index.js</span><br><span class=\"line\">│   └── prod.env.js</span><br><span class=\"line\">├── index.html</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── src</span><br><span class=\"line\">│   ├── App.vue</span><br><span class=\"line\">│   ├── assets</span><br><span class=\"line\">│   │   └── logo.png</span><br><span class=\"line\">│   ├── components</span><br><span class=\"line\">│   │   └── Hello.vue</span><br><span class=\"line\">│   └── main.js</span><br><span class=\"line\">└── static</span><br></pre></td></tr></table></figure>\n<p>本篇文章的主要关注点在</p>\n<p>build - 编译任务的代码</p>\n<p>config - webpack 的配置文件</p>\n<p>package.json - 项目的基本信息</p>\n<p>入口</p>\n<p>从 package.json 中我们可以看到</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"dev\": \"node build/dev-server.js\",</span><br><span class=\"line\">    \"build\": \"node build/build.js\",</span><br><span class=\"line\">    \"lint\": \"eslint --ext .js,.vue src\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们执行 npm run dev / npm run build 时运行的是 node build/dev-server.js 或 node build/build.js</p>\n<h3 id=\"dev-server-js\"><a href=\"#dev-server-js\" class=\"headerlink\" title=\"dev-server.js\"></a><strong>dev-server.js</strong></h3><p>让我们先从 build/dev-server.js 入手</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./check-versions'</span>)() <span class=\"comment\">// 检查 Node 和 npm 版本</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>) <span class=\"comment\">// 获取 config/index.js 的默认配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">** 如果 Node 的环境无法判断当前是 dev / product 环境</span></span><br><span class=\"line\"><span class=\"comment\">** 使用 config.dev.env.NODE_ENV 作为当前的环境</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!process.env.NODE_ENV) process.env.NODE_ENV = <span class=\"built_in\">JSON</span>.parse(config.dev.env.NODE_ENV)</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>) <span class=\"comment\">// 使用 NodeJS 自带的文件路径工具</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>) <span class=\"comment\">// 使用 express</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>) <span class=\"comment\">// 使用 webpack</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> opn = <span class=\"built_in\">require</span>(<span class=\"string\">'opn'</span>) <span class=\"comment\">// 一个可以强制打开浏览器并跳转到指定 url 的插件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> proxyMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">'http-proxy-middleware'</span>) <span class=\"comment\">// 使用 proxyTable </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.dev.conf'</span>) <span class=\"comment\">// 使用 dev 环境的 webpack 配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 如果没有指定运行端口，使用 config.dev.port 作为运行端口 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> port = process.env.PORT || config.dev.port</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 使用 config.dev.proxyTable 的配置作为 proxyTable 的代理配置 */</span></span><br><span class=\"line\"><span class=\"comment\">/* 项目参考 https://github.com/chimurai/http-proxy-middleware */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> proxyTable = config.dev.proxyTable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 使用 express 启动一个服务 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express()</span><br><span class=\"line\"><span class=\"keyword\">var</span> compiler = webpack(webpackConfig) <span class=\"comment\">// 启动 webpack 进行编译</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 启动 webpack-dev-middleware，将 编译后的文件暂存到内存中 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> devMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-dev-middleware'</span>)(compiler, &#123;</span><br><span class=\"line\">  publicPath: webpackConfig.output.publicPath,</span><br><span class=\"line\">  stats: &#123;</span><br><span class=\"line\">    colors: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    chunks: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 启动 webpack-hot-middleware，也就是我们常说的 Hot-reload */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hotMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-hot-middleware'</span>)(compiler)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 当 html-webpack-plugin 模板更新的时候强制刷新页面 */</span></span><br><span class=\"line\">compiler.plugin(<span class=\"string\">'compilation'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">compilation</span>) </span>&#123;</span><br><span class=\"line\">  compilation.plugin(<span class=\"string\">'html-webpack-plugin-after-emit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data, cb</span>) </span>&#123;</span><br><span class=\"line\">    hotMiddleware.publish(&#123; <span class=\"attr\">action</span>: <span class=\"string\">'reload'</span> &#125;)</span><br><span class=\"line\">    cb()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 proxyTable 中的请求配置挂在到启动的 express 服务上</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(proxyTable).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> options = proxyTable[context]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> options === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">    options = &#123; <span class=\"attr\">target</span>: options &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  app.use(proxyMiddleware(context, options))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 connect-history-api-fallback 匹配资源，如果不匹配就可以重定向到指定地址</span></span><br><span class=\"line\">app.use(<span class=\"built_in\">require</span>(<span class=\"string\">'connect-history-api-fallback'</span>)())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将暂存到内存中的 webpack 编译后的文件挂在到 express 服务上</span></span><br><span class=\"line\">app.use(devMiddleware)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 Hot-reload 挂在到 express 服务上并且输出相关的状态、错误</span></span><br><span class=\"line\">app.use(hotMiddleware)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拼接 static 文件夹的静态资源路径</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)</span><br><span class=\"line\"><span class=\"comment\">// 为静态资源提供响应服务</span></span><br><span class=\"line\">app.use(staticPath, express.static(<span class=\"string\">'./static'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 让我们这个 express 服务监听 port 的请求，并且将此服务作为 dev-server.js 的接口暴露</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = app.listen(port, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> uri = <span class=\"string\">'http://localhost:'</span> + port</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Listening at '</span> + uri + <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果不是测试环境，自动打开浏览器并跳到我们的开发地址</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'testing'</span>) &#123;</span><br><span class=\"line\">    opn(uri)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"webpack-dev-conf-js\"><a href=\"#webpack-dev-conf-js\" class=\"headerlink\" title=\"webpack.dev.conf.js\"></a><strong>webpack.dev.conf.js</strong></h3><p>刚刚我们在 dev-server.js 中用到了 webpack.dev.conf.js 和 index.js，我们先来看一下 webpack.dev.conf.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>) <span class=\"comment\">// 同样的使用了 config/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>) <span class=\"comment\">// 使用 webpack</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>) <span class=\"comment\">// 使用 webpack 配置合并插件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>) <span class=\"comment\">// 使用一些小工具</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> baseWebpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.base.conf'</span>) <span class=\"comment\">// 加载 webpack.base.conf</span></span><br><span class=\"line\"><span class=\"comment\">/* 使用 html-webpack-plugin 插件，这个插件可以帮我们自动生成 html 并且注入到 .html 文件中 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 Hol-reload 相对路径添加到 webpack.base.conf 的 对应 entry 前</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(baseWebpackConfig.entry).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  baseWebpackConfig.entry[name] = [<span class=\"string\">'./build/dev-client'</span>].concat(baseWebpackConfig.entry[name])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 将我们 webpack.dev.conf.js 的配置和 webpack.base.conf.js 的配置合并 */</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(baseWebpackConfig, &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 styleLoaders</span></span><br><span class=\"line\">    loaders: utils.styleLoaders(&#123; <span class=\"attr\">sourceMap</span>: config.dev.cssSourceMap &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 使用 #eval-source-map 模式作为开发工具，此配置可参考 DDFE 往期文章详细了解</span></span><br><span class=\"line\">  devtool: <span class=\"string\">'#eval-source-map'</span>,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">/* definePlugin 接收字符串插入到代码当中, 所以你需要的话可以写上 JS 的字符串 */</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: config.dev.env</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// 参考项目 https://github.com/glenjamin/webpack-hot-middleware#installation--usage</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.OccurenceOrderPlugin(),</span><br><span class=\"line\">    <span class=\"comment\">/* HotModule 插件在页面进行变更的时候只会重回对应的页面模块，不会重绘整个 html 文件 */</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class=\"line\">    <span class=\"comment\">/* 使用了 NoErrorsPlugin 后页面中的报错不会阻塞，但是会在编译结束后报错 */</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.NoErrorsPlugin(),</span><br><span class=\"line\">    <span class=\"comment\">// 参考项目 https://github.com/ampedandwired/html-webpack-plugin</span></span><br><span class=\"line\">    <span class=\"comment\">/* 将 index.html 作为入口，注入 html 代码后生成 index.html文件 */</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"webpack-base-conf-js\"><a href=\"#webpack-base-conf-js\" class=\"headerlink\" title=\"webpack.base.conf.js\"></a><strong>webpack.base.conf.js</strong></h3><p>我们看到在 webpack.dev.conf.js 中又引入了 webpack.base.conf.js， 它看起来很重要的样子，所以我们只能在下一章来看看 config/index.js 了 （摊手）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>) <span class=\"comment\">// 使用 NodeJS 自带的文件路径插件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>) <span class=\"comment\">// 引入 config/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>) <span class=\"comment\">// 引入一些小工具</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> projectRoot = path.resolve(__dirname, <span class=\"string\">'../'</span>) <span class=\"comment\">// 拼接我们的工作区路径为一个绝对路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 将 NodeJS 环境作为我们的编译环境 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> env = process.env.NODE_ENV</span><br><span class=\"line\"><span class=\"comment\">/* 是否在 dev 环境下开启 cssSourceMap ，在 config/index.js 中可配置 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cssSourceMapDev = (env === <span class=\"string\">'development'</span> &amp;&amp; config.dev.cssSourceMap)</span><br><span class=\"line\"><span class=\"comment\">/* 是否在 production 环境下开启 cssSourceMap ，在 config/index.js 中可配置 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cssSourceMapProd = (env === <span class=\"string\">'production'</span> &amp;&amp; config.build.productionSourceMap)</span><br><span class=\"line\"><span class=\"comment\">/* 最终是否使用 cssSourceMap */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> useCssSourceMap = cssSourceMapDev || cssSourceMapProd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/main.js'</span> <span class=\"comment\">// 编译文件入口</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: config.build.assetsRoot, <span class=\"comment\">// 编译输出的静态资源根路径</span></span><br><span class=\"line\">    publicPath: process.env.NODE_ENV === <span class=\"string\">'production'</span> ? config.build.assetsPublicPath : config.dev.assetsPublicPath, <span class=\"comment\">// 正式发布环境下编译输出的上线路径的根路径</span></span><br><span class=\"line\">    filename: <span class=\"string\">'[name].js'</span> <span class=\"comment\">// 编译输出的文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自动补全的扩展名</span></span><br><span class=\"line\">    extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.vue'</span>],</span><br><span class=\"line\">    <span class=\"comment\">// 不进行自动补全或处理的文件或者文件夹</span></span><br><span class=\"line\">    fallback: [path.join(__dirname, <span class=\"string\">'../node_modules'</span>)],</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">\t  <span class=\"comment\">// 默认路径代理，例如 import Vue from 'vue'，会自动到 'vue/dist/vue.common.js'中寻找</span></span><br><span class=\"line\">      <span class=\"string\">'vue$'</span>: <span class=\"string\">'vue/dist/vue.common.js'</span>,</span><br><span class=\"line\">      <span class=\"string\">'src'</span>: path.resolve(__dirname, <span class=\"string\">'../src'</span>),</span><br><span class=\"line\">      <span class=\"string\">'assets'</span>: path.resolve(__dirname, <span class=\"string\">'../src/assets'</span>),</span><br><span class=\"line\">      <span class=\"string\">'components'</span>: path.resolve(__dirname, <span class=\"string\">'../src/components'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolveLoader: &#123;</span><br><span class=\"line\">    fallback: [path.join(__dirname, <span class=\"string\">'../node_modules'</span>)]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    preLoaders: [</span><br><span class=\"line\">      <span class=\"comment\">// 预处理的文件及使用的 loader</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'eslint'</span>,</span><br><span class=\"line\">        include: projectRoot,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'eslint'</span>,</span><br><span class=\"line\">        include: projectRoot,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      <span class=\"comment\">// 需要处理的文件及使用的 loader</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'vue'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">        include: projectRoot,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.json$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'json'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'url'</span>,</span><br><span class=\"line\">        query: &#123;</span><br><span class=\"line\">          limit: <span class=\"number\">10000</span>,</span><br><span class=\"line\">          name: utils.assetsPath(<span class=\"string\">'img/[name].[hash:7].[ext]'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'url'</span>,</span><br><span class=\"line\">        query: &#123;</span><br><span class=\"line\">          limit: <span class=\"number\">10000</span>,</span><br><span class=\"line\">          name: utils.assetsPath(<span class=\"string\">'fonts/[name].[hash:7].[ext]'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  eslint: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// eslint 代码检查配置工具</span></span><br><span class=\"line\">    formatter: <span class=\"built_in\">require</span>(<span class=\"string\">'eslint-friendly-formatter'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  vue: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// .vue 文件配置 loader 及工具 (autoprefixer)</span></span><br><span class=\"line\">    loaders: utils.cssLoaders(&#123; <span class=\"attr\">sourceMap</span>: useCssSourceMap &#125;),</span><br><span class=\"line\">    postcss: [</span><br><span class=\"line\">      <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)(&#123;</span><br><span class=\"line\">        browsers: [<span class=\"string\">'last 2 versions'</span>]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"config-index-js\"><a href=\"#config-index-js\" class=\"headerlink\" title=\"config/index.js\"></a>config/index.js</h3><p>终于分析完了 webpack.base.conf.js，来让我们看一下 config/index.js</p>\n<p>index.js 中有 dev 和 production 两种环境的配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  build: &#123; <span class=\"comment\">// production 环境</span></span><br><span class=\"line\">    env: <span class=\"built_in\">require</span>(<span class=\"string\">'./prod.env'</span>), <span class=\"comment\">// 使用 config/prod.env.js 中定义的编译环境</span></span><br><span class=\"line\">    index: path.resolve(__dirname, <span class=\"string\">'../dist/index.html'</span>), <span class=\"comment\">// 编译输入的 index.html 文件</span></span><br><span class=\"line\">    assetsRoot: path.resolve(__dirname, <span class=\"string\">'../dist'</span>), <span class=\"comment\">// 编译输出的静态资源路径</span></span><br><span class=\"line\">    assetsSubDirectory: <span class=\"string\">'static'</span>, <span class=\"comment\">// 编译输出的二级目录</span></span><br><span class=\"line\">    assetsPublicPath: <span class=\"string\">'/'</span>, <span class=\"comment\">// 编译发布的根目录，可配置为资源服务器域名或 CDN 域名</span></span><br><span class=\"line\">    productionSourceMap: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否开启 cssSourceMap</span></span><br><span class=\"line\">    <span class=\"comment\">// Gzip off by default as many popular static hosts such as</span></span><br><span class=\"line\">    <span class=\"comment\">// Surge or Netlify already gzip all static assets for you.</span></span><br><span class=\"line\">    <span class=\"comment\">// Before setting to `true`, make sure to:</span></span><br><span class=\"line\">    <span class=\"comment\">// npm install --save-dev compression-webpack-plugin</span></span><br><span class=\"line\">    productionGzip: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否开启 gzip</span></span><br><span class=\"line\">    productionGzipExtensions: [<span class=\"string\">'js'</span>, <span class=\"string\">'css'</span>] <span class=\"comment\">// 需要使用 gzip 压缩的文件扩展名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  dev: &#123; <span class=\"comment\">// dev 环境</span></span><br><span class=\"line\">    env: <span class=\"built_in\">require</span>(<span class=\"string\">'./dev.env'</span>), <span class=\"comment\">// 使用 config/dev.env.js 中定义的编译环境</span></span><br><span class=\"line\">    port: <span class=\"number\">8080</span>, <span class=\"comment\">// 运行测试页面的端口</span></span><br><span class=\"line\">    assetsSubDirectory: <span class=\"string\">'static'</span>, <span class=\"comment\">// 编译输出的二级目录</span></span><br><span class=\"line\">    assetsPublicPath: <span class=\"string\">'/'</span>, <span class=\"comment\">// 编译发布的根目录，可配置为资源服务器域名或 CDN 域名</span></span><br><span class=\"line\">    proxyTable: &#123;&#125;, <span class=\"comment\">// 需要 proxyTable 代理的接口（可跨域）</span></span><br><span class=\"line\">    cssSourceMap: <span class=\"literal\">false</span> <span class=\"comment\">// 是否开启 cssSourceMap(因为一些 bug 此选项默认关闭，详情可参考 https://github.com/webpack/css-loader#sourcemaps)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，我们的 npm run dev 命令就讲解完毕，下面让我们来看一看执行 npm run build 命令时发生了什么 ～</p>\n<h3 id=\"build-js\"><a href=\"#build-js\" class=\"headerlink\" title=\"build.js\"></a><strong>build.js</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./check-versions'</span>)() <span class=\"comment\">// 检查 Node 和 npm 版本</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'shelljs/global'</span>) <span class=\"comment\">// 使用了 shelljs 插件，可以让我们在 node 环境的 js 中使用 shell</span></span><br><span class=\"line\">env.NODE_ENV = <span class=\"string\">'production'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>) <span class=\"comment\">// 不再赘述</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>) <span class=\"comment\">// 加载 config.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ora = <span class=\"built_in\">require</span>(<span class=\"string\">'ora'</span>) <span class=\"comment\">// 一个很好看的 loading 插件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>) <span class=\"comment\">// 加载 webpack</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.prod.conf'</span>) <span class=\"comment\">// 加载 webpack.prod.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"comment\">//  输出提示信息 ～ 提示用户请在 http 服务下查看本页面，否则为空白页</span></span><br><span class=\"line\">  <span class=\"string\">'  Tip:\\n'</span> +</span><br><span class=\"line\">  <span class=\"string\">'  Built files are meant to be served over an HTTP server.\\n'</span> +</span><br><span class=\"line\">  <span class=\"string\">'  Opening index.html over file:// won\\'t work.\\n'</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> spinner = ora(<span class=\"string\">'building for production...'</span>) <span class=\"comment\">// 使用 ora 打印出 loading + log</span></span><br><span class=\"line\">spinner.start() <span class=\"comment\">// 开始 loading 动画</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 拼接编译输出文件路径 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> assetsPath = path.join(config.build.assetsRoot, config.build.assetsSubDirectory)</span><br><span class=\"line\"><span class=\"comment\">/* 删除这个文件夹 （递归删除） */</span></span><br><span class=\"line\">rm(<span class=\"string\">'-rf'</span>, assetsPath)</span><br><span class=\"line\"><span class=\"comment\">/* 创建此文件夹 */</span> </span><br><span class=\"line\">mkdir(<span class=\"string\">'-p'</span>, assetsPath)</span><br><span class=\"line\"><span class=\"comment\">/* 复制 static 文件夹到我们的编译输出目录 */</span></span><br><span class=\"line\">cp(<span class=\"string\">'-R'</span>, <span class=\"string\">'static/*'</span>, assetsPath)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  开始 webpack 的编译</span></span><br><span class=\"line\">webpack(webpackConfig, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, stats</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 编译成功的回调函数</span></span><br><span class=\"line\">  spinner.stop()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">  process.stdout.write(stats.toString(&#123;</span><br><span class=\"line\">    colors: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    modules: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    children: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    chunks: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    chunkModules: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;) + <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">  &#125;) + <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"webpack-prod-conf-js\"><a href=\"#webpack-prod-conf-js\" class=\"headerlink\" title=\"webpack.prod.conf.js\"></a><strong>webpack.prod.conf.js</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>) </span><br><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>) <span class=\"comment\">// 加载 confi.index.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>) <span class=\"comment\">// 使用一些小工具</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>) <span class=\"comment\">// 加载 webpack</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>) <span class=\"comment\">// 加载 webpack 配置合并工具</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> baseWebpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.base.conf'</span>) <span class=\"comment\">// 加载 webpack.base.conf.js</span></span><br><span class=\"line\"><span class=\"comment\">/* 一个 webpack 扩展，可以提取一些代码并且将它们和文件分离开 */</span> </span><br><span class=\"line\"><span class=\"comment\">/* 如果我们想将 webpack 打包成一个文件 css js 分离开，那我们需要这个插件 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"comment\">/* 一个可以插入 html 并且创建新的 .html 文件的插件 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> env = config.build.env</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 合并 webpack.base.conf.js */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 使用的 loader */</span></span><br><span class=\"line\">    loaders: utils.styleLoaders(&#123; <span class=\"attr\">sourceMap</span>: config.build.productionSourceMap, <span class=\"attr\">extract</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">/* 是否使用 #source-map 开发工具，更多信息可以查看 DDFE 往期文章 */</span></span><br><span class=\"line\">  devtool: config.build.productionSourceMap ? <span class=\"string\">'#source-map'</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 编译输出目录 */</span></span><br><span class=\"line\">    path: config.build.assetsRoot,</span><br><span class=\"line\">    <span class=\"comment\">/* 编译输出文件名 */</span></span><br><span class=\"line\">    filename: utils.assetsPath(<span class=\"string\">'js/[name].[chunkhash].js'</span>), <span class=\"comment\">// 我们可以在 hash 后加 :6 决定使用几位 hash 值</span></span><br><span class=\"line\">    <span class=\"comment\">// 没有指定输出名的文件输出的文件名</span></span><br><span class=\"line\">    chunkFilename: utils.assetsPath(<span class=\"string\">'js/[id].[chunkhash].js'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  vue: &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 编译 .vue 文件时使用的 loader */</span></span><br><span class=\"line\">    loaders: utils.cssLoaders(&#123;</span><br><span class=\"line\">      sourceMap: config.build.productionSourceMap,</span><br><span class=\"line\">      extract: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">/* 使用的插件 */</span></span><br><span class=\"line\">    <span class=\"comment\">/* definePlugin 接收字符串插入到代码当中, 所以你需要的话可以写上 JS 的字符串 */</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: env</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">/* 压缩 js (同样可以压缩 css) */</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">      compress: &#123;</span><br><span class=\"line\">        warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.OccurrenceOrderPlugin(),</span><br><span class=\"line\">    <span class=\"comment\">/* 将 css 文件分离出来 */</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(utils.assetsPath(<span class=\"string\">'css/[name].[contenthash].css'</span>)),</span><br><span class=\"line\">    <span class=\"comment\">/* 构建要输出的 index.html 文件， HtmlWebpackPlugin 可以生成一个 html 并且在其中插入你构建生成的资源 */</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: config.build.index, <span class=\"comment\">// 生成的 html 文件名</span></span><br><span class=\"line\">      template: <span class=\"string\">'index.html'</span>, <span class=\"comment\">// 使用的模板</span></span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否注入 html (有多重注入方式，可以选择注入的位置)</span></span><br><span class=\"line\">      minify: &#123; <span class=\"comment\">// 压缩的方式</span></span><br><span class=\"line\">        removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        collapseWhitespace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        removeAttributeQuotes: <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"comment\">// 更多参数可查看 https://github.com/kangax/html-minifier#options-quick-reference</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      chunksSortMode: <span class=\"string\">'dependency'</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 此处增加 @OYsun 童鞋补充</span></span><br><span class=\"line\">    <span class=\"comment\">// CommonsChunkPlugin用于生成在入口点之间共享的公共模块（比如jquery，vue）的块并将它们分成独立的包。而为什么要new两次这个插件，这是一个很经典的bug的解决方案，在webpack的一个issues有过深入的讨论webpack/webpack#1315 .----为了将项目中的第三方依赖代码抽离出来，官方文档上推荐使用这个插件，当我们在项目里实际使用之后，发现一旦更改了 app.js 内的代码，vendor.js 的 hash 也会改变，那么下次上线时，用户仍然需要重新下载 vendor.js 与 app.js</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">'vendor'</span>,</span><br><span class=\"line\">      minChunks: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">module, count</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 依赖的 node_modules 文件会被提取到 vendor 中</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">          <span class=\"built_in\">module</span>.resource &amp;&amp;</span><br><span class=\"line\">          /\\.js$/.test(<span class=\"built_in\">module</span>.resource) &amp;&amp;</span><br><span class=\"line\">          <span class=\"built_in\">module</span>.resource.indexOf(</span><br><span class=\"line\">            path.join(__dirname, <span class=\"string\">'../node_modules'</span>)</span><br><span class=\"line\">          ) === <span class=\"number\">0</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">'manifest'</span>,</span><br><span class=\"line\">      chunks: [<span class=\"string\">'vendor'</span>]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 开启 gzip 的情况下使用下方的配置 */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (config.build.productionGzip) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 加载 compression-webpack-plugin 插件 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> CompressionWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'compression-webpack-plugin'</span>)</span><br><span class=\"line\">  <span class=\"comment\">/* 向webpackconfig.plugins中加入下方的插件 */</span></span><br><span class=\"line\">  webpackConfig.plugins.push(</span><br><span class=\"line\">    <span class=\"comment\">/* 使用 compression-webpack-plugin 插件进行压缩 */</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> CompressionWebpackPlugin(&#123;</span><br><span class=\"line\">      asset: <span class=\"string\">'[path].gz[query]'</span>,</span><br><span class=\"line\">      algorithm: <span class=\"string\">'gzip'</span>,</span><br><span class=\"line\">      test: <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(</span><br><span class=\"line\">        <span class=\"string\">'\\\\.('</span> +</span><br><span class=\"line\">        config.build.productionGzipExtensions.join(<span class=\"string\">'|'</span>) +</span><br><span class=\"line\">        <span class=\"string\">')$'</span></span><br><span class=\"line\">      ),</span><br><span class=\"line\">      threshold: <span class=\"number\">10240</span>,</span><br><span class=\"line\">      minRatio: <span class=\"number\">0.8</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = webpackConfig</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>至此 ～ 我们的 vue-cli#2.0 webpack 配置分析文件就讲解完毕 ～</p>\n<p>对于一些插件的详细 options 我们没有进行讲解，感兴趣的同学可以去 npm 商店搜索对应插件查看 options ~</p>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n\n","excerpt":"前言 作为 Vue 的使用者我们对于 vue-cli 都很熟悉，但是对它的 webpack 配置我们可能关注甚少，今天我们为大家带来 vue-cli#2.0 的 webpack 配置分析 vue-cli 的简介、安装我们不在这里赘述，对它还不熟悉的同学可以直接访问 vue-cli 查看 目录结构","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"},{"name":"vue","slug":"vue","permalink":"http://www.ding1996.cn/tags/vue/"}]},{"title":"javascript设计模式 ① 正确使用面向对象编程的姿势!!!","date":"2017-04-26T01:52:08.000Z","path":"2017/04/26/it-20170426js/","text":"javascript是一门弱语言，他有着分同一般的灵活性使它迅速的成为几乎人人必会的一门语言，but，你们使用的姿势真的正确吗？ 在以前的开发过程当中，老板：给我加个验证用户邮箱、验证用户短信…功能！ 123function checkMessage()&#123;...&#125;function checkEmail()&#123;...&#125;function ... //茫茫多的函数 这样写好了之后 function 是全局的变量，那么是全局的就难免会对项目javascript环境造成污染，可能会对其他同事造成影响，我们首先要考虑会不会影响别人，如果别人重名对你的checkMessage覆盖，那么这样的BUG是很难发现的。为了不造成太多的全局污染，我们可以这样写： 12345var checkObject = &#123; checkMessage:function()&#123;&#125;, checkEmail:function()&#123;&#125;, ...&#125; 首先说明，并不是这样写就不会造成污染了，checkObject依旧是全局变量，那么好处在哪里呢？想一下如果Jquery的$被覆盖了，那么我们页面的 1$.each | $.extends | $(#id) | $... 都失效了，那么我们很容易定位问题: Jquery出问题了！checkObject也是一样,当checkObject出问题了，我们很容易定位错误。 1调用：checkObject.checkMessage() 即可 那么问题又来了：如果有同事用我的checkObject搞一些事情呢？它可以直接用我的方法么？当然可以，问题是，你买了一本书你愿意别人乱写乱画么？我们可以改造一下： 1234567var checkObject = function()&#123; return &#123; checkMessage:function()&#123;&#125;, checkEmail:function()&#123;&#125;, ... &#125;&#125; 我们把方法通过function的调用返回，这样别人可以这样用 ： 12var check = checkObject();check.checkEmail(); 我们可以再完善一下，把checkObject看成java的类，checkMessage,checkEmail看成java的public 公有方法,既然看成类了，我们可以把checkObject写成大写CheckObject 12345var CheckObject = function()&#123; this.checkMessage = function()&#123;&#125;, this.checkEmail = function()&#123;&#125;, ...&#125; 别人调用: 12var check = new CheckObject(); //既然是一个类了，就要 new 来实例化了check.checkEmail(); 每一次通过new创建新对象的时候，新创建的对象都会对类this上的属性进行复制，你定义了两个那么就复制两次，那么再更多呢？是不是感觉有些奢侈呢，考虑我们可以运用javascript的原型prototype来创建它： 123456var CheckObject = function()&#123;&#125;CheckObject.prototype.checkMessage = function()&#123;&#125;,CheckObject.prototype.checkEmail = function()&#123;&#125;,... 你嫌麻烦？ 12345678var CheckObject = function()&#123;&#125;CheckObject.prototype&#123;checkMessage : function()&#123;&#125;,checkEmail : function()&#123;&#125;,...&#125; 这样我们的方法都复制到CheckObject的原型连上去了，创建出来的对象都是通过prototype依次寻找，都绑定在CheckObject的原型上proto 随便看一下Jquery的原型链，是不是很熟悉的方法呢？同志们是否好奇Jquery的方法是如何链式调用的呢？很简单，我来模拟一下 1234567891011var CheckObject = function()&#123;&#125;CheckObject.prototype&#123;checkMessage : function()&#123; ... return this &#125;,checkEmail : function()&#123; ... return this &#125;,...CheckObject check = new CheckObject();check.checkMessage().checkEmail(); 就这么简单，我们只需要将this指代的当前对象全部返回即可。 咳咳，言归正传，回到面向对象编程的课题上 java中有 private声明的私有变量、 有通过public的getter setter方法进行通信，有static修饰的静态变量，静态方法，有构造器，那么javascript可以使用这样的设计模式么？可以，跟我往下看: 我们去商店买烟 12345678910111213141516171819202122232425262728293031323334353637383940414243var Smoke = function(id,name)&#123; //私有属性 var num = 0; //对象的公有属性 （需要new） this.id = id; //私有方法 function checkID()&#123; return true&#125;; //公有 setter getter 构造函数 this.setName = function(name)&#123; this.name = name; &#125; this.getName = function()&#123; return this.name; &#125; //对象的公有属性 （需要new） this.information = function()&#123; //只有在Smoke内部才能调用checkID() if(checkID()) return this.name+'香烟'+'订单号 :'+this.id &#125; &#125;Smock.prototype = &#123; money:'10元', //公有属性（不需要new） 直接Smoke.money[想没想到Array的length?] other:function()&#123;&#125;&#125;var smoke = new Smoke(994857,'煊赫门');smoke.information(); //\"undefined香烟订单号 :994857\" ps:因为我们没对Smoke的name属性赋值smoke.setName('煊赫门'); //我们赋值smoke.information(); //\"煊赫门香烟订单号 :994857\"smoke.num; //undefined ps:很明显他是私有属性smoke.checkID();//error is not function ps:很明显私有方法如果我们没有newvar smoke = Smoke(994857,'煊赫门');smoke.information(); //Uncaught TypeError: Cannot read property 'information' of undefined纳尼报错了？smoke //undefindsmoke.money; //10元 (好像明白了什么......) 别急让我们看下window 1window.information(); // \"undefined香烟订单号 :994857\" 恍然大悟，因为new是可以对当前对象（Smoke)的this不停地赋值【上面讲过】，而上面的没有new相当于全局执行了Smoke() 所以是他的this 指向到 window去了！怎么避免这种无操作呢？我们在Smoke内部进行类型检查： 12345678910111213141516171819202122var Smoke = function(id,name)&#123; var num = 0; function checkID()&#123; return true&#125;; //判断this在执行过程中是不是属于Smoke，如果是说明是new过的 0.0 if(this instanceof Smoke)&#123; this.id = id; this.setName = function(name)&#123; this.name = name; &#125; this.getName = function()&#123; return this.name; &#125; //对象的公有属性 （需要new） this.information = function()&#123; //只有在Smoke内部才能调用checkID() if(checkID()) return this.name+'香烟'+'订单号 :'+this.id &#125; &#125;else&#123; return new Smoke(id,name);//内部重新new一个 0.0 &#125;&#125; 看完了么，感觉爽不，是不是感觉就是在写java呢，其实javascript就是灵活在这里，这只是javascript一种常用的面向对象设计模式，后面我会将更多的设计模式，这些设计模式都是经过前人无数心血总结出来给我们的，我们为什么不用呢？ 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<p>javascript是一门弱语言，他有着分同一般的灵活性使它迅速的成为几乎人人必会的一门语言，but，你们使用的姿势真的正确吗？</p>\n<p>在以前的开发过程当中，老板：给我加个验证用户邮箱、验证用户短信…功能！</p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkMessage</span>(<span class=\"params\"></span>)</span>&#123;...&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkEmail</span>(<span class=\"params\"></span>)</span>&#123;...&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> ... //茫茫多的函数</span></span><br></pre></td></tr></table></figure>\n<p>这样写好了之后 function 是全局的变量，那么是全局的就难免会对项目javascript环境造成污染，可能会对其他同事造成影响，我们首先要考虑会不会影响别人，如果别人重名对你的checkMessage覆盖，那么这样的BUG是很难发现的。为了不造成太多的全局污染，我们可以这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> checkObject = &#123;</span><br><span class=\"line\">    checkMessage:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">    checkEmail:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先说明，并不是这样写就不会造成污染了，checkObject依旧是全局变量，那么好处在哪里呢？想一下如果Jquery的$被覆盖了，那么我们页面的</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.each | $.extends | $(#id) | $...</span><br></pre></td></tr></table></figure>\n<p>都失效了，那么我们很容易定位问题: Jquery出问题了！checkObject也是一样,当checkObject出问题了，我们很容易定位错误。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用：checkObject.checkMessage() 即可</span><br></pre></td></tr></table></figure>\n<p>那么问题又来了：如果有同事用我的checkObject搞一些事情呢？它可以直接用我的方法么？当然可以，问题是，你买了一本书你愿意别人乱写乱画么？我们可以改造一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> checkObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        checkMessage:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">        checkEmail:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们把方法通过function的调用返回，这样别人可以这样用 ：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> check = checkObject();</span><br><span class=\"line\">check.checkEmail();</span><br></pre></td></tr></table></figure>\n<p>我们可以再完善一下，把checkObject看成java的类，checkMessage,checkEmail看成java的public 公有方法,既然看成类了，我们可以把checkObject写成大写CheckObject</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CheckObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.checkMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.checkEmail = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>别人调用:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> check = <span class=\"keyword\">new</span> CheckObject(); <span class=\"comment\">//既然是一个类了，就要 new 来实例化了</span></span><br><span class=\"line\">check.checkEmail();</span><br></pre></td></tr></table></figure>\n<p>每一次通过new创建新对象的时候，新创建的对象都会对类this上的属性进行复制，你定义了两个那么就复制两次，那么再更多呢？是不是感觉有些奢侈呢，考虑我们可以运用javascript的原型prototype来创建它：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CheckObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">CheckObject.prototype.checkMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">CheckObject.prototype.checkEmail = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>你嫌麻烦？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CheckObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">CheckObject.prototype&#123;</span><br><span class=\"line\">checkMessage : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">checkEmail : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们的方法都复制到CheckObject的原型连上去了，创建出来的对象都是通过prototype依次寻找，都绑定在CheckObject的原型上<strong>proto</strong></p>\n<p><img src=\"https://dn-mhke0kuv.qbox.me/3adc2b183e7a22203dc2\" alt=\"\"></p>\n<p>随便看一下Jquery的原型链，是不是很熟悉的方法呢？<br>同志们是否好奇Jquery的方法是如何链式调用的呢？很简单，我来模拟一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CheckObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">CheckObject.prototype&#123;</span><br><span class=\"line\">checkMessage : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; ... return <span class=\"keyword\">this</span> &#125;,</span><br><span class=\"line\">checkEmail : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; ... return <span class=\"keyword\">this</span> &#125;,</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">CheckObject check = <span class=\"keyword\">new</span> CheckObject();</span><br><span class=\"line\">check.checkMessage().checkEmail();</span><br></pre></td></tr></table></figure>\n<p>就这么简单，我们只需要将this指代的当前对象全部返回即可。</p>\n<p>咳咳，言归正传，回到面向对象编程的课题上</p>\n<p>java中有 private声明的私有变量、 有通过public的getter setter方法进行通信，有static修饰的静态变量，静态方法，有构造器，那么javascript可以使用这样的设计模式么？可以，跟我往下看:</p>\n<p>我们去商店买烟</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Smoke = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id,name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//私有属性</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//对象的公有属性  （需要new）</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//私有方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkID</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//公有 setter getter 构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//对象的公有属性  （需要new）</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.information = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//只有在Smoke内部才能调用checkID() </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(checkID()) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name+<span class=\"string\">'香烟'</span>+<span class=\"string\">'订单号 :'</span>+<span class=\"keyword\">this</span>.id</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Smock.prototype = &#123;</span><br><span class=\"line\">    money:<span class=\"string\">'10元'</span>,  <span class=\"comment\">//公有属性（不需要new） 直接Smoke.money[想没想到Array的length?]</span></span><br><span class=\"line\">    other:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> smoke = <span class=\"keyword\">new</span> Smoke(<span class=\"number\">994857</span>,<span class=\"string\">'煊赫门'</span>);</span><br><span class=\"line\">smoke.information(); <span class=\"comment\">//\"undefined香烟订单号 :994857\" ps:因为我们没对Smoke的name属性赋值</span></span><br><span class=\"line\">smoke.setName(<span class=\"string\">'煊赫门'</span>); <span class=\"comment\">//我们赋值</span></span><br><span class=\"line\">smoke.information(); <span class=\"comment\">//\"煊赫门香烟订单号 :994857\"</span></span><br><span class=\"line\">smoke.num; <span class=\"comment\">//undefined ps:很明显他是私有属性</span></span><br><span class=\"line\">smoke.checkID();<span class=\"comment\">//error is not function ps:很明显私有方法</span></span><br><span class=\"line\">如果我们没有<span class=\"keyword\">new</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> smoke = Smoke(<span class=\"number\">994857</span>,<span class=\"string\">'煊赫门'</span>);</span><br><span class=\"line\">smoke.information(); <span class=\"comment\">//Uncaught TypeError: Cannot read property 'information' of undefined</span></span><br><span class=\"line\">纳尼报错了？</span><br><span class=\"line\"></span><br><span class=\"line\">smoke <span class=\"comment\">//undefind</span></span><br><span class=\"line\">smoke.money; <span class=\"comment\">//10元 (好像明白了什么......)</span></span><br></pre></td></tr></table></figure>\n<p>别急让我们看下window</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.information(); <span class=\"comment\">// \"undefined香烟订单号 :994857\"</span></span><br></pre></td></tr></table></figure>\n<p>恍然大悟，因为new是可以对当前对象（Smoke)的this不停地赋值【上面讲过】，而上面的没有new相当于全局执行了Smoke() 所以是他的this 指向到 window去了！<br>怎么避免这种无操作呢？我们在Smoke内部进行类型检查：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Smoke = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id,name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkID</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//判断this在执行过程中是不是属于Smoke，如果是说明是new过的  0.0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> Smoke)&#123; </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//对象的公有属性  （需要new）</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.information = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//只有在Smoke内部才能调用checkID() </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(checkID()) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name+<span class=\"string\">'香烟'</span>+<span class=\"string\">'订单号 :'</span>+<span class=\"keyword\">this</span>.id</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Smoke(id,name);<span class=\"comment\">//内部重新new一个  0.0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看完了么，感觉爽不，是不是感觉就是在写java呢，其实javascript就是灵活在这里，这只是javascript一种常用的面向对象设计模式，后面我会将更多的设计模式，这些设计模式都是经过前人无数心血总结出来给我们的，我们为什么不用呢？</p>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n","excerpt":"javascript是一门弱语言，他有着分同一般的灵活性使它迅速的成为几乎人人必会的一门语言，but，你们使用的姿势真的正确吗？ 在以前的开发过程当中，老板：给我加个验证用户邮箱、验证用户短信…功能！","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"Mock 平台 - Easy Mock 在线数据模拟平台","date":"2017-04-26T01:28:15.000Z","path":"2017/04/26/it-js-mock/","text":"活儿好又性感的在线 Mock 平台 - Easy Mock介绍 什么是 Easy Mock Easy Mock 是一个极其简单、高效、\b可视化、并且能快速生成模拟数据的在线 mock 服务。以项目管理的方式组织 Mock List，能帮助我们更好的管理 Mock 数据，不怕丢失。你问我为什么要用它？请听我一一道来它的过人之处。 网站地址：https://www.easy-mock.com 欢迎注册体验。 目前 easy-mock 在大搜车已经支持了200个项目，4000条mock数据的量级，并且完全独立部署，请大家放心使用。 前言今天我们要说一说 如何有效提高前端开发效率 ，这个话题似乎有些大了，更确切的说应该是 如何使用 Easy Mock 提高前端开发效率。在前后端分离的大浪潮下，如何有效保障我们在开发环节不被打断？（接口开发需要的时间往往比前端多） 数据伪造我相信大家都有各自的办法。比如说， 将 Mock 数据写在代码里 利用请求拦截 利用 Charles 等代理工具，将 URL Map 到本地文件 本地 Mock Server 上面这些方法虽然可以解决我们的问题，但同样伴随着一些问题。比如说， 脏代码 依赖特定的框架 增加切换成本 接口数据结构重构需要手动更新 效率低下 无法优雅的进行协同编辑 无法持久化 看到这些，它们真的能够提高我们的开发效率吗？答案就在你的心中。为此，Easy Mock 就这样诞生了。 支持 Swagger Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。 效率一直我们关注的问题，Easy Mock 支持基于 Swagger 生成 Mock List。并且，智能的更新操作只会对已经变动的接口做覆盖式更新。并且基于 Swagger 创建的接口是支持参数显示的，也就是说我们能看到这个接口的请求参数和响应数据结构。 再简单点讲，它的强大之处在于彻底解放我们的双手。只要后端用了 Swagger（并且按照规范生成 API 文档），生成 Mock 数据只是 1秒钟 的事情。 具体的使用方式见 Easy Mock 官网文档。 更简单的团队协作Easy Mock 提供了 2 种方式以实现团队协作编辑。 个人项目 下邀请小伙伴一起参与编辑 创建团队 或 加入团队 即可参与该团队下所有项目的编辑 响应数据如果能根据传入的参数动态返回数据该多好？Easy Mock 支持处理 Request 对象。也就是说我们可以通过 Request 对象的某些属性进行条件判断，从而实现 响应式数据。那么，Request 对象都有些什么属性呢？如下， header method url querystring host hostname query cookies这些只是一部分，更多属性和使用方式见 Easy Mock 官网文档 接口代理 有了接口代理可以做更多的事情。 代码调试 跨域请求 工作台如何在茫茫的项目列表中找到你想要进行编辑的项目？搜索虽然很方便，但有时候来回切换项目也需要时间成本，并且这是烦人的。为此我们可以通过将项目添加到工作台中，以提高我们的使用效率。 快捷键为了进一步提升效率，值得一提的小细节是 Easy Mock 支持快捷键操作。 创建项目 &amp; 创建接口 在 项目列表 或 接口列表 中，按下 ctrl + c 搜索 在 项目列表 或 接口列表 中，按下 ctrl + s 更多特性导出接口 有可能你需要在本地用到这些接口，正好 Easy Mock 支持导出数据。 复制 这对于接口版本升级是很有用的。试想一下，一个项目超过 200 个接口，如果后面接口版本升级，同时以前的接口不变。再一次创建 200 个接口是什么感觉？ Restful 如果后端提供 /restful/:id/list 或者 /restful/{id}/list 这样的接口地址。别慌，Easy Mock 是支持的 扩展移动端调试 步骤如下： 利用 Charles Fiddler 等代理工具，抓取客户端中包含页面入口的接口在 Easy Mock 上创建一个接口将刚刚抓取的接口数据复制到 数据模型 中，修改页面入口为本地的入口然后保存。要用本地 ip 哦，localhost 在手机上是无效的点击 预览，复制接口地址回到代理工具。点击最开始抓取的接口，将其代理成刚刚复制的地址即可这个方式可以为调试带来极大的帮助。 联系方式反馈问题请加QQ群：595325417 原文链接 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<p><img src=\"https://dn-mhke0kuv.qbox.me/693e427d03dabb5957ee.png\" alt=\"\"></p>\n<h2 id=\"活儿好又性感的在线-Mock-平台-Easy-Mock\"><a href=\"#活儿好又性感的在线-Mock-平台-Easy-Mock\" class=\"headerlink\" title=\"活儿好又性感的在线 Mock 平台 - Easy Mock\"></a>活儿好又性感的在线 Mock 平台 - Easy Mock</h2><p>介绍</p>\n<p>什么是 Easy Mock</p>\n<a id=\"more\"></a>\n<p>Easy Mock 是一个极其简单、高效、\b可视化、并且能快速生成模拟数据的在线 mock 服务。<br>以项目管理的方式组织 Mock List，能帮助我们更好的管理 Mock 数据，不怕丢失。<br>你问我为什么要用它？请听我一一道来它的过人之处。</p>\n<p>网站地址：<a href=\"https://www.easy-mock.com\" target=\"_blank\" rel=\"noopener\">https://www.easy-mock.com</a> 欢迎注册体验。</p>\n<p>目前 easy-mock 在大搜车已经支持了200个项目，4000条mock数据的量级，并且完全独立部署，请大家放心使用。</p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>今天我们要说一说 如何有效提高前端开发效率 ，这个话题似乎有些大了，<br>更确切的说应该是 如何使用 Easy Mock 提高前端开发效率。在前后端分离的大浪潮下，如何有效保障我们在开发环节不被打断？（接口开发需要的时间往往比前端多）</p>\n<h3 id=\"数据伪造\"><a href=\"#数据伪造\" class=\"headerlink\" title=\"数据伪造\"></a>数据伪造</h3><p>我相信大家都有各自的办法。比如说，</p>\n<ul>\n<li>将 Mock 数据写在代码里</li>\n<li>利用请求拦截</li>\n<li>利用 Charles 等代理工具，将 URL Map 到本地文件</li>\n<li>本地 Mock Server</li>\n</ul>\n<p>上面这些方法虽然可以解决我们的问题，但同样伴随着一些问题。比如说，</p>\n<ul>\n<li>脏代码</li>\n<li>依赖特定的框架</li>\n<li>增加切换成本</li>\n<li>接口数据结构重构需要手动更新</li>\n<li>效率低下</li>\n<li>无法优雅的进行协同编辑</li>\n<li>无法持久化</li>\n</ul>\n<p>看到这些，它们真的能够提高我们的开发效率吗？答案就在你的心中。<br>为此，Easy Mock 就这样诞生了。</p>\n<p>支持 Swagger</p>\n<blockquote>\n<p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p>\n</blockquote>\n<p>效率一直我们关注的问题，Easy Mock 支持基于 Swagger 生成 Mock List。并且，智能的更新操作只会对已经变动的接口做覆盖式更新。<br>并且基于 Swagger 创建的接口是支持参数显示的，也就是说我们能看到这个接口的请求参数和响应数据结构。</p>\n<p>再简单点讲，它的强大之处在于彻底解放我们的双手。只要后端用了 Swagger（并且按照规范生成 API 文档），生成 Mock 数据只是 1秒钟 的事情。</p>\n<p>具体的使用方式见 Easy Mock 官网文档。</p>\n<p><img src=\"https://dn-mhke0kuv.qbox.me/73691fc806ff70250d52.png\" alt=\"\"></p>\n<h3 id=\"更简单的团队协作\"><a href=\"#更简单的团队协作\" class=\"headerlink\" title=\"更简单的团队协作\"></a>更简单的团队协作</h3><p>Easy Mock 提供了 2 种方式以实现团队协作编辑。</p>\n<ul>\n<li>个人项目 下邀请小伙伴一起参与编辑</li>\n<li>创建团队 或 加入团队 即可参与该团队下所有项目的编辑</li>\n</ul>\n<h3 id=\"响应数据\"><a href=\"#响应数据\" class=\"headerlink\" title=\"响应数据\"></a>响应数据</h3><p>如果能根据传入的参数动态返回数据该多好？Easy Mock 支持处理 Request 对象。<br>也就是说我们可以通过 Request 对象的某些属性进行条件判断，从而实现 响应式数据。<br>那么，Request 对象都有些什么属性呢？如下，</p>\n<ul>\n<li>header</li>\n<li>method</li>\n<li>url</li>\n<li>querystring</li>\n<li>host</li>\n<li>hostname</li>\n<li>query</li>\n<li>cookies<br>这些只是一部分，更多属性和使用方式见 Easy Mock 官网文档</li>\n</ul>\n<p><img src=\"https://dn-mhke0kuv.qbox.me/3908b21d67664b7cd706.png\" alt=\"\"></p>\n<h3 id=\"接口代理\"><a href=\"#接口代理\" class=\"headerlink\" title=\"接口代理\"></a>接口代理</h3><blockquote>\n<p>有了接口代理可以做更多的事情。</p>\n</blockquote>\n<ul>\n<li>代码调试</li>\n<li>跨域请求</li>\n</ul>\n<h3 id=\"工作台\"><a href=\"#工作台\" class=\"headerlink\" title=\"工作台\"></a>工作台</h3><p>如何在茫茫的项目列表中找到你想要进行编辑的项目？<br>搜索虽然很方便，但有时候来回切换项目也需要时间成本，并且这是烦人的。<br>为此我们可以通过将项目添加到工作台中，以提高我们的使用效率。</p>\n<p><img src=\"https://dn-mhke0kuv.qbox.me/28ac33f30c0b201f873d.png\" alt=\"\"></p>\n<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><p>为了进一步提升效率，值得一提的小细节是 Easy Mock 支持快捷键操作。</p>\n<p><strong>创建项目 &amp; 创建接口</strong></p>\n<p>在 项目列表 或 接口列表 中，按下 ctrl + c</p>\n<p><strong>搜索</strong></p>\n<p>在 项目列表 或 接口列表 中，按下 ctrl + s</p>\n<h3 id=\"更多特性\"><a href=\"#更多特性\" class=\"headerlink\" title=\"更多特性\"></a>更多特性</h3><p><strong>导出接口</strong></p>\n<p>有可能你需要在本地用到这些接口，正好 Easy Mock 支持导出数据。</p>\n<p><strong>复制</strong></p>\n<p>这对于接口版本升级是很有用的。试想一下，一个项目超过 200 个接口，如果后面接口版本升级，同时以前的接口不变。再一次创建 200 个接口是什么感觉？</p>\n<p><strong>Restful</strong></p>\n<p>如果后端提供 /restful/:id/list 或者 /restful/{id}/list 这样的接口地址。别慌，Easy Mock 是支持的</p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p><strong>移动端调试</strong></p>\n<p>步骤如下：</p>\n<p>利用 Charles Fiddler 等代理工具，抓取客户端中包含页面入口的接口<br>在 Easy Mock 上创建一个接口<br>将刚刚抓取的接口数据复制到 数据模型 中，修改页面入口为本地的入口然后保存。要用本地 ip 哦，localhost 在手机上是无效的<br>点击 预览，复制接口地址<br>回到代理工具。点击最开始抓取的接口，将其代理成刚刚复制的地址即可<br>这个方式可以为调试带来极大的帮助。</p>\n<h3 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h3><p>反馈问题请加QQ群：595325417</p>\n<p><a href=\"https://juejin.im/post/58ff1fae61ff4b0066792f6e\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n","excerpt":"活儿好又性感的在线 Mock 平台 - Easy Mock介绍 什么是 Easy Mock","categories":[],"tags":[{"name":"后台","slug":"后台","permalink":"http://www.ding1996.cn/tags/后台/"}]},{"title":"JavaScript 巧学巧用","date":"2017-04-25T09:12:47.000Z","path":"2017/04/25/it-20170425js/","text":"前言 由于工作和生活上的一些变化，最近写文章的频率有点下降了，实在不好意思，不过相信不久就会慢慢恢复过来，感谢大家一直以来的关注和支持。 本文主要给大家分享一下在编写JavaScript代码的时候存在的一些方法和技巧，虽然有时候条条大路都通向罗马，但是也许总会有那么一条最短的路径可走。希望通过以下几点JavaScript技巧让大家的代码“化繁为简，化简为精”。巧学巧用 1. new Set()可能有人知道ES6中提供了新的数据结构 Set，但是能够灵活运用的人或许不多。利用Set数据结构我们能够轻松的去重一个数组，比如： 12345let arr = [1, 2, 2, 3];let set = new Set(arr);let newArr = Array.from(set); // Array.from方法可以将 Set 结构转为数组。console.log(newArr); // [1, 2, 3] 2. Object.assign()Object.assign()也是ES6中提供的对象的扩展方法，其可以用于对象的合并拷贝，比如： 12345let obj1 = &#123;a: 1&#125;;let obj2 = &#123;b: 2&#125;;let obj3 = Object.assign(&#123;&#125;, obj1, obj2);console.log(obj3); // &#123;a: 1, b: 2&#125; 3. map()map方法用于遍历数组，有返回值，可以对数组的每一项进行操作并生成一个新的数组，有些时候可以代替for和forEach循环，简化代码，比如： 12345let arr3 = [1, 2, 3, 4, 5];let newArr3 = arr3.map((e, i) =&gt; e * 10); // 给数组每一项乘以10console.log(newArr3); // [10, 20, 30, 40, 50] 4. filter()filter方法同样用于遍历数组，顾名思义，就是过滤数组，在每一项元素后面触发一个回调函数，通过判断，保留或移除当前项，最后返回一个新的数组，比如： 12345let arr4 = [1, 2, 3, 4, 5];let newArr4 = arr4.filter((e, i) =&gt; e % 2 === 0); // 取模，过滤余数不为0的数console.log(newArr4); // [2，4] 5. some()some方法用于遍历数组，在每一项元素后面触发一个回调函数，只要一个满足条件就返回true，否则返回false，类似于 || 比较，比如： 12345let arr5 = [&#123;result: true&#125;, &#123;result: false&#125;];let newArr5 = arr5.some((e, i) =&gt; e.result); // 只要一个为true，即为trueconsole.log(newArr5); // true 6.every()every方法用于遍历数组，在每一项元素后面触发一个回调函数，只要一个不满足条件就返回false，否则返回true，类似于 &amp;&amp; 比较，比如： 12345let arr6 = [&#123;result: true&#125;, &#123;result: false&#125;];let newArr6 = arr6.every((e, i) =&gt; e.result); // 只要一个为false，即为falseconsole.log(newArr6); // false 7. ~~运算符~符号用在JavaScript中有按位取反的作用，~~即是取反两次，而位运算的操作值要求是整数，其结果也是整数，所以经过位运算的都会自动变成整数，可以巧妙的去掉小数部分，类似于parseInt，比如： 12345let a = 1.23;let b = -1.23;console.log(~~a); // 1console.log(~~b); // -1 8. ||运算符巧妙的使用 || 运算符我们可以给变量设置默认值，比如： 1234let c = 1;let d = c || 2; // 如果c的值为true则取存在的值，否则为2console.log(d); // 1 9. …运算符…运算符是ES6中用于解构数组的方法，可以用于快速获取数组的参数，比如： 1234let [num1, ...nums] = [1, 2, 3];console.log(num1); // 1console.log(nums); // [2, 3] 10. 三元运算符该运算符应该大家都比较熟悉，在默写情况下可以简化if else的写法，比如： 1234567891011let e = true, f = '';if (e) &#123; f = 'man';&#125; else &#123; f = 'woman';&#125;// 等同于e ? f = 'man' : f = 'woman'; 结语 本文只列出了JavaScript语法中比较常见的10点提升编码效率的方法进行了简单地阐述，当然每一个知识点都可以进行相应的展开与探究，希望大家在巧学的同时达到巧用的效果。 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<p>前言</p>\n<p>由于工作和生活上的一些变化，最近写文章的频率有点下降了，实在不好意思，不过相信不久就会慢慢恢复过来，感谢大家一直以来的关注和支持。</p>\n<p>本文主要给大家分享一下在编写JavaScript代码的时候存在的一些方法和技巧，虽然有时候条条大路都通向罗马，但是也许总会有那么一条最短的路径可走。希望通过以下几点JavaScript技巧让大家的代码“化繁为简，化简为精”。<br><a id=\"more\"></a><br><strong>巧学巧用</strong></p>\n<h3 id=\"1-new-Set\"><a href=\"#1-new-Set\" class=\"headerlink\" title=\"1. new Set()\"></a>1. new Set()</h3><p>可能有人知道ES6中提供了新的数据结构 Set，但是能够灵活运用的人或许不多。利用Set数据结构我们能够轻松的去重一个数组，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr);</span><br><span class=\"line\"><span class=\"keyword\">let</span> newArr = <span class=\"built_in\">Array</span>.from(set); <span class=\"comment\">// Array.from方法可以将 Set 结构转为数组。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr); <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Object-assign\"><a href=\"#2-Object-assign\" class=\"headerlink\" title=\"2. Object.assign()\"></a>2. Object.assign()</h3><p>Object.assign()也是ES6中提供的对象的扩展方法，其可以用于对象的合并拷贝，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;<span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj3 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1, obj2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj3); <span class=\"comment\">// &#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-map\"><a href=\"#3-map\" class=\"headerlink\" title=\"3. map()\"></a>3. map()</h3><p>map方法用于遍历数组，有返回值，可以对数组的每一项进行操作并生成一个新的数组，有些时候可以代替for和forEach循环，简化代码，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr3 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newArr3 = arr3.map(<span class=\"function\">(<span class=\"params\">e, i</span>) =&gt;</span> e * <span class=\"number\">10</span>); <span class=\"comment\">// 给数组每一项乘以10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr3); <span class=\"comment\">// [10, 20, 30, 40, 50]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-filter\"><a href=\"#4-filter\" class=\"headerlink\" title=\"4. filter()\"></a>4. filter()</h3><p>filter方法同样用于遍历数组，顾名思义，就是过滤数组，在每一项元素后面触发一个回调函数，通过判断，保留或移除当前项，最后返回一个新的数组，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr4 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newArr4 = arr4.filter(<span class=\"function\">(<span class=\"params\">e, i</span>) =&gt;</span> e % <span class=\"number\">2</span> === <span class=\"number\">0</span>); <span class=\"comment\">// 取模，过滤余数不为0的数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr4); <span class=\"comment\">// [2，4]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-some\"><a href=\"#5-some\" class=\"headerlink\" title=\"5. some()\"></a>5. some()</h3><p>some方法用于遍历数组，在每一项元素后面触发一个回调函数，只要一个满足条件就返回true，否则返回false，类似于 || 比较，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr5 = [&#123;<span class=\"attr\">result</span>: <span class=\"literal\">true</span>&#125;, &#123;<span class=\"attr\">result</span>: <span class=\"literal\">false</span>&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newArr5 = arr5.some(<span class=\"function\">(<span class=\"params\">e, i</span>) =&gt;</span> e.result); <span class=\"comment\">// 只要一个为true，即为true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr5); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-every\"><a href=\"#6-every\" class=\"headerlink\" title=\"6.every()\"></a>6.every()</h3><p>every方法用于遍历数组，在每一项元素后面触发一个回调函数，只要一个不满足条件就返回false，否则返回true，类似于 &amp;&amp; 比较，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr6 = [&#123;<span class=\"attr\">result</span>: <span class=\"literal\">true</span>&#125;, &#123;<span class=\"attr\">result</span>: <span class=\"literal\">false</span>&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newArr6 = arr6.every(<span class=\"function\">(<span class=\"params\">e, i</span>) =&gt;</span> e.result); <span class=\"comment\">// 只要一个为false，即为false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr6); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"7-运算符\"><a href=\"#7-运算符\" class=\"headerlink\" title=\"7. ~~运算符\"></a>7. ~~运算符</h3><p>~符号用在JavaScript中有按位取反的作用，~~即是取反两次，而位运算的操作值要求是整数，其结果也是整数，所以经过位运算的都会自动变成整数，可以巧妙的去掉小数部分，类似于parseInt，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1.23</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">-1.23</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~~a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~~b); <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8-运算符\"><a href=\"#8-运算符\" class=\"headerlink\" title=\"8. ||运算符\"></a>8. ||运算符</h3><p>巧妙的使用 || 运算符我们可以给变量设置默认值，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = c || <span class=\"number\">2</span>; <span class=\"comment\">// 如果c的值为true则取存在的值，否则为2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"9-…运算符\"><a href=\"#9-…运算符\" class=\"headerlink\" title=\"9. …运算符\"></a>9. …运算符</h3><p>…运算符是ES6中用于解构数组的方法，可以用于快速获取数组的参数，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [num1, ...nums] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num1); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(nums); <span class=\"comment\">// [2, 3]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"10-三元运算符\"><a href=\"#10-三元运算符\" class=\"headerlink\" title=\"10. 三元运算符\"></a>10. 三元运算符</h3><p>该运算符应该大家都比较熟悉，在默写情况下可以简化if else的写法，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> e = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    f = <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (e) &#123;</span><br><span class=\"line\">    f = <span class=\"string\">'man'</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    f = <span class=\"string\">'woman'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">e ? f = <span class=\"string\">'man'</span> : f = <span class=\"string\">'woman'</span>;</span><br></pre></td></tr></table></figure>\n<p>结语</p>\n<p>本文只列出了JavaScript语法中比较常见的10点提升编码效率的方法进行了简单地阐述，当然每一个知识点都可以进行相应的展开与探究，希望大家在巧学的同时达到巧用的效果。</p>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n","excerpt":"前言 由于工作和生活上的一些变化，最近写文章的频率有点下降了，实在不好意思，不过相信不久就会慢慢恢复过来，感谢大家一直以来的关注和支持。 本文主要给大家分享一下在编写JavaScript代码的时候存在的一些方法和技巧，虽然有时候条条大路都通向罗马，但是也许总会有那么一条最短的路径可走。希望通过以下几点JavaScript技巧让大家的代码“化繁为简，化简为精”。","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"西塘游随笔","date":"2017-04-17T01:42:35.000Z","path":"2017/04/17/20170417/","text":"周末放假出去上海周边的西塘古镇玩了玩，哈哈有句话说得好 听别人说的再好不如自己去尝试 ~ 先来张图片镇楼 从上海南站做的大巴车票价36元 差不多一个小时到西塘的车站 ，大巴车站到景区一公里多点 直接走路过去的 车站旁边也有很多人力三轮 哈哈 价格就不知道了 。 古镇不大，邮电东路是古镇最热闹的一条路 贯穿古镇,镇上有家电影院 周六在哪家电影院看的速度与激情8价格还是蛮便宜的 ，到了西塘先去事先定好的酒店 一路走过来 路边都是名宿 客栈 饭馆 发展的很成熟 游客也很多 其实我是不太喜欢到 发展太成熟的地方~ 沉迷了一个星期的王者荣耀今天戒了，发现不玩游戏时间多出来好多 在过两个星期又到五一了 时间飞逝 这几天上海好热都二十来度 一夜入夏 路上行人都已经穿上夏装 就说这么多了 开始搬砖了~ 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=202373&auto=0&height=66\"></iframe>\n\n<p>周末放假出去上海周边的西塘古镇玩了玩，哈哈有句话说得好 听别人说的再好不如自己去尝试 ~  先来张图片镇楼</p>\n<p><img src=\"http://oo0pbw6u4.bkt.clouddn.com/IMG_1872.jpg\" alt=\"\"></p>\n<p>从上海南站做的大巴车票价36元 差不多一个小时到西塘的车站 ，大巴车站到景区一公里多点 直接走路过去的 车站旁边也有很多人力三轮 哈哈 价格就不知道了 。</p>\n<a id=\"more\"></a>\n<p>古镇不大，邮电东路是古镇最热闹的一条路 贯穿古镇,镇上有家电影院 周六在哪家电影院看的速度与激情8价格还是蛮便宜的 ，到了西塘先去事先定好的酒店 一路走过来 路边都是名宿 客栈 饭馆 发展的很成熟 游客也很多 其实我是不太喜欢到 发展太成熟的地方~</p>\n<p>沉迷了一个星期的王者荣耀今天戒了，发现不玩游戏时间多出来好多 在过两个星期又到五一了 时间飞逝 这几天上海好热都二十来度 一夜入夏 路上行人都已经穿上夏装 就说这么多了 开始搬砖了~</p>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n","excerpt":"周末放假出去上海周边的西塘古镇玩了玩，哈哈有句话说得好 听别人说的再好不如自己去尝试 ~ 先来张图片镇楼 从上海南站做的大巴车票价36元 差不多一个小时到西塘的车站 ，大巴车站到景区一公里多点 直接走路过去的 车站旁边也有很多人力三轮 哈哈 价格就不知道了 。","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://www.ding1996.cn/tags/随笔/"},{"name":"游记","slug":"游记","permalink":"http://www.ding1996.cn/tags/游记/"}]},{"title":"mac上最好用的svn客户端Cornerstone","date":"2017-04-13T08:37:52.000Z","path":"2017/04/13/it-mac-svn/","text":"点击我下载Cornerstone破解版 使用标签：前面几篇文章我介绍SVN服务器的安装，配置，实战。当然其中也加入了一些客户端测试的命令，使用命令当然是一个非常好的选择，但是对我们人类来说还是喜欢图形化界面的操作的。因此本文将介绍我喜欢的一款SVN客户端工具的使用。想要安装的Cornerstone的朋友，我有个坏消息是，如果你想使用它的正版软件，你是需要花费几十美金的，当然这里我带给您的永远都是有价值的好的信息，那就是在我们天朝使用软件还花钱真的是极品，我就奉献一下我在网上找到的一个比较好的破解版：http://pan.baidu.com/s/1o6F31zG这个破解版本的Cornerstone软件安装方法我就不做介绍了，因为太容易。本文重点介绍一下它的使用方法。当你打开软件时候会看到如下图所示界面： 现在是空空如也，因此我们应该做点什么，让它发挥作用。界面还是非常的直观和有引导性的，我直接按灰色区域的“Add repository”完成点击之后会弹出配置界面，一般我们会使用第四个选项卡”SVN Server”.如图图中我对SVN服务器做了访问的svn服务器配置,配置介绍如下：tunnel：访问通道，默认不用修改Server：我的svn服务器在本地，所以Server填写了localhostPort:设置端口号，我在服务器上没有配置访问端口号，所以port留空Repository Path:这个是服务器仓库的目录位置，我这里填写了company，这是因为我在SVN服务的根路径下添加了company仓库。Nickname:显示名。这个可以随便填写，建议为仓库和用户名的组合。如果您的配置正确应该会添加成功的，如果错误，请检查服务器是否开启和你配置是否正确等。 下图是我们添加仓库成功后的效果图：从图中可以看到我昨天写的《SVN服务器配置实战》中的目录结构了。现在我们来试试CorenerStone是如何代替我们的命令行的.下图介绍各个功能模块的作用：四、使用简介1.上传项目到repository可以直接拖动到repository的子文件夹中，或是选择软件上方的Import按钮上传，会弹出选项填写所在位置及名称，然后选择Import即可2.下载项目下载分为两种：Export和Check Out，区别在于，Export后的项目不会与repository中的源文件相关联，是一个独立的版本，而Check Out下来的文件会创建一个working copy，参见步骤三的第一幅图，此文件与库中源文件相关联，当有新版本（他人修改）或是本地修改（自己修改）时，working copy会显示修改数量，白色数量为他人修改数量，灰色数量为本人修改数量所以如果你是项目中的开发人员，可以选择check out，如果只是下载查看，不希望自己的修改影响到整个项目，最好是选择Export3.版本管理每一次提交会创建一个新版本，在repository中会保存所有历史版本，如下图（可通过修改人及提交信息进行检索版本），所以用svn开发可以很好的控制项目出现不可解决及未知bug时代码的修复问题：svn方便了多人开发同一项目的代码合并问题，但是也有一些事项需要注意：①先更新后提交在看到有新版本（即同伴已经提交代码时），先更新代码，直至working copy不再显示白色圈，然后运行代码确定可运行且功能无误之后再commit自己的代码，否则，会造成项目中出现多处冲突或bug，且很难排查原因②完成独立功能后再提交，且务必填写提交信息每完成一个独立的功能，或解决一个bug之后再提交代码，不要连续多次重复提交，造成版本过多过杂，且提交时务必填写提交信息，交代本次完成了什么功能，方便上图中可以进行message的搜索来查看历史版本③冲突文件原则上同一组开发人员最好不要在同一文件中进行操作，但有时候必须去其他文件中进行操作，或者是误操作，如果同时多人在同一文件的同一位置修改代码，后提交的人会出现版本冲突文件，一般会有三个同样名称不同后缀的文件.mine文件：本人所做修改两个.r0XX文件：XX为数字，数字较小的为更改前的文件，较大的为更改后的文件，在文件中会有&lt;&lt;&lt;&lt; mine .r0XX &gt;&gt;&gt;&gt;&gt;等字样包含起来的代码，即冲突的地方，此时请和组内同事讨论或自己删除某部分修改文件后进行调试，修复文件针对ios项目：出现某个工程或文件打不开的情况，如果为.project文件无法打开，则选择显示包内容-&gt;用文稿打开project.pbxproj文件-&gt;搜索.mine，将.mine部分前后&lt;&lt;&lt;&lt; &gt;&gt;&gt;&gt;包含起来的代码删除，工程就可以打开了，如果build时出现某个xib文件打不开的错误，则选中，用文稿打开，跟上文同样操作即可解决无法build的问题④新添加文件提交时新增加的文件显示为问号状态的，请选中右击后 选择Add to Working Copy之后再commit 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<p><a href=\"http://xclient.info/s/cornerstone.html\" target=\"_blank\" rel=\"noopener\">点击我下载Cornerstone破解版</a></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>标签：<br>前面几篇文章我介绍SVN服务器的安装，配置，实战。当然其中也加入了一些客户端测试的命令，使用命令当然是一个非常好的选择，但是对我们人类来说还是喜欢图形化界面的操作的。因此本文将介绍我喜欢的一款SVN客户端工具的使用。<br><a id=\"more\"></a><br>想要安装的Cornerstone的朋友，我有个坏消息是，如果你想使用它的正版软件，你是需要花费几十美金的，当然这里我带给您的永远都是有价值的好的信息，那就是在我们天朝使用软件还花钱真的是极品，我就奉献一下我在网上找到的一个比较好的破解版：<a href=\"http://pan.baidu.com/s/1o6F31zG\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1o6F31zG</a><br>这个破解版本的Cornerstone软件安装方法我就不做介绍了，因为太容易。本文重点介绍一下它的使用方法。<br>当你打开软件时候会看到如下图所示界面：</p>\n<p><img src=\"https://ss0.baidu.com/6LVYsjip0QIZ8Aqbn9fN2DC/timg?pa&amp;quality=100&amp;size=w4096&amp;sec=1492056426&amp;di=0294f63bef43eef6328b8d99e4af51d4&amp;ref=http%3A%2F%2Fwww%2Emamicode%2Ecom%2Finfo%2Ddetail%2D1123118%2Ehtml&amp;src=http%3A%2F%2Fimages2015%2Ecnblogs%2Ecom%2Fblog%2F119556%2F201511%2F119556%2D20151121002400374%2D2081596969%2Epng\" alt=\"\"><br>现在是空空如也，因此我们应该做点什么，让它发挥作用。界面还是非常的直观和有引导性的，我直接按灰色区域的“Add repository”<br><img src=\"https://ss0.baidu.com/6LVYsjip0QIZ8Aqbn9fN2DC/timg?pa&amp;quality=100&amp;size=w4096&amp;sec=1492056426&amp;di=58381f52b11ca4eb47d1caaf11bd3414&amp;ref=http%3A%2F%2Fwww%2Emamicode%2Ecom%2Finfo%2Ddetail%2D1123118%2Ehtml&amp;src=http%3A%2F%2Fimages2015%2Ecnblogs%2Ecom%2Fblog%2F119556%2F201511%2F119556%2D20151121002418765%2D1837537103%2Epng\" alt=\"\"><br>完成点击之后会弹出配置界面，一般我们会使用第四个选项卡”SVN Server”.如图<br>图中我对SVN服务器做了访问的svn服务器配置,配置介绍如下：<br><img src=\"https://ss0.baidu.com/6LVYsjip0QIZ8Aqbn9fN2DC/timg?pa&amp;quality=100&amp;size=w4096&amp;sec=1492056426&amp;di=1b68139cf0ebf06c72eca967a63557fb&amp;ref=http%3A%2F%2Fwww%2Emamicode%2Ecom%2Finfo%2Ddetail%2D1123118%2Ehtml&amp;src=http%3A%2F%2Fimages2015%2Ecnblogs%2Ecom%2Fblog%2F119556%2F201511%2F119556%2D20151121002453108%2D1013518228%2Epng\" alt=\"\"><br>tunnel：访问通道，默认不用修改<br>Server：我的svn服务器在本地，所以Server填写了localhost<br>Port:设置端口号，我在服务器上没有配置访问端口号，所以port留空<br>Repository Path:这个是服务器仓库的目录位置，我这里填写了company，这是因为我在SVN服务的根路径下添加了company仓库。<br>Nickname:显示名。这个可以随便填写，建议为仓库和用户名的组合。<br>如果您的配置正确应该会添加成功的，如果错误，请检查服务器是否开启和你配置是否正确等。 下图是我们添加仓库成功后的效果图：<br><img src=\"https://ss0.baidu.com/6LVYsjip0QIZ8Aqbn9fN2DC/timg?pa&amp;quality=100&amp;size=w4096&amp;sec=1492056426&amp;di=38cbd86f4e745649763ed6590ca5f83a&amp;ref=http%3A%2F%2Fwww%2Emamicode%2Ecom%2Finfo%2Ddetail%2D1123118%2Ehtml&amp;src=http%3A%2F%2Fimages2015%2Ecnblogs%2Ecom%2Fblog%2F119556%2F201511%2F119556%2D20151121002744733%2D689360189%2Epng\" alt=\"\"><br>从图中可以看到我昨天写的《SVN服务器配置实战》中的目录结构了。<br>现在我们来试试CorenerStone是如何代替我们的命令行的.下图介绍各个功能模块的作用：<br><img src=\"https://ss0.baidu.com/6LVYsjip0QIZ8Aqbn9fN2DC/timg?pa&amp;quality=100&amp;size=w4096&amp;sec=1492056426&amp;di=aa7daa9418300b710518f01477a49b6e&amp;ref=http%3A%2F%2Fwww%2Emamicode%2Ecom%2Finfo%2Ddetail%2D1123118%2Ehtml&amp;src=http%3A%2F%2Fimages2015%2Ecnblogs%2Ecom%2Fblog%2F119556%2F201511%2F119556%2D20151121002820874%2D871984781%2Epng\" alt=\"\"><br>四、使用简介<br>1.上传项目到repository<br>可以直接拖动到repository的子文件夹中，或是选择软件上方的Import按钮上传，会弹出选项填写所在位置及名称，然后选择Import即可<br>2.下载项目<br>下载分为两种：Export和Check Out，区别在于，Export后的项目不会与repository中的源文件相关联，是一个独立的版本，而Check Out下来的文件会创建一个working copy，参见步骤三的第一幅图，此文件与库中源文件相关联，当有新版本（他人修改）或是本地修改（自己修改）时，working copy会显示修改数量，白色数量为他人修改数量，灰色数量为本人修改数量<br>所以如果你是项目中的开发人员，可以选择check out，如果只是下载查看，不希望自己的修改影响到整个项目，最好是选择Export<br>3.版本管理<br>每一次提交会创建一个新版本，在repository中会保存所有历史版本，如下图（可通过修改人及提交信息进行检索版本），所以用svn开发可以很好的控制项目出现不可解决及未知bug时代码的修复问题：<br>svn方便了多人开发同一项目的代码合并问题，但是也有一些事项需要注意：<br>①先更新后提交<br>在看到有新版本（即同伴已经提交代码时），先更新代码，直至working copy不再显示白色圈，然后运行代码确定可运行且功能无误之后再commit自己的代码，否则，会造成项目中出现多处冲突或bug，且很难排查原因<br>②完成独立功能后再提交，且务必填写提交信息<br>每完成一个独立的功能，或解决一个bug之后再提交代码，不要连续多次重复提交，造成版本过多过杂，且提交时务必填写提交信息，交代本次完成了什么功能，方便上图中可以进行message的搜索来查看历史版本<br>③冲突文件<br>原则上同一组开发人员最好不要在同一文件中进行操作，但有时候必须去其他文件中进行操作，或者是误操作，如果同时多人在同一文件的同一位置修改代码，后提交的人会出现版本冲突文件，一般会有三个同样名称不同后缀的文件<br>.mine文件：本人所做修改<br>两个.r0XX文件：XX为数字，数字较小的为更改前的文件，较大的为更改后的文件，在文件中会有&lt;&lt;&lt;&lt; mine .r0XX  &gt;&gt;&gt;&gt;&gt;等字样包含起来的代码，即冲突的地方，此时请和组内同事讨论或自己删除某部分修改文件后进行调试，修复文件<br>针对ios项目：出现某个工程或文件打不开的情况，如果为.project文件无法打开，则选择显示包内容-&gt;用文稿打开project.pbxproj文件-&gt;搜索.mine，将.mine部分前后&lt;&lt;&lt;&lt; &gt;&gt;&gt;&gt;包含起来的代码删除，工程就可以打开了，如果build时出现某个xib文件打不开的错误，则选中，用文稿打开，跟上文同样操作即可解决无法build的问题<br>④新添加文件<br>提交时新增加的文件显示为问号状态的，请选中右击后 选择Add to Working Copy之后再commit</p>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n","excerpt":"点击我下载Cornerstone破解版 使用标签：前面几篇文章我介绍SVN服务器的安装，配置，实战。当然其中也加入了一些客户端测试的命令，使用命令当然是一个非常好的选择，但是对我们人类来说还是喜欢图形化界面的操作的。因此本文将介绍我喜欢的一款SVN客户端工具的使用。","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"http://www.ding1996.cn/tags/mac/"}]},{"title":"2017前端归类","date":"2017-04-12T02:18:13.000Z","path":"2017/04/12/it-data-FE1/","text":"了解前端实时动态 2016 年崛起的 JS 项目 史上最全的前端资源大汇总 最流行的webpack打包工具 webpack2中文文档 如何使用webpack 请用心练完这16个webpack小例子 node相关 nrm切换npm源 packge.json字段详解 学习 javascript基础到进阶 工作中常用的插件 es6官网 正则表达式 移动端小技巧 全面理解git 兴趣历史谈资小说 javascript promise小红书 es6实战 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<ol>\n<li><p><strong>了解前端实时动态</strong></p>\n<ol>\n<li><a href=\"https://juejin.im/post/58c5e39c8ac24707200a6cff\" target=\"_blank\" rel=\"noopener\">2016 年崛起的 JS 项目</a></li>\n<li><a href=\"http://www.jianshu.com/p/6cb49271cd2a#\" target=\"_blank\" rel=\"noopener\">史上最全的前端资源大汇总</a></li>\n</ol>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li><p><strong>最流行的webpack打包工具</strong></p>\n<ul>\n<li><a href=\"http://www.css88.com/doc/webpack2/\" target=\"_blank\" rel=\"noopener\">webpack2中文文档</a></li>\n<li><a href=\"https://qiutc.me/post/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8webpack%E2%80%94webpack-howto.html\" target=\"_blank\" rel=\"noopener\">如何使用webpack</a></li>\n<li><a href=\"https://juejin.im/post/58edcbda44d904005774cfb1\" target=\"_blank\" rel=\"noopener\">请用心练完这16个webpack小例子</a></li>\n</ul>\n</li>\n</ol>\n<ol>\n<li><p><strong>node相关</strong></p>\n<ul>\n<li><a href=\"https://cnodejs.org/topic/5326e78c434e04172c006826\" target=\"_blank\" rel=\"noopener\">nrm切换npm源</a></li>\n<li><a href=\"http://www.cnblogs.com/tzyy/p/5193811.html\" target=\"_blank\" rel=\"noopener\">packge.json字段详解</a></li>\n</ul>\n</li>\n<li><p><strong>学习</strong></p>\n<ul>\n<li><a href=\"http://www.jianshu.com/u/10ae59f49b13\" target=\"_blank\" rel=\"noopener\">javascript基础到进阶</a></li>\n<li><a href=\"https://github.com/jawil/blog/issues/10\" target=\"_blank\" rel=\"noopener\">工作中常用的插件</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">es6官网</a></li>\n<li><a href=\"http://louiszhai.github.io/2016/06/13/regexp/\" target=\"_blank\" rel=\"noopener\">正则表达式</a></li>\n<li><a href=\"http://liujinkai.com/2015/06/06/mobile-web-skill/\" target=\"_blank\" rel=\"noopener\">移动端小技巧</a></li>\n<li><a href=\"https://juejin.im/post/582bd0b4da2f600063d4f89e\" target=\"_blank\" rel=\"noopener\">全面理解git</a></li>\n<li><a href=\"http://www.360doc.com/userhome.aspx?userid=18314967\" target=\"_blank\" rel=\"noopener\">兴趣历史谈资小说</a></li>\n<li><a href=\"http://liubin.org/promises-book/#ch2-promise-all\" target=\"_blank\" rel=\"noopener\">javascript promise小红书</a></li>\n<li><a href=\"http://gank.io/post/564151c1f1df1210001c9161\" target=\"_blank\" rel=\"noopener\">es6实战</a></li>\n</ul>\n</li>\n</ol>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n","excerpt":"了解前端实时动态 2016 年崛起的 JS 项目 史上最全的前端资源大汇总","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"http://www.ding1996.cn/tags/前端/"}]},{"title":"node-sass的正确安装姿势","date":"2017-04-11T01:26:38.000Z","path":"2017/04/11/it-node-sass/","text":"安装 node-sass 的时候总是会各种不成功，今天我琢磨了一会儿总算知道要怎么解决了。首先要知道的是，安装 node-sass 时在 node scripts/install 阶段会从 github.com 上下载一个 .node 文件，大部分安装不成功的原因都源自这里，因为 GitHub Releases 里的文件都托管在 s3.amazonaws.com 上面，而这个网址在国内总是网络不稳定，所以我们需要通过第三方服务器下载这个文件。（顺带一提，你可以看看这个好玩的 commit） 方法一：使用淘宝镜像直接运行下面的命令即可： 1SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install node-sass 我们可能更希望能直接使用 npm install 安装所有依赖，所以我的做法是在项目内添加一个 .npmrc 文件： sass_binary_site=https://npm.taobao.org/mirrors/node-sass/ phantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs/ electron_mirror=https://npm.taobao.org/mirrors/electron/ registry=https://registry.npm.taobao.org 这样使用 npm install 安装 node-sass、electron 和 phantomjs 时都能自动从淘宝源上下载，但是在使用 npm publish 的时候要把 registry 这一行给注释掉，否则就会发布到淘宝源上去了。 方法二：使用梯子假设你的梯子在你本地机器上开启了一个第三方服务器 127.0.0.1:1080，那么只需按照下面的方法配置一下就能正常安装 node-sass 了（如果你开启的是 PAC 模式而不是全局模式，那还需要将 s3.amazonaws.com 加入 PAC 列表）： npm config set proxy http://127.0.0.1:1080 npm i node-sass 下载完成后删除 http 代理npm config delete proxy 原文链接 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<blockquote>\n<p>安装 node-sass 的时候总是会各种不成功，今天我琢磨了一会儿总算知道要怎么解决了。<br>首先要知道的是，安装 node-sass 时在 node scripts/install 阶段会从 github.com 上下载一个 .node 文件，大部分安装不成功的原因都源自这里，因为 GitHub Releases 里的文件都托管在 s3.amazonaws.com 上面，而这个网址在国内总是网络不稳定，所以我们需要通过第三方服务器下载这个文件。（顺带一提，你可以看看这个好玩的 commit）</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"方法一：使用淘宝镜像\"><a href=\"#方法一：使用淘宝镜像\" class=\"headerlink\" title=\"方法一：使用淘宝镜像\"></a>方法一：使用淘宝镜像</h3><p>直接运行下面的命令即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install node-sass</span><br></pre></td></tr></table></figure>\n<p>我们可能更希望能直接使用 npm install 安装所有依赖，所以我的做法是在项目内添加一个 .npmrc 文件：</p>\n<pre><code>sass_binary_site=https://npm.taobao.org/mirrors/node-sass/\nphantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs/\nelectron_mirror=https://npm.taobao.org/mirrors/electron/\nregistry=https://registry.npm.taobao.org\n</code></pre><p>这样使用 npm install 安装 node-sass、electron 和 phantomjs 时都能自动从淘宝源上下载，但是在使用 npm publish 的时候要把 registry 这一行给注释掉，否则就会发布到淘宝源上去了。</p>\n<h3 id=\"方法二：使用梯子\"><a href=\"#方法二：使用梯子\" class=\"headerlink\" title=\"方法二：使用梯子\"></a>方法二：使用梯子</h3><p>假设你的梯子在你本地机器上开启了一个第三方服务器 127.0.0.1:1080，那么只需按照下面的方法配置一下就能正常安装 node-sass 了（如果你开启的是 PAC 模式而不是全局模式，那还需要将 s3.amazonaws.com 加入 PAC 列表）：</p>\n<pre><code>npm config set proxy http://127.0.0.1:1080\nnpm i node-sass\n</code></pre><h3 id=\"下载完成后删除-http-代理\"><a href=\"#下载完成后删除-http-代理\" class=\"headerlink\" title=\"下载完成后删除 http 代理\"></a>下载完成后删除 http 代理</h3><pre><code>npm config delete proxy\n</code></pre><p><a href=\"https://github.com/lmk123/blog/issues/28\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n\n","excerpt":"安装 node-sass 的时候总是会各种不成功，今天我琢磨了一会儿总算知道要怎么解决了。首先要知道的是，安装 node-sass 时在 node scripts/install 阶段会从 github.com 上下载一个 .node 文件，大部分安装不成功的原因都源自这里，因为 GitHub Releases 里的文件都托管在 s3.amazonaws.com 上面，而这个网址在国内总是网络不稳定，所以我们需要通过第三方服务器下载这个文件。（顺带一提，你可以看看这个好玩的 commit）","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"}]},{"title":"javascript this学习之路","date":"2017-04-10T08:26:00.000Z","path":"2017/04/10/it-js-this/","text":"this是javascript的核心之一，this的指向之前都是一知半解不是很了解，今天看了简书上看了篇文章对js中this讲的很清楚，后面我简单的分享下我的学习笔记 javascript this的指向是面试中必问的问题，之前在百度上看this相关的文章都是写的很高深莫测，看完和没看一样 。今天的笔记参考这篇文章-&gt;全方位解读this 感觉本文作者让我对this有个新的认识 案例1 1234567891011var a = 10;var obj = &#123; a: 20&#125;function fn () &#123; console.log(this.a); // fn() == window.fn() 这里this指向window&#125;fn(); // 10fn.call(obj); // 20 call 可以改变this指向 这里this指向obj 在一个函数上下文中，this由调用者提供，由调用函数的方式来决定。如果调用者函数，被某一个对象所拥有，那么该函数在调用时，内部的this指向该对象。如果函数独立调用，那么该函数内部的this，则指向undefined。但是在非严格模式中，当this指向undefined时，它会被自动指向全局对象。 案例2 1234567891011var a = 20;var obj = &#123; a: 10, c: this.a + 20, fn: function () &#123; return this.a; &#125;&#125;console.log(obj.c); // 40 obj.c 不是一个函数 这里的this指向windowconsole.log(obj.fn()); // 10 fn被obj拥有 this指向obj 当obj在全局声明时，无论obj.c在什么地方调用，这里的this都指向全局对象，而当obj在函数环境中声明时，这个this指向undefined，在非严格模式下，会自动转向全局对象。可运行下面的例子查看区别。 多来几个案列熟练下 1234567891011var a = 20;var foo = &#123; a: 10, getA: function () &#123; return this.a; &#125;&#125;console.log(foo.getA()); // 10var test = foo.getA;console.log(test()); // 20 foo.getA()中，getA是调用者，他不是独立调用，被对象foo所拥有，因此它的this指向了foo。而test()作为调用者，尽管他与foo.getA的引用相同，但是它是独立调用的，因此this指向undefined，在非严格模式，自动转向全局window。 下面两个案列看看 123456789var a = 20;function getA() &#123; return this.a;&#125;var foo = &#123; a: 10, getA: getA&#125;console.log(foo.getA()); // 10 123456789101112131415function foo() &#123; console.log(this.a)&#125;function active(fn) &#123; fn(); // 真实调用者，为独立调用&#125;var a = 20;var obj = &#123; a: 10, getA: foo&#125;active(obj.getA); //20 这里this没有被拥有 this指向window 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<blockquote>\n<p>this是javascript的核心之一，this的指向之前都是一知半解不是很了解，今天看了简书上看了篇文章对js中this讲的很清楚，后面我简单的分享下我的学习笔记</p>\n</blockquote>\n<p>javascript this的指向是面试中必问的问题，之前在百度上看this相关的文章都是写的很高深莫测，看完和没看一样 。今天的笔记参考这篇文章-&gt;<a href=\"http://www.jianshu.com/p/d647aa6d1ae6\" target=\"_blank\" rel=\"noopener\">全方位解读this</a> 感觉本文作者让我对this有个新的认识</p>\n<a id=\"more\"></a>\n<p>案例1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a); <span class=\"comment\">// fn() == window.fn() 这里this指向window</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn(); <span class=\"comment\">// 10</span></span><br><span class=\"line\">fn.call(obj); <span class=\"comment\">// 20  call 可以改变this指向 这里this指向obj</span></span><br></pre></td></tr></table></figure>\n<p><strong>在一个函数上下文中，this由调用者提供，由调用函数的方式来决定。如果调用者函数，被某一个对象所拥有，那么该函数在调用时，内部的this指向该对象。如果函数独立调用，那么该函数内部的this，则指向undefined。但是在非严格模式中，当this指向undefined时，它会被自动指向全局对象。</strong></p>\n<p>案例2</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">10</span>,</span><br><span class=\"line\">    c: <span class=\"keyword\">this</span>.a + <span class=\"number\">20</span>,</span><br><span class=\"line\">    fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.c);  <span class=\"comment\">// 40 obj.c 不是一个函数 这里的this指向window</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.fn()); <span class=\"comment\">// 10 fn被obj拥有 this指向obj</span></span><br></pre></td></tr></table></figure>\n<p><strong>当obj在全局声明时，无论obj.c在什么地方调用，这里的this都指向全局对象，而当obj在函数环境中声明时，这个this指向undefined，在非严格模式下，会自动转向全局对象。可运行下面的例子查看区别。</strong></p>\n<p>多来几个案列熟练下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">10</span>,</span><br><span class=\"line\">    getA: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.getA()); <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = foo.getA;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test());  <span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure>\n<p><code>foo.getA()</code>中，getA是调用者，他不是独立调用，被对象foo所拥有，因此它的this指向了foo。而<code>test()</code>作为调用者，尽管他与foo.getA的引用相同，但是它是独立调用的，因此this指向undefined，在非严格模式，自动转向全局window。</p>\n<p>下面两个案列看看</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getA</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">10</span>,</span><br><span class=\"line\">    getA: getA</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.getA());  <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">active</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    fn(); <span class=\"comment\">// 真实调用者，为独立调用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">10</span>,</span><br><span class=\"line\">    getA: foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">active(obj.getA); <span class=\"comment\">//20 这里this没有被拥有 this指向window</span></span><br></pre></td></tr></table></figure>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n\n\n","excerpt":"this是javascript的核心之一，this的指向之前都是一知半解不是很了解，今天看了简书上看了篇文章对js中this讲的很清楚，后面我简单的分享下我的学习笔记 javascript this的指向是面试中必问的问题，之前在百度上看this相关的文章都是写的很高深莫测，看完和没看一样 。今天的笔记参考这篇文章-&gt;全方位解读this 感觉本文作者让我对this有个新的认识","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"在这个节奏飞快的时代我该如何学习？","date":"2017-04-10T02:37:29.000Z","path":"2017/04/10/learnchannel/","text":"心理学家罗洛梅说：“焦虑是人类面对威胁，希望创造自我的正常状态。在这样一个高速发展的时代，焦虑的人才是真的健康、感觉到时代脉搏的人。” 互联网时代的职场加剧了两极分化，少部分人获得巨大影响力和资源而迅速崛起；更多的人会被服务得越来越懒，成为平庸的跟随者。也就是说，个人崛起的时代，是一部分“超级个体”崛起，和一大群普通个体追随的时代。 在我们程序员的行业里，大家都知道，想要不被淘汰，就必须让自己处于一个持续学习的阶段。老的知识与技术，会很快的被新的淹没在历史的尘埃里。和其他行业不同，程序员是能够在短期内直观感受到行业变化的。 我是一个半路出家的前端工程师，工作了两三年工作碰到瓶颈，如何去提升自己，在这个技术高速发展的时代，生活每天都充满了焦虑，不学习就会落后，落后机会挨打 so 我们要不断学习不让自己活在舒适区域 ~ 1 语言表达能力太差，每天写篇博客提升自己的词汇量和提升自己的写作能力2 每天浏览技术社区的博客看看人家怎么学习 有哪些问题自己碰到过没有解决的 学习方法 80%时间学习 专业技能 专业技能是我们生活的保障 10%时间学习 哲理 哲理能给我们带来信仰 5% 社会热点 让自己与时俱进时刻了社会上最新的热点头条 5% 其他类 学习渠道 掘金 简书 知乎 cnode 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<blockquote>\n<p>心理学家罗洛梅说：“焦虑是人类面对威胁，希望创造自我的正常状态。在这样一个高速发展的时代，焦虑的人才是真的健康、感觉到时代脉搏的人。”</p>\n</blockquote>\n<blockquote>\n<p>互联网时代的职场加剧了两极分化，少部分人获得巨大影响力和资源而迅速崛起；更多的人会被服务得越来越懒，成为平庸的跟随者。也就是说，个人崛起的时代，是一部分“超级个体”崛起，和一大群普通个体追随的时代。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>在我们程序员的行业里，大家都知道，想要不被淘汰，就必须让自己处于一个持续学习的阶段。老的知识与技术，会很快的被新的淹没在历史的尘埃里。和其他行业不同，程序员是能够在短期内直观感受到行业变化的。</p>\n<p>我是一个半路出家的前端工程师，工作了两三年工作碰到瓶颈，如何去提升自己，在这个技术高速发展的时代，生活每天都充满了焦虑，不学习就会落后，落后机会挨打 so 我们要不断学习不让自己活在舒适区域 ~</p>\n<p>1 语言表达能力太差，每天写篇博客提升自己的词汇量和提升自己的写作能力<br>2 每天浏览技术社区的博客看看人家怎么学习 有哪些问题自己碰到过没有解决的</p>\n<h4 id=\"学习方法\"><a href=\"#学习方法\" class=\"headerlink\" title=\"学习方法\"></a>学习方法</h4><ul>\n<li>80%时间学习 专业技能 专业技能是我们生活的保障</li>\n<li>10%时间学习 哲理 哲理能给我们带来信仰</li>\n<li>5% 社会热点 让自己与时俱进时刻了社会上最新的热点头条</li>\n<li>5% 其他类</li>\n</ul>\n<h4 id=\"学习渠道\"><a href=\"#学习渠道\" class=\"headerlink\" title=\"学习渠道\"></a>学习渠道</h4><ul>\n<li><a href=\"https://juejin.im/timeline\" target=\"_blank\" rel=\"noopener\">掘金</a></li>\n<li><a href=\"http://www.jianshu.com/\" target=\"_blank\" rel=\"noopener\">简书</a></li>\n<li><a href=\"https://www.zhihu.com/\" target=\"_blank\" rel=\"noopener\">知乎</a></li>\n<li><a href=\"https://cnodejs.org/\" target=\"_blank\" rel=\"noopener\">cnode</a></li>\n</ul>\n<!-- >当我决定成为一名程序员的时候，我对自己是没有多少自信的。\n虽然我的专业是和计算机相关，但是作为一名学渣，眼睁睁的看着大神都是自己的同学，自己那点微薄的基础真的给不了我多少底气。毕业之前我也没有想过自己会走上程序员的道路并且以此为生。\n作为一个学渣，有一个特点就是，很难一瞬间就决定自己未来的路是什么样的，并且坚定不移的走下去，中间总会遇到各种各样的变故，让自己的未来摇摆不定。\n最开始的时候我不知道自己要成为哪个方向上的程序员。\n学过c语言，不过也仅仅只是能够写一点简单的练习题，能够应付期末考试，并没有任何想法会在工作中使用。\nc++也学过，我依稀记得当初上课的时候，心想这老师讲的真好，居然连我这个不听课的人也能略懂一二，但是因为太难理解，死在了面向对象上。\n再后来还学过c#，当时的老师给我们讲c#被很多人不看好，但是他用他的个人魅力成功忽悠了一群学霸到他的实验室，学些c#。\n甚至差点学Object-c。Object-c的老师，是一个胖胖的老师，第一节课就给我讲了一个做苹果开发人才难求的故事。说他的学生，只懂Object-c的基本语法，被某企业以8000员的高薪聘请，并且寄予他学习机会。当时已经对毕业的薪资有了一点粗浅的认识，因此我的第一反应是这老师在吹牛逼，甚至不削一顾，也以为这样，后来都逃课了。直到毕业之后，班上出现几个搞苹果开发的高富帅，我才知道，这老师并没有吹牛。\n快要大四的时候，我才幡然醒悟，这样玩下去不行，工作都找不到了。了解了很多，听说java很流行，工作很好找，于是找了很多资源，下载了李兴华老师的java视频教程，开始学习。可是每段视频至少有40分钟，光是基础就有100多集，到最后还有3大流氓框架的几十集，然后才是web实战开发，我一下子就被吓到了，我的天，要毕业了，来不及了。抱着诚惶诚恐的心态，学习了50多集，坚持不下去了。\n后来有个人跑来跟我说，php简单，上手快。经过多方资源分析，最后锁定了php100的网站，上面有免费的视频教程。可是，前三集将开发环境配置，我就直接受不了了，因为听不懂。\n没错，学渣就是这么容易半途而废，一事无成。\n机缘巧合之下，乱点点到了miaov课堂的官方网站，那个时候的网站还是老版本，可是炫酷的动画有点吸引人，再看了看免费视频，卧槽，这老师讲的可以，我还听得懂，经过长期的心理挣扎之后，下定决心要学点东西，就花光所有积蓄，买了他们的视频光碟。[坑爹的是，现在只需要100块钱就能成为会员，那个时候从牙缝里面挤出来的钱，吃了多少个月的泡面我都记不清了，我那个气啊]。\n视频很好，讲的是html，css，和js，卧槽，这东西可以，不需要学习无穷无尽的基础知识就能在网页上搞出一些东西来，不用配置我翻来覆去搞不明白的环境配置。看着这个视频列表，我甚至自信在看完这段视频之后，就立马化身前端大神，无所不能。带着这样的幻想，开始走向了立志成为前端工程师的道路。\n但是故事到这里，你认为我会顺理成章的努力，然后成为一名合格的程序员，那你就对学渣太不了解了。\n事情并未有什么顺利可言。作为一名学渣，有太多的性格弱点。爱幻想。我幻想有一个莫名其妙的神奇的机会，让我从此化身高富帅，迎娶白富美，出任CEO，走向人生巅峰。好高骛远。这个知识点还没有掌握，已经迫不及待的想去学习另外一个知识点。自控力弱，难以合理管理自己的时间等等。虽然后来找到了一份工作，我甚至认为我不需要在继续学习了。因此工作了一年，依然是一个学渣，虽然能够处理工作的内容，但是却少有进步。\n有的时候，醒悟总是需要一些契机的。当我还在埋头lol的时候，周围同学的薪水已经陆续破万，那些远走北京的同学，更是让我望尘莫及。后来听了很多故事，加上人也不是读书时候那么肆无忌惮的浪费时间，开始疯狂学习很多东西。可是学渣本质上很多东西是难以改变的，比如好高骛远。学习并不是那么顺利。甚至被很多从未听说过的东西吓到了。bootstrap，angularjs，requirejs, gulp,seajs, gruntjs，sass, less, 什么性能检测，单元检测，什么模块化，什么mvvm，什么nodejs，git。就连编辑器都那么陌生那么高大上，什么Sublime，什么vim，一大堆从来没有听说过的东西。我就想疯狂的学习这些东西，可是一个东西也没有掌握好。\n在朋友的介绍下，在北京找到了一份工作。很多新奇的东西，我也第一次意识到英语是那么的重要，可是一个学渣英语又能好到哪里去呢？单词量还没有初中的时候高呢。\n我学了很多东西，也忘了很多东西，最后可以说是什么也没有学到，我收藏了大量的文章，学习网址，然而并没有什么用。虽然来了北京，可是这边的大神太多了，我的同学作为一个大神被人尊敬，而我却任然是一个学渣连自己都觉得自己抬不起头来。后来组长找我谈话，他说希望我能主动点，多多练习，让那些似懂非懂的东西能够熟练起来。不要步子迈太大。\n我内心是痛苦的，当一个学渣混迹在大神堆里，感觉哪里都不适应。后来认真想了很多，也跟同学聊了很多，该怎么学习。我找到了2个关键词。\n  ● 基础\n  ● 慢下来\n我开始去认真阅读《Javascript高级编程》，对于我这个长期通过视频教程吸收知识的人来说，通过读书来吸收知识无疑是痛苦的。我甚至诧异原来以前的自己连javascript由哪三大部分组成都不知道，原来自己连基本数据类型和引用数据类型都没有搞清楚，更别说什么作用域链，原型链这些东西了。\n我开始尝试记笔记，我把学到的东西都及时的整理成笔记，保存在github中，我现在甚至认为，只有自己最后记了笔记的东西，才是真正的被我掌握的知识。\n我开始尝试写博文，把自己的笔记，整理出来，写成一篇文章，当然这会花掉我很多时间，但是却能够让我更加透彻的掌握知识点。\n当然，我还必须做大量的练习，并不是别人的文章我看懂了就算学到了，大量的练习必不可少。我也慢慢的感受到了练习带来的好处，那种得心应手的感觉，是以前没有过的。\n我希望以后的自己能够一步一步脚踏实地的学习，外面有大量的知识我没有掌握，就连我几年前买的miaov视频如今都已经出了好多好多的视频，我的电脑都已经装不下，我也没有那么多时间去学习那么多的东西。\n我希望自己以后能够掌握一门后台语言，然后自己写一个自己的网站。\n总之，毕业3年之后的今天，我希望自己能够从0开始，脚踏实地慢慢来，一切都还来得及。\n -->\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n\n","excerpt":"心理学家罗洛梅说：“焦虑是人类面对威胁，希望创造自我的正常状态。在这样一个高速发展的时代，焦虑的人才是真的健康、感觉到时代脉搏的人。” 互联网时代的职场加剧了两极分化，少部分人获得巨大影响力和资源而迅速崛起；更多的人会被服务得越来越懒，成为平庸的跟随者。也就是说，个人崛起的时代，是一部分“超级个体”崛起，和一大群普通个体追随的时代。","categories":[],"tags":[{"name":"学习","slug":"学习","permalink":"http://www.ding1996.cn/tags/学习/"}]},{"title":"Mac iterm2常用快捷键","date":"2017-04-08T07:50:37.000Z","path":"2017/04/08/it-cmd-itemr2key/","text":"不会命令行的程序员不会好程序员不是好前端码代码的时候听音乐更有激情哟 早上上班的时候看到地铁站 速度与激情的广告电影中最爱的一个系列 满满的情怀 来首 see you again 回顾下两年前的速7 mac下的命令行工具首推itemr2 为什么推荐itemr2可以看这片文章 快来戳我 下面是itemr2常用的快捷键，会了快捷键妈妈再也不用担心我不会装逼了 标签 新建标签：command + t 关闭标签：command + w 切换标签：command + 数字 command + 左右方向键 切换全屏：command + enter 查找：command + f 分屏 垂直分屏：command + d 水平分屏：command + shift + d 切换屏幕：command + option + 方向键 command + [ 或 command + ] 查看历史命令：command + ; 查看剪贴板历史：command + shift + h 其他 清除当前行：ctrl + u 到行首：ctrl + a 到行尾：ctrl + e 前进后退：ctrl + f/b (相当于左右方向键) 上一条命令：ctrl + p 搜索命令历史：ctrl + r 删除当前光标的字符：ctrl + d 删除光标之前的字符：ctrl + h 删除光标之前的单词：ctrl + w 删除到文本末尾：ctrl + k 交换光标处文本：ctrl + t 清屏1：command + r 清屏2：ctrl + l 自带有哪些很实用的功能/快捷键 ⌘ + 数字在各 tab 标签直接来回切换 选择即复制 + 鼠标中键粘贴，这个很实用 ⌘ + f 所查找的内容会被自动复制 ⌘ + d 横着分屏 / ⌘ + shift + d 竖着分屏 ⌘ + r = clear，而且只是换到新一屏，不会想 clear 一样创建一个空屏 ctrl + u 清空当前行，无论光标在什么位置 输入开头命令后 按 ⌘ + ; 会自动列出输入过的命令 ⌘ + shift + h 会列出剪切板历史 可以在 Preferences &gt; keys 设置全局快捷键调出 iterm，这个也可以用过 Alfred 实现 我常用的一些快捷键 ⌘ + 1 / 2 左右 tab 之间来回切换，这个在 前面 已经介绍过了 ⌘← / ⌘→ 到一行命令最左边/最右边 ，这个功能同 C+a / C+e ⌥← / ⌥→ 按单词前移/后移，相当与 C+f / C+b，其实这个功能在Iterm中已经预定义好了，⌥f / ⌥b，看个人习惯了 设置方法如下 当然除了这些可以自定义的也不能忘了 Linux 下那些好用的组合 C+a / C+e 这个几乎在哪都可以使用 C+p / !! 上一条命令 C+k 从光标处删至命令行尾 (本来 C+u 是删至命令行首，但iterm中是删掉整行) C+w A+d 从光标处删至字首/尾 C+h C+d 删掉光标前后的自负 C+y 粘贴至光标后 C+r 搜索命令历史，这个较常用 选择喜欢的配色方案。 在Preferences-&gt;Profiles-&gt;Colors的load presets可以选择某个配色方案。也可以自己下载。在网站http://iterm2colorschemes.com/ ，几乎可以找到所有可用的配色方案。 选中即复制iterm2有2种好用的选中即复制模式。 一种是用鼠标，在iterm2中，选中某个路径或者某个词汇，那么，iterm2就自动复制了。 另一种是无鼠标模式，command+f,弹出iterm2的查找模式，输入要查找并复制的内容的前几个字母，确认找到的是自己的内容之后，输入tab，查找窗口将自动变化内容，并将其复制。如果输入的是shift+tab，则自动将查找内容的左边选中并复制。 路径重复 在新Tab中自动使用前一Tab路径，如此设置： 系统热键 如下图，设置好系统热线之后，将在正常的浏览器或者编辑器等窗口的上面，以半透明窗口形式直接调出iterm2 shell。 自动完成 输入打头几个字母，然后输入command+; iterm2将自动列出之前输入过的类似命令。 剪切历史 输入command+shift+h，iterm2将自动列出剪切板的历史记录。如果需要将剪切板的历史记录保存到磁盘，在Preferences &gt; General &gt; Save copy/paste history to disk.中设置。 全屏切换 command+enter进入与返回全屏模式 Exposé所有Tab command+option+e,并且可以搜索 保存当前快照 Window &gt; Save Window Arrangement. 同样，恢复快照： Window &gt; Restore Window Arrangement 可以在Preferences &gt; General &gt; Open saved window arrangement.设置自动恢复快照 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<blockquote>\n<p>不会命令行的程序员不会好程序员不是好前端<br>码代码的时候听音乐更有激情哟 </p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=33937655&auto=0&height=66\"></iframe>\n\n<p>早上上班的时候看到地铁站 速度与激情的广告<br>电影中最爱的一个系列 满满的情怀 来首 see you again 回顾下两年前的速7<br><img src=\"http://oo0pbw6u4.bkt.clouddn.com/IMG_1732.jpg\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p>mac下的命令行工具首推itemr2</p>\n<p>为什么推荐itemr2可以看这片文章 <a href=\"https://www.zhihu.com/question/27447370\" target=\"_blank\" rel=\"noopener\">快来戳我</a></p>\n<p>下面是itemr2常用的快捷键，会了快捷键妈妈再也不用担心我不会装逼了</p>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><ul>\n<li><p>新建标签：command + t</p>\n</li>\n<li><p>关闭标签：command + w</p>\n</li>\n<li><p>切换标签：command + 数字 command + 左右方向键</p>\n</li>\n<li><p>切换全屏：command + enter</p>\n</li>\n<li><p>查找：command + f</p>\n</li>\n</ul>\n<h3 id=\"分屏\"><a href=\"#分屏\" class=\"headerlink\" title=\"分屏\"></a>分屏</h3><ul>\n<li><p>垂直分屏：command + d</p>\n</li>\n<li><p>水平分屏：command + shift + d</p>\n</li>\n<li><p>切换屏幕：command + option + 方向键 command + [ 或 command + ]</p>\n</li>\n<li><p>查看历史命令：command + ;</p>\n</li>\n<li><p>查看剪贴板历史：command + shift + h</p>\n</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><p>清除当前行：ctrl + u</p>\n</li>\n<li><p>到行首：ctrl + a</p>\n</li>\n<li><p>到行尾：ctrl + e</p>\n</li>\n<li><p>前进后退：ctrl + f/b (相当于左右方向键)</p>\n</li>\n<li><p>上一条命令：ctrl + p</p>\n</li>\n<li><p>搜索命令历史：ctrl + r</p>\n</li>\n<li><p>删除当前光标的字符：ctrl + d</p>\n</li>\n<li><p>删除光标之前的字符：ctrl + h</p>\n</li>\n<li><p>删除光标之前的单词：ctrl + w</p>\n</li>\n<li><p>删除到文本末尾：ctrl + k</p>\n</li>\n<li><p>交换光标处文本：ctrl + t</p>\n</li>\n<li><p>清屏1：command + r</p>\n</li>\n<li><p>清屏2：ctrl + l</p>\n</li>\n</ul>\n<h3 id=\"自带有哪些很实用的功能-快捷键\"><a href=\"#自带有哪些很实用的功能-快捷键\" class=\"headerlink\" title=\"自带有哪些很实用的功能/快捷键\"></a>自带有哪些很实用的功能/快捷键</h3><ul>\n<li><p>⌘ + 数字在各 tab 标签直接来回切换</p>\n</li>\n<li><p>选择即复制 + 鼠标中键粘贴，这个很实用</p>\n</li>\n<li><p>⌘ + f 所查找的内容会被自动复制</p>\n</li>\n<li><p>⌘ + d 横着分屏 / ⌘ + shift + d 竖着分屏</p>\n</li>\n<li><p>⌘ + r = clear，而且只是换到新一屏，不会想 clear 一样创建一个空屏</p>\n</li>\n<li><p>ctrl + u 清空当前行，无论光标在什么位置</p>\n</li>\n<li><p>输入开头命令后 按 ⌘ + ; 会自动列出输入过的命令</p>\n</li>\n<li><p>⌘ + shift + h 会列出剪切板历史</p>\n</li>\n<li><p>可以在 Preferences &gt; keys 设置全局快捷键调出 iterm，这个也可以用过 Alfred 实现</p>\n</li>\n</ul>\n<h3 id=\"我常用的一些快捷键\"><a href=\"#我常用的一些快捷键\" class=\"headerlink\" title=\"我常用的一些快捷键\"></a>我常用的一些快捷键</h3><ul>\n<li><p>⌘ + 1 / 2 左右 tab 之间来回切换，这个在 前面 已经介绍过了</p>\n</li>\n<li><p>⌘← / ⌘→ 到一行命令最左边/最右边 ，这个功能同 C+a / C+e</p>\n</li>\n<li><p>⌥← / ⌥→ 按单词前移/后移，相当与 C+f / C+b，其实这个功能在Iterm中已经预定义好了，⌥f / ⌥b，看个人习惯了</p>\n</li>\n</ul>\n<h3 id=\"设置方法如下\"><a href=\"#设置方法如下\" class=\"headerlink\" title=\"设置方法如下\"></a>设置方法如下</h3><ul>\n<li><p>当然除了这些可以自定义的也不能忘了 Linux 下那些好用的组合</p>\n</li>\n<li><p>C+a / C+e 这个几乎在哪都可以使用</p>\n</li>\n<li><p>C+p / !! 上一条命令</p>\n</li>\n<li><p>C+k 从光标处删至命令行尾 (本来 C+u 是删至命令行首，但iterm中是删掉整行)</p>\n</li>\n<li><p>C+w A+d 从光标处删至字首/尾</p>\n</li>\n<li><p>C+h C+d 删掉光标前后的自负</p>\n</li>\n<li><p>C+y 粘贴至光标后</p>\n</li>\n<li><p>C+r 搜索命令历史，这个较常用</p>\n</li>\n</ul>\n<h3 id=\"选择喜欢的配色方案。\"><a href=\"#选择喜欢的配色方案。\" class=\"headerlink\" title=\"选择喜欢的配色方案。\"></a>选择喜欢的配色方案。</h3><ul>\n<li>在Preferences-&gt;Profiles-&gt;Colors的load presets可以选择某个配色方案。也可以自己下载。在网站<a href=\"http://iterm2colorschemes.com/\" target=\"_blank\" rel=\"noopener\">http://iterm2colorschemes.com/</a> ，几乎可以找到所有可用的配色方案。</li>\n</ul>\n<h3 id=\"选中即复制\"><a href=\"#选中即复制\" class=\"headerlink\" title=\"选中即复制\"></a>选中即复制</h3><p>iterm2有2种好用的选中即复制模式。</p>\n<ul>\n<li><p>一种是用鼠标，在iterm2中，选中某个路径或者某个词汇，那么，iterm2就自动复制了。</p>\n</li>\n<li><p>另一种是无鼠标模式，command+f,弹出iterm2的查找模式，输入要查找并复制的内容的前几个字母，确认找到的是自己的内容之后，输入tab，查找窗口将自动变化内容，并将其复制。如果输入的是shift+tab，则自动将查找内容的左边选中并复制。</p>\n</li>\n</ul>\n<h3 id=\"路径重复\"><a href=\"#路径重复\" class=\"headerlink\" title=\"路径重复\"></a>路径重复</h3><ul>\n<li>在新Tab中自动使用前一Tab路径，如此设置：<br><img src=\"http://img.blog.csdn.net/20160527095312397\" alt=\"\"></li>\n</ul>\n<h3 id=\"系统热键\"><a href=\"#系统热键\" class=\"headerlink\" title=\"系统热键\"></a>系统热键</h3><ul>\n<li>如下图，设置好系统热线之后，将在正常的浏览器或者编辑器等窗口的上面，以半透明窗口形式直接调出iterm2 shell。<br><img src=\"http://img.blog.csdn.net/20160527095435726\" alt=\"\"></li>\n</ul>\n<h3 id=\"自动完成\"><a href=\"#自动完成\" class=\"headerlink\" title=\"自动完成\"></a>自动完成</h3><ul>\n<li>输入打头几个字母，然后输入command+; iterm2将自动列出之前输入过的类似命令。<br><img src=\"http://img.blog.csdn.net/20160527095603804\" alt=\"\"></li>\n</ul>\n<h3 id=\"剪切历史\"><a href=\"#剪切历史\" class=\"headerlink\" title=\"剪切历史\"></a>剪切历史</h3><ul>\n<li>输入command+shift+h，iterm2将自动列出剪切板的历史记录。如果需要将剪切板的历史记录保存到磁盘，在Preferences &gt; General &gt; Save copy/paste history to disk.中设置。<br><img src=\"http://img.blog.csdn.net/20160527095628398\" alt=\"\"></li>\n</ul>\n<h3 id=\"全屏切换\"><a href=\"#全屏切换\" class=\"headerlink\" title=\"全屏切换\"></a>全屏切换</h3><ul>\n<li>command+enter进入与返回全屏模式</li>\n</ul>\n<h3 id=\"Expose所有Tab\"><a href=\"#Expose所有Tab\" class=\"headerlink\" title=\"Exposé所有Tab\"></a>Exposé所有Tab</h3><ul>\n<li><p>command+option+e,并且可以搜索</p>\n<h3 id=\"保存当前快照\"><a href=\"#保存当前快照\" class=\"headerlink\" title=\"保存当前快照\"></a>保存当前快照</h3></li>\n<li><p>Window &gt; Save Window Arrangement.</p>\n<h3 id=\"同样，恢复快照：\"><a href=\"#同样，恢复快照：\" class=\"headerlink\" title=\"同样，恢复快照：\"></a>同样，恢复快照：</h3></li>\n<li><p>Window &gt; Restore Window Arrangement</p>\n<ul>\n<li>可以在Preferences &gt; General &gt; Open saved window arrangement.设置自动恢复快照</li>\n</ul>\n</li>\n</ul>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n\n","excerpt":"不会命令行的程序员不会好程序员不是好前端码代码的时候听音乐更有激情哟 早上上班的时候看到地铁站 速度与激情的广告电影中最爱的一个系列 满满的情怀 来首 see you again 回顾下两年前的速7","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"http://www.ding1996.cn/tags/mac/"}]},{"title":"如何高效的配置macpro工作环境","date":"2017-04-07T06:13:46.000Z","path":"2017/04/07/it-mac-envsetting/","text":"工欲善其事，必先利其器，工具永远都是用来解决问题的，没必要为了工具而工具，一切工具都是为了能快速准确的完成工作和学习任务而服务。 查看详情请戳我 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流 tags: 本文记录整个配置过程，供新入手 MacBook 和觉得 MacBook 比较难用的同学参考。 1. 硬件提升 笔记本电脑的特点是携带方便，缺点是屏幕太小，因此你首先需要再申请领用一个外接显示器，多一个屏幕会大大减少你切换应用程序的次数，显著提升你的工作效率，别忘了同时申请一个 Mini DP 转 VGA 的转接头用于连接显示器。为了配合多显示器，后面会推荐一个软件来管理多显示器窗口。 如果你资金宽裕，可以买个机械键盘和无线鼠标，进一步提升工作效率。 2. 系统设置 2. 1 将功能键(F1-F12) 设置为标准的功能键 MacBook 键盘最上面一排的功能键(F1-F12) 默认是系统亮度和声音之类的快捷设置，当 MacBook 作为你的娱乐电脑时，这样的默认设置是非常方便的，但是对于将 MacBook 作为工作电脑而且需要频繁使用功能键(F1-F12) 的人，最好将功能键(F1-F12) 的行为设置为标准的功能键。 首先打开System Preferences，点击Keyboard图标，勾选上Use all F1, F2, etc. keys as standard function keys。以后如果你要调节音量，就按住键盘左下角的fn键再按 F11 或者 F12。 211 图 2.1-1 2. 2 设置 Trackpad（触摸板）轻触为单击 当你首次使用 MacBook，是否会觉得触摸板一点都不顺滑？那是因为你需要做如下设置。 打开System Preferences，点击Trackpad图标，勾选Tap to click选项，现在手指轻轻一碰触摸板，就达到鼠标单击的顺滑效果。 2. 3 将 Dock 停靠在屏幕左边 为什么要将Dock停靠在屏幕左边？MacBook 的屏幕是一个长方形，如果你将Dock放在下面，那么屏幕的可用宽度就会减少，另外人眼阅读时的顺序是从左往右，因此Dock放在左边更适合将 MacBook 作为工作电脑的人。 打开System Preferences，点击Dock图标， 将图标的Size调到合适大小关闭Magnification特效（即鼠标放到 Dock 上图标放大的效果，此效果干扰注意力）在Position on screen一栏，选择Left勾选Minimize window into application icon231 图 2.3-1 2. 4 全键盘控制模式 全键盘控制模式是什么？ 举一个例子，如下图所示，我正在写一个文档，此文档还没有保存，也没有文件名，如果不不小心点了关闭按钮，将会弹出一个对话框： 241 图 2.4-1 当前，[Save]按钮处于默认激活状态，按回车将会弹出保存对话框。但是如果我不想保存呢？ 只能通过鼠标或者触摸板来移动光标后点击[Don’t Save]来取消保存。那我能不能通过键盘控制光标激活[Don’t Save]按钮呢？ 答案是肯定的，做一个简单设置就好。 如图，首先打开System Preferences，点击Keyboard图标，选择Shortcuts这个 Tab, 选中All controls 242 图 2.4-2 现在当我再次试图关闭一个未保存的文件时，新弹出的对话框如下，有了些许变化，在[Don’t Save]按钮上多了一个蓝色的外框，当你按键盘上的tab键的时候，蓝色的外框会在 3 个按钮间切换。 假设现在蓝色的外框在[Don’t Save]按钮上，你按下回车，却发现系统依然进入了保存文件对话框，为什么蓝色的外框不起作用呢？那是因为蓝色的外框选中的按钮是由空格键触发的，当你按下空格键，系统就会不保存文件直接退出。 这样当你不方便使用鼠标和触摸板的时候，可以更快速的和你的 MacBook 交互。 243 图 2.4-3 2. 5 快速锁定屏幕 如果你长时间离开电脑，最好锁定你的屏幕，以防止数据泄露。 那如何快速的锁定你的 MacBook 呢？ 答案是只需要一摸触摸板或者一甩鼠标就可以了。 打开System Preferences，点击Desktop &amp; Screen Saver图标，选择Screen Saver这个 Tab，再点击Hot Corners…，在弹出的如下界面里面，右下角选择Put Display to Sleep，点击 OK 确定。251图 2.5-1 再打开System Preferences，点击Security &amp; Privacy图标，在GeneralTab 内，勾选Require password[immediately] after sleep or screen save begins。252 图 2.5-2 现在当你离开电脑前时，记得一摸触摸板或者一甩鼠标将光标快速的移到屏幕的右下角，MacBook 将立刻进入Screen Saver模式并且需要密码才能进入桌面。 3. 系统常用快捷键 请点击这个文档，学习系统快捷键，适当使用快捷键将会提升你的工作效率。 4. 日常软件推荐 4. 1 中文输入法 系统自带的输入法不是很好用，推荐安装搜狗输入法或者 RIME 输入法。安装完成后，打开System Preferences，选择Keyboard，切换到Shortcuts这个 Tab 下，勾选Select the previous input source，并点击上述文字后面的空白处，设置快捷键为Ctrl+Space(即如图所示的^Space)。 411 图 4.1-1 4. 2 窗口管理软件 - SizeUp 你是否经常想让某个 Word 文档占满屏幕的左半部分，旺旺聊天占满屏幕的右半部分，从而一边对着文档一边和小伙伴聊需求？终于搞好了外接显示器，你是否经常将某个窗口在笔记本和外接显示器屏幕之间直接来回拖动？ SizeUp 快速解决这样的需求，该软件可以永久免费试用，下载安装后打开 SizeUp，再打开旺旺，快捷键按下control+option+command + M，则旺旺就会立即进入全屏模式。 然而大部分情况下，你会看到如下这个提示，这是因为 SizeUp 需要你的授权才能控制窗口。 421 图 4.2-1 直接点击Open System Preferences或者打开System Preferences，点击Security &amp; Privacy图标，在PrivacyTab 内，点击Accessibility，然后将 SizeUp 加到右边的列表里面。（提示：你可能需要先点击右下角的黄色锁，输入密码后才能编辑右边的列表。） 422 图 4.2-2 如果你此时接上了外接显示器，快捷键按下control+option + 方向键右键，则当前左边显示器激活的最前端窗口将被立即发送到右边的显示器。 下面列举一些 SizeUp 常用的快捷键，更多的快捷键和使用方式请查询其官方网站。 control+option+command + M ： 使当前窗口全屏control+option+command + 方向键上键 ： 使当前窗口占用当前屏幕上半部分control+option+command + 方向键下键 ： 使当前窗口占用当前屏幕下半部分control+option+command + 方向键左键 ： 使当前窗口占用当前屏幕左半部分control+option+command + 方向键右键 ： 使当前窗口占用当前屏幕右半部分control+option + 方向键左键 ： 将当前窗口发送到左边显示器屏幕control+option + 方向键右键 ： 将当前窗口发送到右边显示器屏幕 4. 3 查找文件和应用程序以及无限想象力 - Alfred 如果你曾经使用过 MacBook，你应该接触过 Spotlight，就是屏幕中间弹出一个长条输入框，你输入文件名或者应用程序名，Spotlight 将模糊查找到对应的候选项，按回车快速的打开你需要的文件或程序。 Alfred 的能力远远超过了 Spotlight, 你可以直接下载免费版安装使用，Alfred 另外还提供了更强大的工作流(Workflows)和剪切板(Clipboard)管理等高级功能，需要购买 Powerpack。对于日常的操作，免费版已经足够使用了。 因为 Alfred 可以完全取代 Spotlight，下面先删除 Spotlight 占用的快捷键command + 空格，以供 Alfred 将来使用。 打开System Preferences，选择Keyboard，切换到Shortcuts这个 Tab 下，点击 Spotlight，取消对应的 2 个快捷键设置。 431 图 4.3-1 打开 Alfred，在菜单栏点击 Alfred 图标，打开Preferences… 432 图 4.3-2 如下图所示，设置 Alfred 的快捷键为command + 空格 433 图 4.3-3 现在按下快捷键command + 空格，输入ali，则 Alfred 不区分大小写的将所有包含ali的应用程序，文档以及历史网址都列出来了，如下图所示，回车打开淘云盘，command+2打开本地一个 xmind 文件，你还可以移动键盘上下键或者光标来选择目标。 434 图 4.3-4 更多关于 Alfred 的使用方式和无限想象力，请参考官方网站或者网上现有的大量的教程。 下面简单演示一下剪切板管理和厂内查人工作流的使用。如下图所示，我使用快捷键打开剪切板管理器，列出来我最近复制过的文本片段，我可以快速的选取这些文本片段或者输入部分字符来查找。 435 图 4.3-5 当你安装了由@文通开发的厂内查人 workflow 后，激活 Alfred，输入r+ 空格，再输入某人的花名，就可以看到对方的简单信息。 按回车打开阿里内外对方信息页面按ctrl+ 回车，直接打开对方旺旺进入聊天模式436 图 4.3-6 4. 4 聪明又美丽的日历 – Fantastical 2 打开 Fantastical 2的网站，你一定会被她漂亮的外表所吸引，最可贵的是 Fantastical 还很聪明，当你在日历里面新建一个提醒的时候，输入如下内容“HTML training at 7:30pm tomorrow alert 5 min”， 则 Fantastical 会自动将日期设置为明天，然后将开始时间设置为晚上 7 点半，并且提前 5 分钟提醒，是不是很聪明？ 441 图 4.4-1 4. 5 来杯免费咖啡 – Caffeine 今天下午给大老板和重要客户演示 PPT，你仿佛看到了升职加薪走上人生巅峰，当你打开 MacBook 接上投影仪，口若悬河的讲解，突然 MacBook 进入休眠模式了，画面太美了，我不敢想了。 你应该立刻安装这款免费的良心软件—Caffeine，设置开机启动，点一下状态栏的咖啡杯图标，当咖啡是满的时候，MacBook 将不会进入休眠模式，再点一下咖啡杯空了就正常休眠，我默认设置开机启动，咖啡杯保持满满的状态。 4. 6 快速切换和打开应用程序 – Manico MacBook 系统默认设置了一个快捷键来显示当前运行中的应用程序，同时按下tab + command，将看到如下图的样式： 461 图 4.6-1 如果你想要却换到 Firefox，需要再按一下tab，如果要切换到日历，需要按两下‘tab’，如果一次性打开 10 几个应用程序，你经常需要按十几下tab才能却换到想要的程序。 Manico 专为这个场景而设计，安装好后打开，默认快捷键是按住option，如图所示，此时按下数字7就能快速打开编号为7的地图。 462 图 4.6-2 另外，推荐设置 Manico 使用左手边的字母加数字做索引，方便仅仅用左手就能快速切换应用程序。在菜单栏点击 Manico 图标，打开Preferences…， 在AppearanceTab 里面，选择Uses left hand area和Use numeric and alphabet。 463 图 4.6-3 4. 7 随心所欲的复制粘贴以及无限想象 – PopClip 日常工作中，你有多少次是从一个应用程序复制一段文本然后粘贴到另外一个地方？有多少次是复制一个网址然后打开浏览器粘贴到地址栏然后回车打开？有多少次是复制一个名词，然后打开浏览器找到搜索引擎来搜索？ 这些重复的操作模式都是可以简化的，你唯一需要的就是 PopClip，当你选中一段文字（如下图，选中“当日收益”），PopClip 就会弹出来一个快捷操作栏，你可以复制，剪切或者粘贴，更为强大的是，PopClip 提供了很多免费的插件，例如使用指定的搜索引擎搜索选中的文字，或者选中英文单词做大小写转换等等。 471 图 4.7-1 需要注意的是，PopClip 需要你的授权才能弹出快捷状态栏，直接点击Open System Preferences或者打开System Preferences，点击Security &amp; Privacy图标，在PrivacyTab 内，点击Accessibility，然后将 PopClip 加到右边的列表里面并且勾选前面的 checkbook。（提示：你可能需要先点击右下角的黄色锁，输入密码后才能编辑右边的列表。） 4. 8 增强资源管理器 – XtraFinder MacBook 自带的资源管理器(Finder)已经可以满足一般的需要，但是当你有大量文件维护操作后，你就需要一个更强大的 Finder。XtraFinder 完全集成到 Finder 里面，你根本感觉不出它是一个第三方的应用程序，同时还提供很多增强特性，比如： 像浏览器那样的标签页(Tab)支持双操作面板(Panel)增强的全局快捷键，例如新建文件(New File)等多彩的侧边栏图标快速在当前文件夹打开终端快速在当前文件夹新建文件481 图 4.8-1 4. 9 随心所欲的全键盘控制 - Shortcat 在系统设置里面，我介绍了全键盘控制模式，但是此模式只能做简单的按钮控制，无法达到随心所欲的控制。下面介绍一款比较 geek 的软件，Shortcat 帮助你完全使用键盘来控制系统，供有键盘强迫症的同学使用。 491 图 4.9-1 4. 10 来杯鸡尾酒 – Bartender 如果你看到这里，相信你已经被我推(hu)荐(you)的安装了一排软件，你的系统状态栏已经人满为患，有时候会因为当前激活的应用程序的菜单比较多挡住你要点击的状态栏图标，这个时候你需要一个酒保来帮你调理一下状态栏，Bartender 将是我推荐的最后一个日常使用的 App，你可以自定义隐藏某些不常用的状态栏图标，特别适合处女座强迫症。 4101 图 4.10-1 5. 开发环境配置 终于到了开发环境配置阶段，在配置开发环境前，建议先将 OS X 系统升级到最新版，同时去 Mac App Store 下载最新版的 Xcode，然后使用下面的命令安装 Xcode command line tools，这将为你安装很多终端下面常用的命令，将来很可能会使用到： xcode-select –install 5. 1 命令行终端 Terminal 在用户界面没有发明前，终端 Terminal 曾经是计算机的唯一交互方式，就算到了今天，很多服务器仍然只提供终端登陆来操作，作为开发测试运维相关人员，在日常工作中合理使用终端将大大提高工作效率。 5. 1.1 替换系统默认 Shell – Oh My ZSH! Bash 作为大多数系统默认安装的 Shell，大家都多少有所接触，Zsh 和 Bash 类似都是一个 Shell，但是 Zsh 更注重用户体验和与人的交互，OS X 默认也安装好了 Zsh，然而你想自己从头开始配置一个顺手的 Zsh 是比较浪费时间的，有人已经帮我们配置好了，这个流行的 Zsh 配置叫—Oh My ZSH!，直观的效果如下图所示，代码开源在 github。 5111 图 5.1.1-1 切换默认 Shell 到 Zsh Mac OS X 默认已经安装好了 Zsh，你可以打开终端，输入zsh –version来确认，如果没有安装，请参考这个文档。 打开终端输入下面的命令，切换默认 Shell 为 Zsh： chsh -s /bin/zsh 关闭终端重新打开后，你将默认使用 zsh 作为终端 Shell。然而你会发现，终端并没有变得多酷炫，接着往下走，安装 Oh My ZSH! 安装 Oh My ZSH! 打开终端输入下面的命令： sh -c “$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot; 耐心等待一会儿，然后你就会发现你的终端变成了彩色的了。 5112 图 5.1.1-2 你可以修改终端的 Profile，选择深色背景 profile，这样就比较炫酷了。如果你对默认的Oh My ZSH的配色不满意，请参考这里找到你喜欢的配色。 5. 1.2 替换系统默认终端 – iTerm 2 如果你经常使用终端，那么推荐你使用 iTerm 2来替代系统自带的终端。关于 iTerm 2 的特性，请看这里。 这里我只介绍一个小技巧，我想设置一个快捷键假设为 F12，在任意场合，我按一下快捷键 F12 就弹出终端，输入一些命令执行后，再按一下 F12 终端就自动隐藏，这对经常使用终端的人，例如经常 ssh 连接服务器的人来说实在太方便了。 设置过程如下： 系统已经默认将 F12 分配给Show Dashboard，需要先取消这个设置。 打开System Preferences，选择Keyboard，切换到Shortcuts这个 Tab 下，点击Mission Control，取消对应 F12 的快捷键。 5121 图 5.1.2-1 打开 iTerm 的Preferences…， 在ProfilesTab 里面，点击下面的[+]添加一个新的 profile，为什么要新建一个 profile？答案是为了定制将来弹出的终端样式和大小等等参数。新的 profile 假设命名为 guake，(注：guake 这个名称是为了向 Linux 下的 Guake 终端致敬)，你可以自己任意起个名称，下面会用到。5122 图 5.1.2-2 再切换到WindowTab 下，将Style，Screen和Space这 3 个值设置和下图一样。 5123 图 5.1.2-3 再切换到KeysTab 下，设置如下图所示的HotkeyF12。 5124 图 5.1.2-4 现在你按下 F12，就立即得到一个占满全屏的黑色命令行终端，再按一下 F12 隐藏终端，非常的方便。 5. 2 终端下的命令管理 – Homebrew Mac App Store 你一定非常熟悉了，它可以帮你下载和安装大部分常见的软件。 在终端下，我们也需要一个 App Store 一样的管理程序，当你需要安装某个终端下的新命令的时候，这个程序可以帮助我们自动下载该命令以及相关的依赖，甚至在下载以后做必要的编译和环境设置。 Homebrew 就是这样一款终端下的命令程序包管理器，安装非常简单，复制如下命令在终端下运行，按回车并输入密码后等待安装成功： ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 下面是安装截图： 521 图 5.2-1 curl 和 wget 是命令行下面常用的命令，其中 curl 已经默认安装在 OS X 中了，但是 wget 没有默认安装，下面演示如何使用 Homebrew 来安装 wget。 brew install wget 下面是运行截图： 522 图 5.2-2 5. 3 终端下管理非终端软件 – Homebrew Cask 因为 Apple 不允许第三方的浏览器进入 Mac App Store，如果你想要安装 Google Chrome，只能去 Google 网站下载后运行安装文件。这一类 App Store 没有的非终端下的软件能不能享受 Homebrew 一样的命令行安装的便捷性呢？ Homebrew Cask 就是这样一款终端下的程序管理器，它扩展了 Homebrew，作为 Mac App Store 的有益补充，方便你快速维护日常软件的安装升级和卸载，复制如下命令在终端下运行，按回车后等待安装成功： brew install caskroom/cask/brew-cask 下面是运行截图： 531 图 5.3-1 那如何使用 Homebrew Cask 来安装 Google Chrome 呢？ 首先使用chrome作为关键字查找一下： brew cask search chrome ==&gt; Partial matches chrome-devtools chrome-remote-desktop-host chromecast google-chrome 上面的命令运行后列出了 4 个候选项，很明显最后一个google-chrome就是我们要安装的，继续输入 brew cask install google-chrome 下面只需要稍微等一会儿，最新版的 Google Chrome 就乖乖的安装在你的 MacBook 里面了。 5. 4 Java 开发环境搭建 5. 4.1 安装 Java 和 Maven 现在 OS X 没有默认安装 JDK，如果你在终端输入java，系统会引导你到 Oracle 网站去下载，然后自己点击下载文件来安装，这个过程一点都不酷，而且不能自动化。现在你有了 Homebrew Cask，只要输入如下命令，Java 就可以自动安装好啦。 brew cask install java 现在最近版本的 JDK 是 1.8，Homebrew 默认安装最新版软件，如果你要安装非最新版的 JDK，那么去 Oracle 网站下载吧，Homebrew 的多版本支持不是很好用。 同样的，输入如下命令来安装 Maven 最新版。 brew install maven 在开发中，你很可能会碰到这个错误java.security.InvalidKeyException: Illegal key size or default parameters，那是因为美国对出口软件加密算法长度的限制，你需要去如下链接下载补丁包： JCE Unlimited Policy for JDK 6JCE Unlimited Policy for JDK 7JCE Unlimited Policy for JDK 8 补丁替换路径为${java.home}/jre/lib/security/，大约如下所示： /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib/security 5. 4.2 安装版本控制软件 – SmartGit &amp; SmartSVN 如果代码就是生命，版本控制系统就是时光机。Git 和 Subversion 分别是现在最流行的 2 个版本控制系统，SmartGit 和 SmartSVN 分别是他们的一个第三方客户端，当然他们有很多第三方客户端，我觉得 SmartGit 和 SmartSVN 是最好用的。 5. 4.3 安装和配置 IDE – IntelliJ IDEA IntelliJ IDEA 作为最智能的 Java IDE，推荐所有 Java 开发人员使用，你可以在这里下载安装文件，或者使用如下的 Homebrew Cask 命令来下载安装： brew cask install intellij-idea 打开 IDEA，推荐选择Darcula主题，快捷键映射选择I’ve never used IDEA, 一路确认下去进入主界面。 推荐使用版本控制客户端(SmartGit &amp; SmartSVN)下载好源代码后，再使用 IDEA 导入源代码，原因是如果用 IDEA 来 checkout 源代码，一边 checkout 一边分析代码，对于有多个模块的 Maven 项目，IDEA 动态检测 Spring 框架的配置文件可能会得不到及时而完整的依赖分析。 5421 图 5.4.2-1 我们假设项目是基于 Maven 的，如下图，选择Maven： 5422 图 5.4.2-2 一路点击[Next]进入主界面，IDEA 会帮我们自动检测到依赖的框架，如图 IDEA 发现我们使用了 OSGI 和 Spring 框架，点击[Configure]，然后去除 OSGI 依赖，因为 SOFA 项目不是完全实现 OSGI 规范的，勾选 Spring 配置文件。 5423 图 5.4.2-3 IDEA 会在你首次导入一个项目的时候建立索引，耐心等待索引建立完成，之后的查找就会非常快速。 6. 工具的意义 工欲善其事，必先利其器，工具永远都是用来解决问题的，没必要为了工具而工具，一切工具都是为了能快速准确的完成工作和学习任务而服务。 d91bb7c23220559e6b55c0770726c7cf20effc06","content":"<p>　　工欲善其事，必先利其器，工具永远都是用来解决问题的，没必要为了工具而工具，一切工具都是为了能快速准确的完成工作和学习任务而服务。</p>\n<p><a href=\"http://blog.jobbole.com/89013/\" target=\"_blank\" rel=\"noopener\">查看详情请戳我</a></p>\n<hr>\n<p><div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"></center></center></div></p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h2 id=\"tags\"><a href=\"#tags\" class=\"headerlink\" title=\"tags:\"></a>tags:</h2><p>　本文记录整个配置过程，供新入手 MacBook 和觉得 MacBook 比较难用的同学参考。</p>\n<p>　　1. 硬件提升</p>\n<p>　　笔记本电脑的特点是携带方便，缺点是屏幕太小，因此你首先需要再申请领用一个外接显示器，多一个屏幕会大大减少你切换应用程序的次数，显著提升你的工作效率，别忘了同时申请一个 Mini DP 转 VGA 的转接头用于连接显示器。为了配合多显示器，后面会推荐一个软件来管理多显示器窗口。</p>\n<p>　　如果你资金宽裕，可以买个机械键盘和无线鼠标，进一步提升工作效率。</p>\n<p>　　2. 系统设置</p>\n<p>　　2. 1 将功能键(F1-F12) 设置为标准的功能键</p>\n<p>　　MacBook 键盘最上面一排的功能键(F1-F12) 默认是系统亮度和声音之类的快捷设置，当 MacBook 作为你的娱乐电脑时，这样的默认设置是非常方便的，但是对于将 MacBook 作为工作电脑而且需要频繁使用功能键(F1-F12) 的人，最好将功能键(F1-F12) 的行为设置为标准的功能键。</p>\n<p>　　首先打开System Preferences，点击Keyboard图标，勾选上Use all F1, F2, etc. keys as standard function keys。以后如果你要调节音量，就按住键盘左下角的fn键再按 F11 或者 F12。</p>\n<p>211</p>\n<p>　　图 2.1-1</p>\n<p>　　2. 2 设置 Trackpad（触摸板）轻触为单击</p>\n<p>　　当你首次使用 MacBook，是否会觉得触摸板一点都不顺滑？那是因为你需要做如下设置。</p>\n<p>　　打开System Preferences，点击Trackpad图标，勾选Tap to click选项，现在手指轻轻一碰触摸板，就达到鼠标单击的顺滑效果。</p>\n<p>　　2. 3 将 Dock 停靠在屏幕左边</p>\n<p>　　为什么要将Dock停靠在屏幕左边？MacBook 的屏幕是一个长方形，如果你将Dock放在下面，那么屏幕的可用宽度就会减少，另外人眼阅读时的顺序是从左往右，因此Dock放在左边更适合将 MacBook 作为工作电脑的人。</p>\n<p>　　打开System Preferences，点击Dock图标，</p>\n<p>将图标的Size调到合适大小<br>关闭Magnification特效（即鼠标放到 Dock 上图标放大的效果，此效果干扰注意力）<br>在Position on screen一栏，选择Left<br>勾选Minimize window into application icon<br>231</p>\n<p>　　图 2.3-1</p>\n<p>　　2. 4 全键盘控制模式</p>\n<p>　　全键盘控制模式是什么？ 举一个例子，如下图所示，我正在写一个文档，此文档还没有保存，也没有文件名，如果不不小心点了关闭按钮，将会弹出一个对话框：</p>\n<p>241</p>\n<p>　　图 2.4-1</p>\n<p>　　当前，[Save]按钮处于默认激活状态，按回车将会弹出保存对话框。但是如果我不想保存呢？ 只能通过鼠标或者触摸板来移动光标后点击[Don’t Save]来取消保存。那我能不能通过键盘控制光标激活[Don’t Save]按钮呢？ 答案是肯定的，做一个简单设置就好。</p>\n<p>　　如图，首先打开System Preferences，点击Keyboard图标，选择Shortcuts这个 Tab, 选中All controls</p>\n<p>242</p>\n<p>　　图 2.4-2</p>\n<p>　　现在当我再次试图关闭一个未保存的文件时，新弹出的对话框如下，有了些许变化，在[Don’t Save]按钮上多了一个蓝色的外框，当你按键盘上的tab键的时候，蓝色的外框会在 3 个按钮间切换。 假设现在蓝色的外框在[Don’t Save]按钮上，你按下回车，却发现系统依然进入了保存文件对话框，为什么蓝色的外框不起作用呢？那是因为蓝色的外框选中的按钮是由空格键触发的，当你按下空格键，系统就会不保存文件直接退出。 这样当你不方便使用鼠标和触摸板的时候，可以更快速的和你的 MacBook 交互。</p>\n<p>243</p>\n<p>　　图 2.4-3</p>\n<p>　　2. 5 快速锁定屏幕</p>\n<p>　　如果你长时间离开电脑，最好锁定你的屏幕，以防止数据泄露。 那如何快速的锁定你的 MacBook 呢？ 答案是只需要一摸触摸板或者一甩鼠标就可以了。</p>\n<p>打开System Preferences，点击Desktop &amp; Screen Saver图标，选择Screen Saver这个 Tab，再点击Hot Corners…，在弹出的如下界面里面，右下角选择Put Display to Sleep，点击 OK 确定。251<br>图 2.5-1</p>\n<p>再打开System Preferences，点击Security &amp; Privacy图标，在GeneralTab 内，勾选Require password[immediately] after sleep or screen save begins。<br>252</p>\n<p>　　图 2.5-2</p>\n<p>　　现在当你离开电脑前时，记得一摸触摸板或者一甩鼠标将光标快速的移到屏幕的右下角，MacBook 将立刻进入Screen Saver模式并且需要密码才能进入桌面。</p>\n<p>　　3. 系统常用快捷键</p>\n<p>　　请点击这个文档，学习系统快捷键，适当使用快捷键将会提升你的工作效率。</p>\n<p>　　4. 日常软件推荐</p>\n<p>　　4. 1 中文输入法</p>\n<p>　　系统自带的输入法不是很好用，推荐安装搜狗输入法或者 RIME 输入法。安装完成后，打开System Preferences，选择Keyboard，切换到Shortcuts这个 Tab 下，勾选Select the previous input source，并点击上述文字后面的空白处，设置快捷键为Ctrl+Space(即如图所示的^Space)。</p>\n<p>411</p>\n<p>　　图 4.1-1</p>\n<p>　　4. 2 窗口管理软件 - SizeUp</p>\n<p>你是否经常想让某个 Word 文档占满屏幕的左半部分，旺旺聊天占满屏幕的右半部分，从而一边对着文档一边和小伙伴聊需求？<br>终于搞好了外接显示器，你是否经常将某个窗口在笔记本和外接显示器屏幕之间直接来回拖动？<br>　　SizeUp 快速解决这样的需求，该软件可以永久免费试用，下载安装后打开 SizeUp，再打开旺旺，快捷键按下control+option+command + M，则旺旺就会立即进入全屏模式。</p>\n<p>　　然而大部分情况下，你会看到如下这个提示，这是因为 SizeUp 需要你的授权才能控制窗口。</p>\n<p>421</p>\n<p>　　图 4.2-1</p>\n<p>　　直接点击Open System Preferences或者打开System Preferences，点击Security &amp; Privacy图标，在PrivacyTab 内，点击Accessibility，然后将 SizeUp 加到右边的列表里面。（提示：你可能需要先点击右下角的黄色锁，输入密码后才能编辑右边的列表。）</p>\n<p>422</p>\n<p>　　图 4.2-2</p>\n<p>　　如果你此时接上了外接显示器，快捷键按下control+option + 方向键右键，则当前左边显示器激活的最前端窗口将被立即发送到右边的显示器。</p>\n<p>　　下面列举一些 SizeUp 常用的快捷键，更多的快捷键和使用方式请查询其官方网站。</p>\n<p>control+option+command + M ： 使当前窗口全屏<br>control+option+command + 方向键上键 ： 使当前窗口占用当前屏幕上半部分<br>control+option+command + 方向键下键 ： 使当前窗口占用当前屏幕下半部分<br>control+option+command + 方向键左键 ： 使当前窗口占用当前屏幕左半部分<br>control+option+command + 方向键右键 ： 使当前窗口占用当前屏幕右半部分<br>control+option + 方向键左键 ： 将当前窗口发送到左边显示器屏幕<br>control+option + 方向键右键 ： 将当前窗口发送到右边显示器屏幕<br>　　4. 3 查找文件和应用程序以及无限想象力 - Alfred</p>\n<p>　　如果你曾经使用过 MacBook，你应该接触过 Spotlight，就是屏幕中间弹出一个长条输入框，你输入文件名或者应用程序名，Spotlight 将模糊查找到对应的候选项，按回车快速的打开你需要的文件或程序。</p>\n<p>　　Alfred 的能力远远超过了 Spotlight, 你可以直接下载免费版安装使用，Alfred 另外还提供了更强大的工作流(Workflows)和剪切板(Clipboard)管理等高级功能，需要购买 Powerpack。对于日常的操作，免费版已经足够使用了。</p>\n<p>　　因为 Alfred 可以完全取代 Spotlight，下面先删除 Spotlight 占用的快捷键command + 空格，以供 Alfred 将来使用。</p>\n<p>　　打开System Preferences，选择Keyboard，切换到Shortcuts这个 Tab 下，点击 Spotlight，取消对应的 2 个快捷键设置。</p>\n<p>431</p>\n<p>　　图 4.3-1</p>\n<p>　　打开 Alfred，在菜单栏点击 Alfred 图标，打开Preferences…</p>\n<p>432</p>\n<p>　　图 4.3-2</p>\n<p>　　如下图所示，设置 Alfred 的快捷键为command + 空格</p>\n<p>433</p>\n<p>　　图 4.3-3</p>\n<p>　　现在按下快捷键command + 空格，输入ali，则 Alfred 不区分大小写的将所有包含ali的应用程序，文档以及历史网址都列出来了，如下图所示，回车打开淘云盘，command+2打开本地一个 xmind 文件，你还可以移动键盘上下键或者光标来选择目标。</p>\n<p>434</p>\n<p>　　图 4.3-4</p>\n<p>　　更多关于 Alfred 的使用方式和无限想象力，请参考官方网站或者网上现有的大量的教程。</p>\n<p>　　下面简单演示一下剪切板管理和厂内查人工作流的使用。如下图所示，我使用快捷键打开剪切板管理器，列出来我最近复制过的文本片段，我可以快速的选取这些文本片段或者输入部分字符来查找。</p>\n<p>435</p>\n<p>　　图 4.3-5</p>\n<p>　　当你安装了由@文通开发的厂内查人 workflow 后，激活 Alfred，输入r+ 空格，再输入某人的花名，就可以看到对方的简单信息。</p>\n<p>按回车打开阿里内外对方信息页面<br>按ctrl+ 回车，直接打开对方旺旺进入聊天模式<br>436</p>\n<p>　　图 4.3-6</p>\n<p>　　4. 4 聪明又美丽的日历 – Fantastical 2</p>\n<p>　　打开 Fantastical 2的网站，你一定会被她漂亮的外表所吸引，最可贵的是 Fantastical 还很聪明，当你在日历里面新建一个提醒的时候，输入如下内容“HTML training at 7:30pm tomorrow alert 5 min”， 则 Fantastical 会自动将日期设置为明天，然后将开始时间设置为晚上 7 点半，并且提前 5 分钟提醒，是不是很聪明？</p>\n<p>441</p>\n<p>　　图 4.4-1</p>\n<p>　　4. 5 来杯免费咖啡 – Caffeine</p>\n<p>　　今天下午给大老板和重要客户演示 PPT，你仿佛看到了升职加薪走上人生巅峰，当你打开 MacBook 接上投影仪，口若悬河的讲解，突然 MacBook 进入休眠模式了，画面太美了，我不敢想了。</p>\n<p>　　你应该立刻安装这款免费的良心软件—Caffeine，设置开机启动，点一下状态栏的咖啡杯图标，当咖啡是满的时候，MacBook 将不会进入休眠模式，再点一下咖啡杯空了就正常休眠，我默认设置开机启动，咖啡杯保持满满的状态。</p>\n<p>　　4. 6 快速切换和打开应用程序 – Manico</p>\n<p>　　MacBook 系统默认设置了一个快捷键来显示当前运行中的应用程序，同时按下tab + command，将看到如下图的样式：</p>\n<p>461</p>\n<p>　　图 4.6-1</p>\n<p>　　如果你想要却换到 Firefox，需要再按一下tab，如果要切换到日历，需要按两下‘tab’，如果一次性打开 10 几个应用程序，你经常需要按十几下tab才能却换到想要的程序。</p>\n<p>　　Manico 专为这个场景而设计，安装好后打开，默认快捷键是按住option，如图所示，此时按下数字7就能快速打开编号为7的地图。</p>\n<p>462</p>\n<p>　　图 4.6-2</p>\n<p>　　另外，推荐设置 Manico 使用左手边的字母加数字做索引，方便仅仅用左手就能快速切换应用程序。在菜单栏点击 Manico 图标，打开Preferences…， 在AppearanceTab 里面，选择Uses left hand area和Use numeric and alphabet。</p>\n<p>463</p>\n<p>　　图 4.6-3</p>\n<p>　　4. 7 随心所欲的复制粘贴以及无限想象 – PopClip</p>\n<p>日常工作中，你有多少次是从一个应用程序复制一段文本然后粘贴到另外一个地方？<br>有多少次是复制一个网址然后打开浏览器粘贴到地址栏然后回车打开？<br>有多少次是复制一个名词，然后打开浏览器找到搜索引擎来搜索？<br>　　这些重复的操作模式都是可以简化的，你唯一需要的就是 PopClip，当你选中一段文字（如下图，选中“当日收益”），PopClip 就会弹出来一个快捷操作栏，你可以复制，剪切或者粘贴，更为强大的是，PopClip 提供了很多免费的插件，例如使用指定的搜索引擎搜索选中的文字，或者选中英文单词做大小写转换等等。</p>\n<p>471</p>\n<p>图 4.7-1</p>\n<p>　　需要注意的是，PopClip 需要你的授权才能弹出快捷状态栏，直接点击Open System Preferences或者打开System Preferences，点击Security &amp; Privacy图标，在PrivacyTab 内，点击Accessibility，然后将 PopClip 加到右边的列表里面并且勾选前面的 checkbook。（提示：你可能需要先点击右下角的黄色锁，输入密码后才能编辑右边的列表。）</p>\n<p>　　4. 8 增强资源管理器 – XtraFinder</p>\n<p>　　MacBook 自带的资源管理器(Finder)已经可以满足一般的需要，但是当你有大量文件维护操作后，你就需要一个更强大的 Finder。XtraFinder 完全集成到 Finder 里面，你根本感觉不出它是一个第三方的应用程序，同时还提供很多增强特性，比如：</p>\n<p>像浏览器那样的标签页(Tab)<br>支持双操作面板(Panel)<br>增强的全局快捷键，例如新建文件(New File)等<br>多彩的侧边栏图标<br>快速在当前文件夹打开终端<br>快速在当前文件夹新建文件<br>481</p>\n<p>　　图 4.8-1</p>\n<p>　　4. 9 随心所欲的全键盘控制 - Shortcat</p>\n<p>　　在系统设置里面，我介绍了全键盘控制模式，但是此模式只能做简单的按钮控制，无法达到随心所欲的控制。下面介绍一款比较 geek 的软件，Shortcat 帮助你完全使用键盘来控制系统，供有键盘强迫症的同学使用。</p>\n<p>491</p>\n<p>　　图 4.9-1</p>\n<p>　　4. 10 来杯鸡尾酒 – Bartender</p>\n<p>　　如果你看到这里，相信你已经被我推(hu)荐(you)的安装了一排软件，你的系统状态栏已经人满为患，有时候会因为当前激活的应用程序的菜单比较多挡住你要点击的状态栏图标，这个时候你需要一个酒保来帮你调理一下状态栏，Bartender 将是我推荐的最后一个日常使用的 App，你可以自定义隐藏某些不常用的状态栏图标，特别适合处女座强迫症。</p>\n<p>4101</p>\n<p>　　图 4.10-1</p>\n<p>　　5. 开发环境配置</p>\n<p>　　终于到了开发环境配置阶段，在配置开发环境前，建议先将 OS X 系统升级到最新版，同时去 Mac App Store 下载最新版的 Xcode，然后使用下面的命令安装 Xcode command line tools，这将为你安装很多终端下面常用的命令，将来很可能会使用到：</p>\n<p>xcode-select –install<br>　　5. 1 命令行终端 Terminal</p>\n<p>　　在用户界面没有发明前，终端 Terminal 曾经是计算机的唯一交互方式，就算到了今天，很多服务器仍然只提供终端登陆来操作，作为开发测试运维相关人员，在日常工作中合理使用终端将大大提高工作效率。</p>\n<p>　　5. 1.1 替换系统默认 Shell – Oh My ZSH!</p>\n<p>　　Bash 作为大多数系统默认安装的 Shell，大家都多少有所接触，Zsh 和 Bash 类似都是一个 Shell，但是 Zsh 更注重用户体验和与人的交互，OS X 默认也安装好了 Zsh，然而你想自己从头开始配置一个顺手的 Zsh 是比较浪费时间的，有人已经帮我们配置好了，这个流行的 Zsh 配置叫—Oh My ZSH!，直观的效果如下图所示，代码开源在 github。</p>\n<p>5111</p>\n<p>　　图 5.1.1-1</p>\n<p>切换默认 Shell 到 Zsh<br>　　Mac OS X 默认已经安装好了 Zsh，你可以打开终端，输入zsh –version来确认，如果没有安装，请参考这个文档。</p>\n<p>　　打开终端输入下面的命令，切换默认 Shell 为 Zsh：</p>\n<p>chsh -s /bin/zsh<br>　　关闭终端重新打开后，你将默认使用 zsh 作为终端 Shell。然而你会发现，终端并没有变得多酷炫，接着往下走，安装 Oh My ZSH!</p>\n<p>安装 Oh My ZSH!<br>　　打开终端输入下面的命令：</p>\n<p>sh -c “$(curl -fsSL <a href=\"https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;\" target=\"_blank\" rel=\"noopener\">https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</a><br>　　耐心等待一会儿，然后你就会发现你的终端变成了彩色的了。</p>\n<p>5112</p>\n<p>　　图 5.1.1-2</p>\n<p>　　你可以修改终端的 Profile，选择深色背景 profile，这样就比较炫酷了。如果你对默认的Oh My ZSH的配色不满意，请参考这里找到你喜欢的配色。</p>\n<p>　　5. 1.2 替换系统默认终端 – iTerm 2</p>\n<p>　　如果你经常使用终端，那么推荐你使用 iTerm 2来替代系统自带的终端。关于 iTerm 2 的特性，请看这里。</p>\n<p>　　这里我只介绍一个小技巧，我想设置一个快捷键假设为 F12，在任意场合，我按一下快捷键 F12 就弹出终端，输入一些命令执行后，再按一下 F12 终端就自动隐藏，这对经常使用终端的人，例如经常 ssh 连接服务器的人来说实在太方便了。</p>\n<p>　　设置过程如下：</p>\n<p>系统已经默认将 F12 分配给Show Dashboard，需要先取消这个设置。<br>　　打开System Preferences，选择Keyboard，切换到Shortcuts这个 Tab 下，点击Mission Control，取消对应 F12 的快捷键。</p>\n<p>5121</p>\n<p>　　图 5.1.2-1</p>\n<p>打开 iTerm 的Preferences…， 在ProfilesTab 里面，点击下面的[+]添加一个新的 profile，为什么要新建一个 profile？答案是为了定制将来弹出的终端样式和大小等等参数。新的 profile 假设命名为 guake，(注：guake 这个名称是为了向 Linux 下的 Guake 终端致敬)，你可以自己任意起个名称，下面会用到。<br>5122</p>\n<p>　　图 5.1.2-2</p>\n<p>　　再切换到WindowTab 下，将Style，Screen和Space这 3 个值设置和下图一样。</p>\n<p>5123</p>\n<p>　　图 5.1.2-3</p>\n<p>　　再切换到KeysTab 下，设置如下图所示的HotkeyF12。</p>\n<p>5124</p>\n<p>　　图 5.1.2-4</p>\n<p>　　现在你按下 F12，就立即得到一个占满全屏的黑色命令行终端，再按一下 F12 隐藏终端，非常的方便。</p>\n<p>　　5. 2 终端下的命令管理 – Homebrew</p>\n<p>　　Mac App Store 你一定非常熟悉了，它可以帮你下载和安装大部分常见的软件。</p>\n<p>　　在终端下，我们也需要一个 App Store 一样的管理程序，当你需要安装某个终端下的新命令的时候，这个程序可以帮助我们自动下载该命令以及相关的依赖，甚至在下载以后做必要的编译和环境设置。</p>\n<p>　　Homebrew 就是这样一款终端下的命令程序包管理器，安装非常简单，复制如下命令在终端下运行，按回车并输入密码后等待安装成功：</p>\n<p>ruby -e “$(curl -fsSL <a href=\"https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</a><br>　　下面是安装截图：</p>\n<p>521</p>\n<p>图 5.2-1</p>\n<p>　　curl 和 wget 是命令行下面常用的命令，其中 curl 已经默认安装在 OS X 中了，但是 wget 没有默认安装，下面演示如何使用 Homebrew 来安装 wget。</p>\n<p>brew install wget<br>　　下面是运行截图：</p>\n<p>522</p>\n<p>　　图 5.2-2</p>\n<p>　　5. 3 终端下管理非终端软件 – Homebrew Cask</p>\n<p>　　因为 Apple 不允许第三方的浏览器进入 Mac App Store，如果你想要安装 Google Chrome，只能去 Google 网站下载后运行安装文件。这一类 App Store 没有的非终端下的软件能不能享受 Homebrew 一样的命令行安装的便捷性呢？</p>\n<p>　　Homebrew Cask 就是这样一款终端下的程序管理器，它扩展了 Homebrew，作为 Mac App Store 的有益补充，方便你快速维护日常软件的安装升级和卸载，复制如下命令在终端下运行，按回车后等待安装成功：</p>\n<p>brew install caskroom/cask/brew-cask<br>　　下面是运行截图：</p>\n<p>531</p>\n<p>图 5.3-1</p>\n<p>　　那如何使用 Homebrew Cask 来安装 Google Chrome 呢？ 首先使用chrome作为关键字查找一下：</p>\n<blockquote>\n<p>brew cask search chrome ==&gt; Partial matches chrome-devtools chrome-remote-desktop-host chromecast google-chrome<br>　　上面的命令运行后列出了 4 个候选项，很明显最后一个google-chrome就是我们要安装的，继续输入</p>\n</blockquote>\n<blockquote>\n<p>brew cask install google-chrome<br>　　下面只需要稍微等一会儿，最新版的 Google Chrome 就乖乖的安装在你的 MacBook 里面了。</p>\n</blockquote>\n<p>　　5. 4 Java 开发环境搭建</p>\n<p>　　5. 4.1 安装 Java 和 Maven</p>\n<p>　　现在 OS X 没有默认安装 JDK，如果你在终端输入java，系统会引导你到 Oracle 网站去下载，然后自己点击下载文件来安装，这个过程一点都不酷，而且不能自动化。现在你有了 Homebrew Cask，只要输入如下命令，Java 就可以自动安装好啦。</p>\n<p>brew cask install java<br>　　现在最近版本的 JDK 是 1.8，Homebrew 默认安装最新版软件，如果你要安装非最新版的 JDK，那么去 Oracle 网站下载吧，Homebrew 的多版本支持不是很好用。</p>\n<p>　　同样的，输入如下命令来安装 Maven 最新版。</p>\n<p>brew install maven<br>　　在开发中，你很可能会碰到这个错误java.security.InvalidKeyException: Illegal key size or default parameters，那是因为美国对出口软件加密算法长度的限制，你需要去如下链接下载补丁包：</p>\n<p>JCE Unlimited Policy for JDK 6<br>JCE Unlimited Policy for JDK 7<br>JCE Unlimited Policy for JDK 8<br>　　补丁替换路径为${java.home}/jre/lib/security/，大约如下所示：</p>\n<p>/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib/security<br>　　5. 4.2 安装版本控制软件 – SmartGit &amp; SmartSVN</p>\n<p>　　如果代码就是生命，版本控制系统就是时光机。Git 和 Subversion 分别是现在最流行的 2 个版本控制系统，SmartGit 和 SmartSVN 分别是他们的一个第三方客户端，当然他们有很多第三方客户端，我觉得 SmartGit 和 SmartSVN 是最好用的。</p>\n<p>　　5. 4.3 安装和配置 IDE – IntelliJ IDEA</p>\n<p>　　IntelliJ IDEA 作为最智能的 Java IDE，推荐所有 Java 开发人员使用，你可以在这里下载安装文件，或者使用如下的 Homebrew Cask 命令来下载安装：</p>\n<p>brew cask install intellij-idea<br>　　打开 IDEA，推荐选择Darcula主题，快捷键映射选择I’ve never used IDEA, 一路确认下去进入主界面。</p>\n<p>　　推荐使用版本控制客户端(SmartGit &amp; SmartSVN)下载好源代码后，再使用 IDEA 导入源代码，原因是如果用 IDEA 来 checkout 源代码，一边 checkout 一边分析代码，对于有多个模块的 Maven 项目，IDEA 动态检测 Spring 框架的配置文件可能会得不到及时而完整的依赖分析。</p>\n<p>5421</p>\n<p>　　图 5.4.2-1</p>\n<p>　　我们假设项目是基于 Maven 的，如下图，选择Maven：</p>\n<p>5422</p>\n<p>　　图 5.4.2-2</p>\n<p>　　一路点击[Next]进入主界面，IDEA 会帮我们自动检测到依赖的框架，如图 IDEA 发现我们使用了 OSGI 和 Spring 框架，点击[Configure]，然后去除 OSGI 依赖，因为 SOFA 项目不是完全实现 OSGI 规范的，勾选 Spring 配置文件。</p>\n<p>5423</p>\n<p>　　图 5.4.2-3</p>\n<p>　　IDEA 会在你首次导入一个项目的时候建立索引，耐心等待索引建立完成，之后的查找就会非常快速。</p>\n<p>　　6. 工具的意义</p>\n<p>　　工欲善其事，必先利其器，工具永远都是用来解决问题的，没必要为了工具而工具，一切工具都是为了能快速准确的完成工作和学习任务而服务。</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>d91bb7c23220559e6b55c0770726c7cf20effc06</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n","excerpt":"","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"http://www.ding1996.cn/tags/mac/"},{"name":"环境","slug":"环境","permalink":"http://www.ding1996.cn/tags/环境/"}]},{"title":"随处可玩的暖场小游戏","date":"2017-04-07T02:50:10.000Z","path":"2017/04/07/outdoor_game/","text":"带团中有时需要搞下气氛,跟客人多做些互动,把客人逗乐了,那么你后面的工作也就得心应手一些喽! 1、一下就是我曾经用过的一个比较好用的小游戏，每人讲一句。第一个人讲:动物园里看动物，第二个人可以讲以下三种中的其中一种: 没有腿的 两条腿的 四条腿的 第二个人讲完后,第三个人就要马上反映出相应的动物依次轮流下去看似简单,却又不是很简单,要有超快的反映能力,还要看你平时对动物世界的关注度.游戏中,会有很多出乎意料的笑点讲错的人就可以让他表演个小节目了 2、游戏规则：把自己名字的最后一个字和（人）字组合在一起 例如：（燕晶）那么就是用名字最后面的（晶）字 和（人）组合在一起 组合在一起就叫（晶人） HO HO ！！（惊人）？呵呵！我名字组合的不错！ 看看大家都成什么（人）了 例子： 高枫（疯人）这属于精神型！ 铭人（名人） 这属于臭美型！ 邓宇（愚人）这属于憨厚型！ 赵梦（蒙人）这属于欺骗型 3、真心话大冒险（可以在车上做的游戏） 如第一个人说你喜欢吃苹果吗？第二人回答喜欢，然后发问你喜欢旅游吗？第三个人回答喜欢，然后再发问你晚上有约会吗？（三不问原则：一不问年龄、二不问收入、三不问晚上吃什么） 4、1-99数字，间隔最小单位10个数，到最后10位时可一个一个数字来，逮到的出节目。让客人参与当中也可做主持人； 5、四个动作-放屁的事情； 6、成语接龙游戏； 7、吃鸡（或吃猪）：每位游客吃鸡的一个部位，大家吃的不能重复，如果吃了别人吃过了的，也可以上台表演个节目啊。。。 8、“吃牛（或猪）”：用“我最喜欢吃牛的xx（身体的某一部分）……”让客人轮番上，把牛身上能吃的都说遍，谁重复了就表演个节目，这个很耗时，也很好玩。吃得没有了，可能会出现吃牛毛，牛便便……如果是40多人的大团，就算了哈！特别要注意一点，遇到团上有少数民族的，像回民不吃猪肉的，肯定不能让客人玩吃猪的游戏哈！ 9、“对歌或讲笑话”：让客人讲笑话或唱歌，可能常会遇到客人不配合，造成冷场。这时可以带动客人来鼓掌（鼓掌的方式有n种），可以让客人学狗叫猫叫啊，让他跟你跟学绕口令之类相对简单的都可以。当然，为了鼓励他们参与，也可以分成几派来做节目（像对歌大赛），派别就很好取名了噻：峨眉派、青城派、岷山派之类的都行。让没参与的人来评判，第一名的适当给点奖励！比如井冈山庐山的明信片啊都可以。 10、“你做我猜”：电视上有的节目，就是一个人比动作或用语言描述，另一个人来猜。可以猜车上的物品，可以猜景区，可以猜一种动作……导游就当裁判，给获胜的一方颁奖——牛肉干一包，或矿泉水一瓶。 11、“新婚之夜”：就是让每一位客人准备一个以数字开头的这种（数字包括一、二、三、百、千、万等，比如“万紫千红”、“一针见血”、“一夫当关，万夫莫开”等就很经典！），把它写在一个本子上，然后记下对应客人的名字，之后导游把本子收回，让对应的客人来读“新婚第一夜，xx（客人姓名）xx（四字的成语）”，这个游戏效果不错哦，现场笑话会有出奇的效果！！在回家的路上用这个，游客们会带笑容离开bus！类似的有“新婚之夜，我和爱人xxxx（aabb格式的词语）”，如果客人说了像重重叠叠、上上下下、前前进进之类的词，效果就更好了！当然，这个度要掌握好。比如团上有小孩子…… 12、“我的屁股”：让客人说词语，格式为aa或abb.例如“我的屁股香喷喷……”“我的屁股红彤彤”都不错，当然，要把话筒给客人，让他自己说。 13、“击鼓传花”：幼儿园小朋友都会玩的游戏，可以用可乐瓶、或导游旗代替手绢，导游在前面唱歌，歌一停，看哪个拿到瓶子（或导游旗）的——表演节目，获得“国宝熊猫玩具”“明信片”一类的奖品；扎气球猜灯谜、谜语——没有人回答时，只要点出活跃分子表演节目，奖品就归他（她）。 14、“车上跳舞”：这里所说的跳舞只是坐在车上。你伸左手，客人就得伸右手，无论你做什么动作，如果有客人和你一样，就输了，就罚唱歌噻！！！ 15、“明七暗七”：所谓明七就是：7、17、27之类的，暗七就是：7的倍数，有时玩的时候还把15也算上，这些都是不能说的数字，轮到了就得跳到下一个数字，15就用手做一个大月亮，如果说错了，就要罚他表演。 16、“青蛙陷阱”：一只青蛙一张嘴，两只眼睛四条腿；两只青蛙两张嘴，四只眼睛八条腿……以此类推，每人一句，量词或数词说错了就要挨罚。 17、“故事接龙”：如果遇到一些综合能力比较强的客人，还可以玩一种“故事接龙”的游戏。导游首先选好一个容易让人产生兴趣的故事情节，当你说出开头部分后，就由客人往下接（要把握好客人接故事的速度和分寸），遇到没有接上的，当然就该他表演节目，导游一定要在其中起到承上启下的作用才行。 18、“词语组合”：准备好纸和笔，发给客人3张白纸，第一张写上姓名，第二张写上地方，第三张写上最爱做事情（地方和事情越夸张越好），分别放进3个袋子里，再让客人抽，形成新组合，会有很多意想不到的有趣事。好处嘛——搞笑，消磨时间长，客人容易接受，如果有小礼品就更好啦，技巧自己掌握。 19、绕口令类：“走一走、扭一扭、见一颗柳树、搂一搂”，第二位就得说：走两走、扭两扭、见两颗柳树、搂两搂。数到十后返回从一开始。游戏规则是谁讲错罚谁出节目。由于是临时发挥，许多人都可能绕不过来，有的人把搂几搂先说了，有的人忘了数字接力，就准备听车内爆发出的阵阵笑声吧。其它的，比如让他们（客人）自己讲家乡，效果不错。当然前提是来自不同地方的散拼团。 20、杀人游戏：不是真的杀人哈，别误会了。这个游戏规则说起来有点长。（省略不详述了） 21、猜地名或人名：客人来自五湖四海，游过大江南北，很多是爱旅游的。那就让他们来猜：金银铜铁——无锡、四季温暖——长春、一路平安——旅顺、重男轻女——贵阳、风平浪静——宁波，赤壁之战——孙悦刘欢、降落伞——张飞、啥子都卖了，就是不卖被子——刘备。国外的也可以，比如“红色庄园”（丹麦）“蓝色的庄稼”（荷兰）。如果客人觉得难度太大，可以适当给点提示。当时，适当的小礼品还是要准备。 22、猜谜语：这个就很多了。比如：一片青草地——打一花名（梅花），来了一只羊——打一水果名（草莓），又来了一只狼——打一水果名（杨莓），又来了一群羊——打一小食品名（喜之郎） 23、脑筋急转弯：1、用左手食指指着车顶，问客人“这是什么？”客人一般会回答“1”，（答案应为“这是食指啦”）用右手做同样的动作再问客人，“这是几？”，客人多半要回答是食指，（答案应为“这是1”），要根据提问来找答案。2、芳芳在学校门口把学生证掉了，怎么办？（捡起来）3、一只饿猫看到老鼠，为什么拔腿就跑？（去追老鼠）。4、太平洋的中间是什么？（水、平）有油灯、暖炉、壁炉，应该先点哪样呢？（火柴） 团里经常会卧虎藏龙的，发现了活跃分子，也有利于推自费项目，操作就不多说了哈！另外，如果客人太散或者年龄差距较大，有时玩游戏就不好操作了。这时，导游的讲解会比较重要，因为客人出来除了游玩，他们特别注重导游对当地文化的讲解，他们更想知道的是有关知识…… 导游在车上进行的游戏问三个问题，第一个问题是：说出你最喜欢乘坐的交通工具，第二个问题：说出你最喜欢的动物。第三个问题是：说出你最爱说的口头禅……说了一圈后，你再说：“我们接下来做一个连环游戏。大家记得自己刚才说的话吗？现在我们将自己刚才说的答案连成一句话。这句话的格式是这样的：我乘做着……（最喜欢的那个交通工具），遇见了……（最爱的那个动物），我对他说：……我爱你。那个动物说：……（你的那个口头禅）笑倒一大片。 大家有都这么聪明，那不如来说个绕口令！我在带汽车团的时候，会和客人说绕口令！比如：“走一步，扭一扭，见到一棵柳树搂一搂”，“走两步，扭两扭，见到两棵柳树搂两楼”……，以此类推，如果客人多的话，到十六步时返回从一开始。要求是客人必须用普通话讲，前面一个人说完，后面的人要紧跟着讲，并且不允许停顿，导游也要参加，谁说不下来，就要表演一个节目！这个游戏看客人的表现！！导游一定要在气氛比较活跃的时候做，效果才会好。比如讲完一个笑话之后。 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<blockquote>\n<p>带团中有时需要搞下气氛,跟客人多做些互动,把客人逗乐了,那么你后面的工作也就得心应手一些喽!</p>\n</blockquote>\n<p>1、一下就是我曾经用过的一个比较好用的小游戏，每人讲一句。第一个人讲:动物园里看动物，第二个人可以讲以下三种中的其中一种:</p>\n<ul>\n<li>没有腿的</li>\n<li>两条腿的</li>\n<li>四条腿的</li>\n</ul>\n<a id=\"more\"></a>\n<p>第二个人讲完后,第三个人就要马上反映出相应的动物<br>依次轮流下去看似简单,却又不是很简单,要有超快的反映能力,还要看你平时对动物世界的关注度.游戏中,会有很多出乎意料的笑点讲错的人就可以让他表演个小节目了</p>\n<p>2、游戏规则：把自己名字的最后一个字和（人）字组合在一起 例如：（燕晶）那么就是用名字最后面的（晶）字 和（人）组合在一起 组合在一起就叫（晶人） HO HO ！！（惊人）？呵呵！我名字组合的不错！ 看看大家都成什么（人）了 例子： 高枫（疯人）这属于精神型！ 铭人（名人） 这属于臭美型！ 邓宇（愚人）这属于憨厚型！ 赵梦（蒙人）这属于欺骗型</p>\n<p>3、真心话大冒险（可以在车上做的游戏）</p>\n<p>如第一个人说你喜欢吃苹果吗？第二人回答喜欢，然后发问你喜欢旅游吗？第三个人回答喜欢，然后再发问你晚上有约会吗？（三不问原则：一不问年龄、二不问收入、三不问晚上吃什么）</p>\n<p>4、1-99数字，间隔最小单位10个数，到最后10位时可一个一个数字来，逮到的出节目。让客人参与当中也可做主持人；</p>\n<p>5、四个动作-放屁的事情；</p>\n<p>6、成语接龙游戏；</p>\n<p>7、吃鸡（或吃猪）：每位游客吃鸡的一个部位，大家吃的不能重复，如果吃了别人吃过了的，也可以上台表演个节目啊。。。</p>\n<p>　　8、“吃牛（或猪）”：用“我最喜欢吃牛的xx（身体的某一部分）……”让客人轮番上，把牛身上能吃的都说遍，谁重复了就表演个节目，这个很耗时，也很好玩。吃得没有了，可能会出现吃牛毛，牛便便……如果是40多人的大团，就算了哈！特别要注意一点，遇到团上有少数民族的，像回民不吃猪肉的，肯定不能让客人玩吃猪的游戏哈！</p>\n<p>　　9、“对歌或讲笑话”：让客人讲笑话或唱歌，可能常会遇到客人不配合，造成冷场。这时可以带动客人来鼓掌（鼓掌的方式有n种），可以让客人学狗叫猫叫啊，让他跟你跟学绕口令之类相对简单的都可以。当然，为了鼓励他们参与，也可以分成几派来做节目（像对歌大赛），派别就很好取名了噻：峨眉派、青城派、岷山派之类的都行。让没参与的人来评判，第一名的适当给点奖励！比如井冈山庐山的明信片啊都可以。</p>\n<p>　　10、“你做我猜”：电视上有的节目，就是一个人比动作或用语言描述，另一个人来猜。可以猜车上的物品，可以猜景区，可以猜一种动作……导游就当裁判，给获胜的一方颁奖——牛肉干一包，或矿泉水一瓶。</p>\n<p>　　11、“新婚之夜”：就是让每一位客人准备一个以数字开头的这种（数字包括一、二、三、百、千、万等，比如“万紫千红”、“一针见血”、“一夫当关，万夫莫开”等就很经典！），把它写在一个本子上，然后记下对应客人的名字，之后导游把本子收回，让对应的客人来读“新婚第一夜，xx（客人姓名）xx（四字的成语）”，这个游戏效果不错哦，现场笑话会有出奇的效果！！在回家的路上用这个，游客们会带笑容离开bus！类似的有“新婚之夜，我和爱人xxxx（aabb格式的词语）”，如果客人说了像重重叠叠、上上下下、前前进进之类的词，效果就更好了！当然，这个度要掌握好。比如团上有小孩子……</p>\n<p>　　12、“我的屁股”：让客人说词语，格式为aa或abb.例如“我的屁股香喷喷……”“我的屁股红彤彤”都不错，当然，要把话筒给客人，让他自己说。</p>\n<p>　　13、“击鼓传花”：幼儿园小朋友都会玩的游戏，可以用可乐瓶、或导游旗代替手绢，导游在前面唱歌，歌一停，看哪个拿到瓶子（或导游旗）的——表演节目，获得“国宝熊猫玩具”“明信片”一类的奖品；扎气球猜灯谜、谜语——没有人回答时，只要点出活跃分子表演节目，奖品就归他（她）。</p>\n<p>　　14、“车上跳舞”：这里所说的跳舞只是坐在车上。你伸左手，客人就得伸右手，无论你做什么动作，如果有客人和你一样，就输了，就罚唱歌噻！！！</p>\n<p>　　15、“明七暗七”：所谓明七就是：7、17、27之类的，暗七就是：7的倍数，有时玩的时候还把15也算上，这些都是不能说的数字，轮到了就得跳到下一个数字，15就用手做一个大月亮，如果说错了，就要罚他表演。</p>\n<p>　　16、“青蛙陷阱”：一只青蛙一张嘴，两只眼睛四条腿；两只青蛙两张嘴，四只眼睛八条腿……以此类推，每人一句，量词或数词说错了就要挨罚。</p>\n<p>17、“故事接龙”：如果遇到一些综合能力比较强的客人，还可以玩一种“故事接龙”的游戏。导游首先选好一个容易让人产生兴趣的故事情节，当你说出开头部分后，就由客人往下接（要把握好客人接故事的速度和分寸），遇到没有接上的，当然就该他表演节目，导游一定要在其中起到承上启下的作用才行。</p>\n<p>　　18、“词语组合”：准备好纸和笔，发给客人3张白纸，第一张写上姓名，第二张写上地方，第三张写上最爱做事情（地方和事情越夸张越好），分别放进3个袋子里，再让客人抽，形成新组合，会有很多意想不到的有趣事。好处嘛——搞笑，消磨时间长，客人容易接受，如果有小礼品就更好啦，技巧自己掌握。</p>\n<p>　　19、绕口令类：“走一走、扭一扭、见一颗柳树、搂一搂”，第二位就得说：走两走、扭两扭、见两颗柳树、搂两搂。数到十后返回从一开始。游戏规则是谁讲错罚谁出节目。由于是临时发挥，许多人都可能绕不过来，有的人把搂几搂先说了，有的人忘了数字接力，就准备听车内爆发出的阵阵笑声吧。其它的，比如让他们（客人）自己讲家乡，效果不错。当然前提是来自不同地方的散拼团。</p>\n<p>　　20、杀人游戏：不是真的杀人哈，别误会了。这个游戏规则说起来有点长。（省略不详述了）</p>\n<p>　　21、猜地名或人名：客人来自五湖四海，游过大江南北，很多是爱旅游的。那就让他们来猜：金银铜铁——无锡、四季温暖——长春、一路平安——旅顺、重男轻女——贵阳、风平浪静——宁波，赤壁之战——孙悦刘欢、降落伞——张飞、啥子都卖了，就是不卖被子——刘备。国外的也可以，比如“红色庄园”（丹麦）“蓝色的庄稼”（荷兰）。如果客人觉得难度太大，可以适当给点提示。当时，适当的小礼品还是要准备。</p>\n<p>　　22、猜谜语：这个就很多了。比如：一片青草地——打一花名（梅花），来了一只羊——打一水果名（草莓），又来了一只狼——打一水果名（杨莓），又来了一群羊——打一小食品名（喜之郎）</p>\n<p>　　23、脑筋急转弯：1、用左手食指指着车顶，问客人“这是什么？”客人一般会回答“1”，（答案应为“这是食指啦”）用右手做同样的动作再问客人，“这是几？”，客人多半要回答是食指，（答案应为“这是1”），要根据提问来找答案。2、芳芳在学校门口把学生证掉了，怎么办？（捡起来）3、一只饿猫看到老鼠，为什么拔腿就跑？（去追老鼠）。4、太平洋的中间是什么？（水、平）有油灯、暖炉、壁炉，应该先点哪样呢？（火柴）</p>\n<p>　　团里经常会卧虎藏龙的，发现了活跃分子，也有利于推自费项目，操作就不多说了哈！另外，如果客人太散或者年龄差距较大，有时玩游戏就不好操作了。这时，导游的讲解会比较重要，因为客人出来除了游玩，他们特别注重导游对当地文化的讲解，他们更想知道的是有关知识……</p>\n<p>　　导游在车上进行的游戏问三个问题，第一个问题是：说出你最喜欢乘坐的交通工具，第二个问题：说出你最喜欢的动物。第三个问题是：说出你最爱说的口头禅……说了一圈后，你再说：“我们接下来做一个连环游戏。大家记得自己刚才说的话吗？现在我们将自己刚才说的答案连成一句话。这句话的格式是这样的：我乘做着……（最喜欢的那个交通工具），遇见了……（最爱的那个动物），我对他说：……我爱你。那个动物说：……（你的那个口头禅）笑倒一大片。</p>\n<p>　　大家有都这么聪明，那不如来说个绕口令！我在带汽车团的时候，会和客人说绕口令！比如：“走一步，扭一扭，见到一棵柳树搂一搂”，“走两步，扭两扭，见到两棵柳树搂两楼”……，以此类推，如果客人多的话，到十六步时返回从一开始。要求是客人必须用普通话讲，前面一个人说完，后面的人要紧跟着讲，并且不允许停顿，导游也要参加，谁说不下来，就要表演一个节目！这个游戏看客人的表现！！导游一定要在气氛比较活跃的时候做，效果才会好。比如讲完一个笑话之后。</p>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n\n","excerpt":"带团中有时需要搞下气氛,跟客人多做些互动,把客人逗乐了,那么你后面的工作也就得心应手一些喽! 1、一下就是我曾经用过的一个比较好用的小游戏，每人讲一句。第一个人讲:动物园里看动物，第二个人可以讲以下三种中的其中一种: 没有腿的 两条腿的 四条腿的","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://www.ding1996.cn/tags/随笔/"}]},{"title":"终端用树来显示目录结构","date":"2017-04-06T06:30:14.000Z","path":"2017/04/06/it-cmd-treeShow/","text":"如何在终端里用tree来显示目录结构 在github上别人的项目都有tree来展示项目结构，看起来很清晰于是百度了下，发现tree原来是个插件是需要安装的，我们接下来开始安装tree； 首先下载mac上的神器homebrew，下载地址https://brew.sh/ 安装很简单这里就不细说了 homebrew安装成功后执行一条命令就行了 brew install tree tree安装成功后我们在命令行查看下tree的参数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061deson@DesondeMacBook-Pro:~$ tree --helpusage: tree [-acdfghilnpqrstuvxACDFJQNSUX] [-H baseHREF] [-T title ] [-L level [-R]] [-P pattern] [-I pattern] [-o filename] [--version] [--help] [--inodes] [--device] [--noreport] [--nolinks] [--dirsfirst] [--charset charset] [--filelimit[=]#] [--si] [--timefmt[=]&lt;f&gt;] [--sort[=]&lt;name&gt;] [--matchdirs] [--ignore-case] [--] [&lt;directory list&gt;] ------- Listing options ------- -a All files are listed. -d List directories only. -l Follow symbolic links like directories. -f Print the full path prefix for each file. -x Stay on current filesystem only. -L level Descend only level directories deep. -R Rerun tree when max dir level reached. -P pattern List only those files that match the pattern given. -I pattern Do not list files that match the given pattern. --ignore-case Ignore case when pattern matching. --matchdirs Include directory names in -P pattern matching. --noreport Turn off file/directory count at end of tree listing. --charset X Use charset X for terminal/HTML and indentation line output. --filelimit # Do not descend dirs with more than # files in them. --timefmt &lt;f&gt; Print and format time according to the format &lt;f&gt;. -o filename Output to file instead of stdout. -------- File options --------- -q Print non-printable characters as '?'. -N Print non-printable characters as is. -Q Quote filenames with double quotes. -p Print the protections for each file. -u Displays file owner or UID number. -g Displays file group owner or GID number. -s Print the size in bytes of each file. -h Print the size in a more human readable way. --si Like -h, but use in SI units (powers of 1000). -D Print the date of last modification or (-c) status change. -F Appends '/', '=', '*', '@', '|' or '&gt;' as per ls -F. --inodes Print inode number of each file. --device Print device ID number to which each file belongs. ------- Sorting options ------- -v Sort files alphanumerically by version. -t Sort files by last modification time. -c Sort files by last status change time. -U Leave files unsorted. -r Reverse the order of the sort. --dirsfirst List directories before files (-U disables). --sort X Select sort: name,version,size,mtime,ctime. ------- Graphics options ------ -i Don't print indentation lines. -A Print ANSI lines graphic indentation lines. -S Print with CP437 (console) graphics indentation lines. -n Turn colorization off always (-C overrides). -C Turn colorization on always. ------- XML/HTML/JSON options ------- -X Prints out an XML representation of the tree. -J Prints out an JSON representation of the tree. -H baseHREF Prints out HTML format with baseHREF as top directory. -T string Replace the default HTML title and H1 header with string. --nolinks Turn off hyperlinks in HTML output. ---- Miscellaneous options ---- --version Print version and exit. --help Print usage and this help message and exit. -- Options processing terminator. 参数后面有注释 英文看不懂的请自行翻译 哈哈哈 其实我也看不懂 下面用了一个 tree -L 的参数 -L 后面是显示几层目录结构我这里用的是1 123456789101112deson@DesondeMacBook-Pro:~/DesonProject/blog$ tree -L 1├── README.md├── _config.yml├── db.json├── node_modules├── package.json├── public├── scaffolds├── source└── themes5 directories, 4 files 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<h3 id=\"如何在终端里用tree来显示目录结构\"><a href=\"#如何在终端里用tree来显示目录结构\" class=\"headerlink\" title=\"如何在终端里用tree来显示目录结构\"></a>如何在终端里用tree来显示目录结构</h3><blockquote>\n<p>在github上别人的项目都有tree来展示项目结构，看起来很清晰于是百度了下，发现tree原来是个插件是需要安装的，我们接下来开始安装tree；</p>\n</blockquote>\n<a id=\"more\"></a>\n<ol>\n<li>首先下载mac上的神器homebrew，下载地址<a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">https://brew.sh/</a> 安装很简单这里就不细说了</li>\n<li>homebrew安装成功后执行一条命令就行了</li>\n<li><code>brew install tree</code></li>\n</ol>\n<p><strong>tree安装成功后我们在命令行查看下tree的参数</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deson@DesondeMacBook-Pro:~$ tree --<span class=\"built_in\">help</span></span><br><span class=\"line\">usage: tree [-acdfghilnpqrstuvxACDFJQNSUX] [-H baseHREF] [-T title ]</span><br><span class=\"line\">\t[-L level [-R]] [-P pattern] [-I pattern] [-o filename] [--version]</span><br><span class=\"line\">\t[--<span class=\"built_in\">help</span>] [--inodes] [--device] [--noreport] [--nolinks] [--dirsfirst]</span><br><span class=\"line\">\t[--charset charset] [--filelimit[=]<span class=\"comment\">#] [--si] [--timefmt[=]&lt;f&gt;]</span></span><br><span class=\"line\">\t[--sort[=]&lt;name&gt;] [--matchdirs] [--ignore-case] [--] [&lt;directory list&gt;]</span><br><span class=\"line\">  ------- Listing options -------</span><br><span class=\"line\">  -a            All files are listed.</span><br><span class=\"line\">  -d            List directories only.</span><br><span class=\"line\">  -l            Follow symbolic links like directories.</span><br><span class=\"line\">  -f            Print the full path prefix <span class=\"keyword\">for</span> each file.</span><br><span class=\"line\">  -x            Stay on current filesystem only.</span><br><span class=\"line\">  -L level      Descend only level directories deep.</span><br><span class=\"line\">  -R            Rerun tree when max dir level reached.</span><br><span class=\"line\">  -P pattern    List only those files that match the pattern given.</span><br><span class=\"line\">  -I pattern    Do not list files that match the given pattern.</span><br><span class=\"line\">  --ignore-case Ignore <span class=\"keyword\">case</span> when pattern matching.</span><br><span class=\"line\">  --matchdirs   Include directory names <span class=\"keyword\">in</span> -P pattern matching.</span><br><span class=\"line\">  --noreport    Turn off file/directory count at end of tree listing.</span><br><span class=\"line\">  --charset X   Use charset X <span class=\"keyword\">for</span> terminal/HTML and indentation line output.</span><br><span class=\"line\">  --filelimit <span class=\"comment\"># Do not descend dirs with more than # files in them.</span></span><br><span class=\"line\">  --timefmt &lt;f&gt; Print and format time according to the format &lt;f&gt;.</span><br><span class=\"line\">  -o filename   Output to file instead of stdout.</span><br><span class=\"line\">  -------- File options ---------</span><br><span class=\"line\">  -q            Print non-printable characters as <span class=\"string\">'?'</span>.</span><br><span class=\"line\">  -N            Print non-printable characters as is.</span><br><span class=\"line\">  -Q            Quote filenames with double quotes.</span><br><span class=\"line\">  -p            Print the protections <span class=\"keyword\">for</span> each file.</span><br><span class=\"line\">  -u            Displays file owner or UID number.</span><br><span class=\"line\">  -g            Displays file group owner or GID number.</span><br><span class=\"line\">  -s            Print the size <span class=\"keyword\">in</span> bytes of each file.</span><br><span class=\"line\">  -h            Print the size <span class=\"keyword\">in</span> a more human readable way.</span><br><span class=\"line\">  --si          Like -h, but use <span class=\"keyword\">in</span> SI units (powers of 1000).</span><br><span class=\"line\">  -D            Print the date of last modification or (-c) status change.</span><br><span class=\"line\">  -F            Appends <span class=\"string\">'/'</span>, <span class=\"string\">'='</span>, <span class=\"string\">'*'</span>, <span class=\"string\">'@'</span>, <span class=\"string\">'|'</span> or <span class=\"string\">'&gt;'</span> as per ls -F.</span><br><span class=\"line\">  --inodes      Print inode number of each file.</span><br><span class=\"line\">  --device      Print device ID number to <span class=\"built_in\">which</span> each file belongs.</span><br><span class=\"line\">  ------- Sorting options -------</span><br><span class=\"line\">  -v            Sort files alphanumerically by version.</span><br><span class=\"line\">  -t            Sort files by last modification time.</span><br><span class=\"line\">  -c            Sort files by last status change time.</span><br><span class=\"line\">  -U            Leave files unsorted.</span><br><span class=\"line\">  -r            Reverse the order of the sort.</span><br><span class=\"line\">  --dirsfirst   List directories before files (-U disables).</span><br><span class=\"line\">  --sort X      Select sort: name,version,size,mtime,ctime.</span><br><span class=\"line\">  ------- Graphics options ------</span><br><span class=\"line\">  -i            Don<span class=\"string\">'t print indentation lines.</span></span><br><span class=\"line\"><span class=\"string\">  -A            Print ANSI lines graphic indentation lines.</span></span><br><span class=\"line\"><span class=\"string\">  -S            Print with CP437 (console) graphics indentation lines.</span></span><br><span class=\"line\"><span class=\"string\">  -n            Turn colorization off always (-C overrides).</span></span><br><span class=\"line\"><span class=\"string\">  -C            Turn colorization on always.</span></span><br><span class=\"line\"><span class=\"string\">  ------- XML/HTML/JSON options -------</span></span><br><span class=\"line\"><span class=\"string\">  -X            Prints out an XML representation of the tree.</span></span><br><span class=\"line\"><span class=\"string\">  -J            Prints out an JSON representation of the tree.</span></span><br><span class=\"line\"><span class=\"string\">  -H baseHREF   Prints out HTML format with baseHREF as top directory.</span></span><br><span class=\"line\"><span class=\"string\">  -T string     Replace the default HTML title and H1 header with string.</span></span><br><span class=\"line\"><span class=\"string\">  --nolinks     Turn off hyperlinks in HTML output.</span></span><br><span class=\"line\"><span class=\"string\">  ---- Miscellaneous options ----</span></span><br><span class=\"line\"><span class=\"string\">  --version     Print version and exit.</span></span><br><span class=\"line\"><span class=\"string\">  --help        Print usage and this help message and exit.</span></span><br><span class=\"line\"><span class=\"string\">  --            Options processing terminator.</span></span><br></pre></td></tr></table></figure>\n<p>参数后面有注释 英文看不懂的请自行翻译 哈哈哈 其实我也看不懂</p>\n<font color=\"red\">下面用了一个 tree -L 的参数 -L 后面是显示几层目录结构我这里用的是1</font>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deson@DesondeMacBook-Pro:~/DesonProject/blog$ tree -L 1</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── db.json</span><br><span class=\"line\">├── node_modules</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── public</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── <span class=\"built_in\">source</span></span><br><span class=\"line\">└── themes</span><br><span class=\"line\"></span><br><span class=\"line\">5 directories, 4 files</span><br></pre></td></tr></table></figure>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n\n","excerpt":"如何在终端里用tree来显示目录结构 在github上别人的项目都有tree来展示项目结构，看起来很清晰于是百度了下，发现tree原来是个插件是需要安装的，我们接下来开始安装tree；","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"http://www.ding1996.cn/tags/mac/"}]},{"title":"windows如何快速删除node_modules","date":"2017-04-05T03:29:44.000Z","path":"2017/04/05/it-node-del-modules/","text":"之前用windows电脑做依赖node项目的时候总是会碰到删除node modules文件夹困难，下面教大家如何简单暴力快速的删除node_modules文件夹 来跟着我左手右手一个慢动作 1.首先全局安装rimraf插件 1npm install rimraf -g 2.在项目根目录执行一下命令 1rimraf node_modules 就这么简单是不是很暴力 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<blockquote>\n<p>之前用windows电脑做依赖node项目的时候总是会碰到删除node modules文件夹困难，下面教大家如何简单暴力快速的删除node_modules文件夹</p>\n</blockquote>\n<p><strong>来跟着我左手右手一个慢动作</strong></p>\n<p>1.首先全局安装rimraf插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install rimraf -g</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>2.在项目根目录执行一下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rimraf node_modules</span><br></pre></td></tr></table></figure>\n<p><strong>就这么简单是不是很暴力</strong></p>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n\n\n\n","excerpt":"之前用windows电脑做依赖node项目的时候总是会碰到删除node modules文件夹困难，下面教大家如何简单暴力快速的删除node_modules文件夹 来跟着我左手右手一个慢动作 1.首先全局安装rimraf插件 1npm install rimraf -g","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.ding1996.cn/tags/node/"}]},{"title":"鸡汤还是要喝的","date":"2017-04-01T09:51:11.000Z","path":"2017/04/01/essays_renge/","text":"d91bb7c23220559e6b55c0770726c7cf20effc06 爱情有时候是这样，你懂的越多，就会被伤的越深。而你被伤的越深，就会懂的更多。到最后你会发现，其实真正能陪你到老的那个人，是什么都不需要你懂的那一个。让你活的没心没肺，才是最好的那个人。有些事情，只有经历了，才有穿透心扉的体验；曾经的人，只有从心底放下了，心灵才会真正地解脱。没有哪件事，能够一直捆住你的手脚；没有哪个人，能够成为你的永远。所以，想做的事，只要有能力做，那就不要等，不要害怕失败；想付出的爱，只要觉得可以，那就大胆些，不要留下遗憾。 不管是今天的穷人，或明天的富人，抑或永远的穷人，我的价值取向是：做一个真诚的人，有一颗善良的心，活出人的尊严。 一颗高贵的灵魂，总会超越于现实之外，于精神的世界里去寻求一种更高贵的存在。——《有尊严的活着》 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" align=\"center\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=29947420&auto=0&height=66\"></iframe></h1><p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" align=\"center\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=29947420&auto=1&height=66\"></iframe></p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>d91bb7c23220559e6b55c0770726c7cf20effc06</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>爱情有时候是这样，你懂的越多，就会被伤的越深。而你被伤的越深，就会懂的更多。到最后你会发现，其实真正能陪你到老的那个人，是什么都不需要你懂的那一个。让你活的没心没肺，才是最好的那个人。<br><img src=\"http://www.59xihuan.cn/uploads/allimg/20130607/21061370594900-lp.jpg\" alt=\"\"><br><a id=\"more\"></a><br>有些事情，只有经历了，才有穿透心扉的体验；曾经的人，只有从心底放下了，心灵才会真正地解脱。没有哪件事，能够一直捆住你的手脚；没有哪个人，能够成为你的永远。所以，想做的事，只要有能力做，那就不要等，不要害怕失败；想付出的爱，只要觉得可以，那就大胆些，不要留下遗憾。<br><img src=\"http://www.59xihuan.cn/uploads/allimg/201309/40351379292618-lp.jpg\" alt=\"\"></p>\n<p>不管是今天的穷人，或明天的富人，抑或永远的穷人，我的价值取向是：做一个真诚的人，有一颗善良的心，活出人的尊严。 一颗高贵的灵魂，总会超越于现实之外，于精神的世界里去寻求一种更高贵的存在。——《有尊严的活着》<br><img src=\"http://www.59xihuan.cn/uploads/allimg/20130721/76131374384779-lp.jpg\" alt=\"\"></p>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n","excerpt":"d91bb7c23220559e6b55c0770726c7cf20effc06 爱情有时候是这样，你懂的越多，就会被伤的越深。而你被伤的越深，就会懂的更多。到最后你会发现，其实真正能陪你到老的那个人，是什么都不需要你懂的那一个。让你活的没心没肺，才是最好的那个人。","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://www.ding1996.cn/tags/随笔/"}]},{"title":"仙居公盂-华东的香格里拉","date":"2017-03-31T13:12:24.000Z","path":"2017/03/31/outdoor_xianju/","text":"愿你我既能朝九晚五也能浪迹天涯 越怕什么就要越去做什么，永远不要让自己呆带舒适区域因为我从小就很怕写作 所以现在要坚持写写博客 突破自己 第一次写游记 三个月后补上 公盂景区位于仙居县田市镇境内，距仙居县城约38公里的西南处，公盂核心面积大约31平方公里，地貌造型密度大，品位高，岩崖峰岗千变万化万，岩崖峰岗都是以巍峨著称，地形构造呈多级阶梯状，公盂中心海拔1150米，整个公盂岩巍峨鼎立，气势峥嵘，石林崖壁，风采各异。 仙居公盂山，人们又对它称之为“浙江香格里拉”，地图上对公盂山又叫做公孟村，公孟村分为上平村和下平村两地，它们都是坐落在海拔600米的高山上的小村庄，公盂村四面奇峰环绕，公盂山峰顶最高海拔在1150米，整个公盂小村庄就被公盂山峰围成了一个小小的盆地。攀登上公盂村南边的公盂岩背，整个公盂山美景便尽收眼底。 开始吃早餐 早餐红糖馒头 稀饭 笋尖 哈哈 包包没晒满 不好看诶早上太冷了大家在烤火还有一只土狗 吃饱了开始徒步了 一小波美景来袭，冬天来得 都是一片枯黄 但还是很美 中午到农家了 山里面还藏了一个村子 只有10来户人家在山上 。。。此处省略一万字 到晚上了 篝火点起来 大家露天KTV 烧烤 今晚就在帐篷里睡了 ，晚上还看了好多星星 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<h4 id=\"愿你我既能朝九晚五也能浪迹天涯\"><a href=\"#愿你我既能朝九晚五也能浪迹天涯\" class=\"headerlink\" title=\"愿你我既能朝九晚五也能浪迹天涯\"></a>愿你我既能朝九晚五也能浪迹天涯</h4><p><img src=\"/images/youji/xianju/xianju5.jpg\" alt=\"\"></p>\n<p>越怕什么就要越去做什么，永远不要让自己呆带舒适区域<br>因为我从小就很怕写作 所以现在要坚持写写博客 突破自己 第一次写游记 三个月后补上</p>\n<blockquote>\n<p>  公盂景区位于仙居县田市镇境内，距仙居县城约38公里的西南处，公盂核心面积大约31平方公里，地貌造型密度大，品位高，岩崖峰岗千变万化万，岩崖峰岗都是以巍峨著称，地形构造呈多级阶梯状，公盂中心海拔1150米，整个公盂岩巍峨鼎立，气势峥嵘，石林崖壁，风采各异。<br>  仙居公盂山，人们又对它称之为“浙江香格里拉”，地图上对公盂山又叫做公孟村，公孟村分为上平村和下平村两地，它们都是坐落在海拔600米的高山上的小村庄，公盂村四面奇峰环绕，公盂山峰顶最高海拔在1150米，整个公盂小村庄就被公盂山峰围成了一个小小的盆地。攀登上公盂村南边的公盂岩背，整个公盂山美景便尽收眼底。 </p>\n</blockquote>\n<a id=\"more\"></a>\n<hr>\n<p>开始吃早餐 早餐红糖馒头 稀饭 笋尖</p>\n<p><img src=\"/images/youji/xianju/xianju7.jpg\" alt=\"\"><br><img src=\"/images/youji/xianju/xianju8.jpg\" alt=\"\"><br>哈哈 包包没晒满 不好看诶<br><img src=\"/images/youji/xianju/UNADJUSTEDNONRAW_thumb_67.jpg\" alt=\"\"><br>早上太冷了大家在烤火<br><img src=\"/images/youji/xianju/UNADJUSTEDNONRAW_thumb_69.jpg\" alt=\"\"><br><img src=\"/images/youji/xianju/UNADJUSTEDNONRAW_thumb_68.jpg\" alt=\"\"><br>还有一只土狗<br><img src=\"/images/youji/xianju/UNADJUSTEDNONRAW_thumb_6a.jpg\" alt=\"\"></p>\n<h3 id=\"吃饱了开始徒步了\"><a href=\"#吃饱了开始徒步了\" class=\"headerlink\" title=\"吃饱了开始徒步了\"></a><strong>吃饱了开始徒步了</strong></h3><p><img src=\"/images/youji/xianju/xianju9.jpg\" alt=\"\"></p>\n<p>一小波美景来袭，冬天来得 都是一片枯黄 但还是很美</p>\n<p><img src=\"/images/youji/xianju/xianju11.jpg\" alt=\"\"><br><img src=\"/images/youji/xianju/xianju10.jpg\" alt=\"\"><br><img src=\"/images/youji/xianju/xianju13.jpg\" alt=\"\"><br><img src=\"/images/youji/xianju/xianju1.jpg\" alt=\"\"></p>\n<p>中午到农家了 山里面还藏了一个村子 只有10来户人家在山上</p>\n<p><img src=\"/images/youji/xianju/xianju14.jpg\" alt=\"\"></p>\n<p>。。。此处省略一万字 到晚上了 篝火点起来 大家露天KTV 烧烤</p>\n<p><img src=\"/images/youji/xianju/xianju2.jpg\" alt=\"\"></p>\n<p><img src=\"/images/youji/xianju/xianju3.jpg\" alt=\"\"><br><img src=\"/images/youji/xianju/xianju4.jpg\" alt=\"\"></p>\n<p>今晚就在帐篷里睡了 ，晚上还看了好多星星</p>\n<p><img src=\"/images/youji/xianju/xianju6.jpg\" alt=\"\"></p>\n<p><img src=\"/images/youji/xianju/xianju5.jpg\" alt=\"\"></p>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n\n\n\n\n\n\n","excerpt":"愿你我既能朝九晚五也能浪迹天涯 越怕什么就要越去做什么，永远不要让自己呆带舒适区域因为我从小就很怕写作 所以现在要坚持写写博客 突破自己 第一次写游记 三个月后补上 公盂景区位于仙居县田市镇境内，距仙居县城约38公里的西南处，公盂核心面积大约31平方公里，地貌造型密度大，品位高，岩崖峰岗千变万化万，岩崖峰岗都是以巍峨著称，地形构造呈多级阶梯状，公盂中心海拔1150米，整个公盂岩巍峨鼎立，气势峥嵘，石林崖壁，风采各异。 仙居公盂山，人们又对它称之为“浙江香格里拉”，地图上对公盂山又叫做公孟村，公孟村分为上平村和下平村两地，它们都是坐落在海拔600米的高山上的小村庄，公盂村四面奇峰环绕，公盂山峰顶最高海拔在1150米，整个公盂小村庄就被公盂山峰围成了一个小小的盆地。攀登上公盂村南边的公盂岩背，整个公盂山美景便尽收眼底。","categories":[],"tags":[{"name":"游记","slug":"游记","permalink":"http://www.ding1996.cn/tags/游记/"}]},{"title":"模块化开发","date":"2016-10-20T10:54:14.000Z","path":"2016/10/20/it-js-seajs/","text":"概述什么是模块化开发 将软件产品看作为一系列功能模块的组合 通过特定的方式实现软件所需模块的划分、管理、加载 为什么使用模块化开发 https://github.com/seajs/seajs/issues/547 协同 代码复用 解决问题 大量的文件引入 命名冲突 文件依赖 存在 顺序 实现模块化的推演step-01 全局函数step-02 封装对象step-03 划分私有空间step-04 模块的扩展与维护step-05 第三方依赖管理在什么场景下使用模块化开发 业务复杂 重用逻辑非常多 扩展性要求较高 实现规范CommonJS规范AMD规范CMD规范 实现Seajs使用步骤 在页面中引入sea.js文件 定义一个主模块文件，比如：main.js 在主模块文件中通过define的方式定义一个模块，并导出公共成员 在页面的行内脚本中通过seajs.use(‘path’,fn)的方式使用模块 回调函数的参数传过来的就是模块中导出的成员对象 定义一个模块 define 12345define(function(require, exports, module) &#123; exports.add = function(a, b) &#123; return a + b; &#125;;&#125;); 使用一个模块 seajs.use 一般用于入口模块 一般只会使用一次 require 模块与模块之间 导出成员的方式 module.exports exports.xxx return 三种方式的优先级 异步加载模块 默认require的效果是同步的，会阻塞代码的执行，造成界面卡顿 require.async(); 123require.async('path',function(module) &#123;&#125;); 使用第三方依赖（jQuery） 由于CMD是国产货，jquery默认不支持 改造 12345678// 适配CMDif (typeof define === \"function\" &amp;&amp; !define.amd) &#123; // 当前有define函数，并且不是AMD的情况 // jquery在新版本中如果使用AMD或CMD方式，不会去往全局挂载jquery对象 define(function() &#123; return jQuery.noConflict(true); &#125;);&#125; Seajs配置 配置 seajs.config base alias 使用案例 Tab标签页 RequireJS 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"什么是模块化开发\"><a href=\"#什么是模块化开发\" class=\"headerlink\" title=\"什么是模块化开发\"></a>什么是模块化开发</h3><ul>\n<li>将软件产品看作为一系列功能模块的组合</li>\n<li>通过特定的方式实现软件所需模块的划分、管理、加载</li>\n</ul>\n<h3 id=\"为什么使用模块化开发\"><a href=\"#为什么使用模块化开发\" class=\"headerlink\" title=\"为什么使用模块化开发\"></a>为什么使用模块化开发</h3><a id=\"more\"></a>\n<ul>\n<li><a href=\"https://github.com/seajs/seajs/issues/547\" target=\"_blank\" rel=\"noopener\">https://github.com/seajs/seajs/issues/547</a></li>\n<li>协同</li>\n<li>代码复用</li>\n<li>解决问题<ul>\n<li>大量的文件引入</li>\n<li>命名冲突</li>\n<li>文件依赖<ul>\n<li>存在</li>\n<li>顺序</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实现模块化的推演\"><a href=\"#实现模块化的推演\" class=\"headerlink\" title=\"实现模块化的推演\"></a>实现模块化的推演</h3><h4 id=\"step-01-全局函数\"><a href=\"#step-01-全局函数\" class=\"headerlink\" title=\"step-01 全局函数\"></a>step-01 全局函数</h4><h4 id=\"step-02-封装对象\"><a href=\"#step-02-封装对象\" class=\"headerlink\" title=\"step-02 封装对象\"></a>step-02 封装对象</h4><h4 id=\"step-03-划分私有空间\"><a href=\"#step-03-划分私有空间\" class=\"headerlink\" title=\"step-03 划分私有空间\"></a>step-03 划分私有空间</h4><h4 id=\"step-04-模块的扩展与维护\"><a href=\"#step-04-模块的扩展与维护\" class=\"headerlink\" title=\"step-04 模块的扩展与维护\"></a>step-04 模块的扩展与维护</h4><h4 id=\"step-05-第三方依赖管理\"><a href=\"#step-05-第三方依赖管理\" class=\"headerlink\" title=\"step-05 第三方依赖管理\"></a>step-05 第三方依赖管理</h4><p>在什么场景下使用模块化开发<br>  业务复杂<br>  重用逻辑非常多<br>  扩展性要求较高</p>\n<hr>\n<h2 id=\"实现规范\"><a href=\"#实现规范\" class=\"headerlink\" title=\"实现规范\"></a>实现规范</h2><h3 id=\"CommonJS规范\"><a href=\"#CommonJS规范\" class=\"headerlink\" title=\"CommonJS规范\"></a>CommonJS规范</h3><h3 id=\"AMD规范\"><a href=\"#AMD规范\" class=\"headerlink\" title=\"AMD规范\"></a>AMD规范</h3><h3 id=\"CMD规范\"><a href=\"#CMD规范\" class=\"headerlink\" title=\"CMD规范\"></a>CMD规范</h3><hr>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"Seajs\"><a href=\"#Seajs\" class=\"headerlink\" title=\"Seajs\"></a>Seajs</h3><h4 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h4><ol>\n<li>在页面中引入sea.js文件</li>\n<li>定义一个主模块文件，比如：main.js</li>\n<li>在主模块文件中通过define的方式定义一个模块，并导出公共成员</li>\n<li>在页面的行内脚本中通过seajs.use(‘path’,fn)的方式使用模块</li>\n<li>回调函数的参数传过来的就是模块中导出的成员对象</li>\n</ol>\n<h4 id=\"定义一个模块\"><a href=\"#定义一个模块\" class=\"headerlink\" title=\"定义一个模块\"></a>定义一个模块</h4><ul>\n<li>define</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  exports.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用一个模块\"><a href=\"#使用一个模块\" class=\"headerlink\" title=\"使用一个模块\"></a>使用一个模块</h4><ul>\n<li>seajs.use<ul>\n<li>一般用于入口模块</li>\n<li>一般只会使用一次</li>\n</ul>\n</li>\n<li>require<ul>\n<li>模块与模块之间</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"导出成员的方式\"><a href=\"#导出成员的方式\" class=\"headerlink\" title=\"导出成员的方式\"></a>导出成员的方式</h4><ul>\n<li>module.exports</li>\n<li>exports.xxx</li>\n<li>return</li>\n<li>三种方式的优先级</li>\n</ul>\n<h4 id=\"异步加载模块\"><a href=\"#异步加载模块\" class=\"headerlink\" title=\"异步加载模块\"></a>异步加载模块</h4><ul>\n<li>默认require的效果是同步的，会阻塞代码的执行，造成界面卡顿</li>\n<li>require.async();</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.async(<span class=\"string\">'path'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用第三方依赖（jQuery）\"><a href=\"#使用第三方依赖（jQuery）\" class=\"headerlink\" title=\"使用第三方依赖（jQuery）\"></a>使用第三方依赖（jQuery）</h4><ul>\n<li>由于CMD是国产货，jquery默认不支持</li>\n<li>改造</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 适配CMD</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">\"function\"</span> &amp;&amp; !define.amd) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前有define函数，并且不是AMD的情况</span></span><br><span class=\"line\">  <span class=\"comment\">// jquery在新版本中如果使用AMD或CMD方式，不会去往全局挂载jquery对象</span></span><br><span class=\"line\">  define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jQuery.noConflict(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Seajs配置\"><a href=\"#Seajs配置\" class=\"headerlink\" title=\"Seajs配置\"></a>Seajs配置</h4><ul>\n<li><a href=\"https://github.com/seajs/seajs/issues/262\" target=\"_blank\" rel=\"noopener\">配置</a></li>\n<li>seajs.config<ul>\n<li>base</li>\n<li>alias</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"使用案例\"><a href=\"#使用案例\" class=\"headerlink\" title=\"使用案例\"></a>使用案例</h4><ul>\n<li>Tab标签页</li>\n</ul>\n<h3 id=\"RequireJS\"><a href=\"#RequireJS\" class=\"headerlink\" title=\"RequireJS\"></a>RequireJS</h3><hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n","excerpt":"概述什么是模块化开发 将软件产品看作为一系列功能模块的组合 通过特定的方式实现软件所需模块的划分、管理、加载 为什么使用模块化开发","categories":[{"name":"技术","slug":"技术","permalink":"http://www.ding1996.cn/categories/技术/"}],"tags":[{"name":"js","slug":"js","permalink":"http://www.ding1996.cn/tags/js/"}]},{"title":"hexo常用命令","date":"2016-08-11T07:26:48.000Z","path":"2016/08/11/it-hexo-cmd/","text":"Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个: hexo shexo s 启动本地服务器，用于预览主题。默认地址： http://localhost:4000/ hexo s 是 hexo server 的缩写，命令效果一致； 预览的同时可以修改文章内容或主题代码，保存后刷新页面即可； 对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。 hexo newhexo new hexo new “学习笔记 六” 新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。 文章标题可以在对应 md 文件里改，新建时标题可以写的简单些。 hexo dhexo d 自动生成网站静态文件，并部署到设定的仓库。 hexo d 是 hexo deploy 的缩写，命令效果一致。 hexo cleanhexo clean 清除缓存文件 db.json 和已生成的静态文件 public 。 网站显示异常时可以执行这条命令试试。 hexo ghexo g 生成网站静态文件到默认设置的 public 文件夹。 便于查看网站生成的静态文件或者手动部署网站； 如果使用自动部署，不需要先执行该命令； hexo g 是 hexo generate 的缩写，命令效果一致。 hexo new pagehexo new page aboutme 新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/ 标题可以为中文，但一般习惯用英文； 页面标题和文章一样可以随意修改； 页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<p><strong>Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个:</strong></p>\n<h3 id=\"hexo-s\"><a href=\"#hexo-s\" class=\"headerlink\" title=\"hexo s\"></a>hexo s</h3><pre><code>hexo s\n</code></pre><p>启动本地服务器，用于预览主题。默认地址： <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a></p>\n<ul>\n<li>hexo s 是 hexo server 的缩写，命令效果一致；</li>\n<li>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；</li>\n<li>对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"hexo-new\"><a href=\"#hexo-new\" class=\"headerlink\" title=\"hexo new\"></a>hexo new</h3><pre><code>hexo new\n</code></pre><p>hexo new “学习笔记  六”</p>\n<ul>\n<li>新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。</li>\n<li>文章标题可以在对应 md 文件里改，新建时标题可以写的简单些。</li>\n</ul>\n<h3 id=\"hexo-d\"><a href=\"#hexo-d\" class=\"headerlink\" title=\"hexo d\"></a>hexo d</h3><pre><code>hexo d\n</code></pre><p>自动生成网站静态文件，并部署到设定的仓库。</p>\n<ul>\n<li>hexo d 是 hexo deploy 的缩写，命令效果一致。</li>\n</ul>\n<h3 id=\"hexo-clean\"><a href=\"#hexo-clean\" class=\"headerlink\" title=\"hexo clean\"></a>hexo clean</h3><pre><code>hexo clean\n</code></pre><p>清除缓存文件 db.json 和已生成的静态文件 public 。</p>\n<ul>\n<li>网站显示异常时可以执行这条命令试试。</li>\n</ul>\n<h3 id=\"hexo-g\"><a href=\"#hexo-g\" class=\"headerlink\" title=\"hexo g\"></a>hexo g</h3><pre><code>hexo g\n</code></pre><p>生成网站静态文件到默认设置的 public 文件夹。</p>\n<ul>\n<li>便于查看网站生成的静态文件或者手动部署网站；</li>\n<li>如果使用自动部署，不需要先执行该命令；</li>\n<li>hexo g 是 hexo generate 的缩写，命令效果一致。</li>\n</ul>\n<h3 id=\"hexo-new-page\"><a href=\"#hexo-new-page\" class=\"headerlink\" title=\"hexo new page\"></a>hexo new page</h3><pre><code>hexo new page aboutme\n</code></pre><p>新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/</p>\n<ul>\n<li>标题可以为中文，但一般习惯用英文；</li>\n<li>页面标题和文章一样可以随意修改；</li>\n<li>页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。</li>\n</ul>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n\n","excerpt":"Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个: hexo shexo s 启动本地服务器，用于预览主题。默认地址： http://localhost:4000/ hexo s 是 hexo server 的缩写，命令效果一致； 预览的同时可以修改文章内容或主题代码，保存后刷新页面即可； 对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.ding1996.cn/tags/hexo/"}]},{"title":"Hello hexo","date":"2016-08-10T10:54:14.000Z","path":"2016/08/10/it-hexo/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 扫描二维码添加丁盛为你的好友技术、户外、摄影、自驾 欢迎交流","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><a id=\"more\"></a>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<hr>\n<div align=\"center\"><br>    <center> 扫描二维码添加丁盛为你的好友</center><center><font color=\"#f75000\" size=\"\">技术、户外、摄影、自驾 欢迎交流</font><center><img width=\"40%\" align=\"center\" src=\"/uploads/wechat-qcode.jpg\n\"><br></center></center></div>\n","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start","categories":[{"name":"技术","slug":"技术","permalink":"http://www.ding1996.cn/categories/技术/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.ding1996.cn/tags/hexo/"}]}]